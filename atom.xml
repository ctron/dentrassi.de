<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>ctron&#x27;s blog</title>
    <subtitle>Life, the Universe and Everything</subtitle>
    <link href="dentrassi.de/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="dentrassi.de"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2022-09-15T08:44:34+02:00</updated>
    <id>dentrassi.de/atom.xml</id>
    <entry xml:lang="en">
        <title>Contact</title>
        <published>2022-09-15T08:44:34+02:00</published>
        <updated>2022-09-15T08:44:34+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/legal/contact/" type="text/html"/>
        <id>dentrassi.de/legal/contact/</id>
        <content type="html">&lt;dl&gt;&lt;dt&gt;E-Mail&lt;&#x2F;dt&gt;&lt;dd&gt;ctron@dentrassi.de ([PGP Key](https:&#x2F;&#x2F;dentrassi.de&#x2F;pgp-key&#x2F;))&lt;&#x2F;dd&gt;&lt;dt&gt;Fediverse (Mastodon)&lt;&#x2F;dt&gt;&lt;dd&gt;[@ctron@dentrassi.de ](https:&#x2F;&#x2F;mastodon.dentrassi.de&#x2F;@ctron)&lt;&#x2F;dd&gt;&lt;dt&gt;Matrix&lt;&#x2F;dt&gt;&lt;dd&gt;[@ctron:dentrassi.de](https:&#x2F;&#x2F;matrix.to&#x2F;#&#x2F;@ctron:dentrassi)&lt;&#x2F;dd&gt;&lt;dt&gt;GitHub&lt;&#x2F;dt&gt;&lt;dd&gt;[@ctron](https:&#x2F;&#x2F;github.com&#x2F;ctron)&lt;&#x2F;dd&gt;&lt;&#x2F;dl&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Using Ingress on OpenShift backed by Routes</title>
        <published>2021-05-21T21:10:42+02:00</published>
        <updated>2021-05-21T21:10:42+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2021/05/21/using-ingress-on-openshift-backed-by-routes/" type="text/html"/>
        <id>dentrassi.de/blog/2021/05/21/using-ingress-on-openshift-backed-by-routes/</id>
        <content type="html">&lt;p&gt;When you want to get traffic into your OpenShift cluster, &lt;code&gt;Routes&lt;&#x2F;code&gt; are just awesome. But every now and then, using &lt;code&gt;Ingress&lt;&#x2F;code&gt; instead might provide some benefits. Here are a few tricks how you can have the best of both worlds.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;routes-vs-ingress&quot;&gt;Routes vs Ingress&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.openshift.com&#x2F;blog&#x2F;kubernetes-ingress-vs-openshift-route&quot;&gt;OpenShift Routes predate the Ingress resource&lt;&#x2F;a&gt;, they have been part of OpenShift 3.0! Routes are just awesome. Instead of fiddling with services and load balancers, you have a single load balancer for bringing in multiple HTTP or TLS based services. The idea is pretty simply, instead of patching through multiple services, you patch through only one: HAproxy. Which then gets configured to direct traffic to the different services inside the cluster.&lt;&#x2F;p&gt;
&lt;p&gt;That way, it is possible to configure a single application domain, issue a wildcard certificate for that domain. So you can create route objects, auto-assign a DNS name and have it secured with TLS automatically. Without needing to issue or refresh certificates individually or maintain DNS entries yourself. It is absolutely simple.&lt;&#x2F;p&gt;
&lt;p&gt;Ingress was modeled after that approach. But for vanilla Kubernetes. It even allows to have different ingress controllers, which take the job of realizing what you configured with your ingress resources. There are few pros and cons on both sides, but if you have an OpenShift setup already, using routes is more convenient in most cases.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ingress-backed-by-routes&quot;&gt;Ingress backed by Routes&lt;&#x2F;h2&gt;
&lt;p&gt;Most cases … so, sometimes using Ingress might be better. And I leave it to you to decide when that is. But if you want to use Ingress, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.openshift.com&#x2F;container-platform&#x2F;4.7&#x2F;networking&#x2F;ingress-operator.html&quot;&gt;OpenShift brings an ingress controlled&lt;&#x2F;a&gt;, backed by Routes. What it does is simple: When you create an Ingress object, it will &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.openshift.com&#x2F;container-platform&#x2F;4.7&#x2F;networking&#x2F;routes&#x2F;route-configuration.html#nw-ingress-creating-a-route-via-an-ingress_route-configuration&quot;&gt;translate that into OpenShift Routes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are some pitfalls, and here are a few tricks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-must-define-a-host-in-your-ingress-resource&quot;&gt;You must define a ‘host’ in your Ingress resource&lt;&#x2F;h2&gt;
&lt;p&gt;Ingress objects allow you to set a host name for its rules:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;networking.k8s.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;Ingress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;ingress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;my.host.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# optional
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;paths&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pathType&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;Prefix
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;backend&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So in that example, the hostname is set to &lt;code&gt;my.host.name&lt;&#x2F;code&gt;. However, for the Ingress object, it is perfectly fine to omit that. And the same is true for the OpenShift Route. However, both concepts have a different idea what that means. For Routes, that will auto-create a hostname, in most cases of the pattern &lt;code&gt;&amp;lt;name&amp;gt;-&amp;lt;namespace&amp;gt;.apps.&amp;lt;your.cluster.domain&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For Ingress, that means that there is no filtering (or routing) based on the virtual hostname. So all requests for all hosts match.&lt;&#x2F;p&gt;
&lt;p&gt;What happens in the case of OpenShift Route to Ingress conversion, is that it simply doesn’t create the Routes. You create the Ingress object, and nothing happens.&lt;&#x2F;p&gt;
&lt;p&gt;As soon as you set a hostname, the Routes get created.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-the-application-domain-name&quot;&gt;Getting the application domain name&lt;&#x2F;h2&gt;
&lt;p&gt;So for Ingress resources, you need to know the application domain name. So far, the only way I found to extract that information from the cluster is be inspecting the ingress controller resource:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kubectl -n&lt;&#x2F;span&gt;&lt;span&gt; openshift-ingress-operator get ingresscontrollers.operator.openshift.io default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; jsonpath=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;{.status.domain}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the name &lt;code&gt;default&lt;&#x2F;code&gt;, that is the name of the default ingress controller. Your cluster can have more. So you might need to tweak that in this case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tls-termination&quot;&gt;TLS termination&lt;&#x2F;h2&gt;
&lt;p&gt;By default, Ingress creates plain HTTP (non-TLS) mappings. A thing that shouldn’t exist anymore. And with Routes, it is super easy to fix that. You can configure the TLS termination, and so inside of your cluster you can still have HTTP, but at least externally, you can encrypt traffic with a cluster wide TLS certificate. With no extra effort.&lt;&#x2F;p&gt;
&lt;p&gt;Ingress backed by Routes can do that too, but it took me a while to find the right page explaining that.&lt;&#x2F;p&gt;
&lt;p&gt;With Ingress you can manually configure the TLS options in &lt;code&gt;.spec.tls&lt;&#x2F;code&gt;. But that isn’t necessary, if you simply want to use the OpenShift cluster wide TLS certificate.&lt;&#x2F;p&gt;
&lt;p&gt;Adding the following annotation will configure the route to do “edge” termination:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;Ingress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;networking.k8s.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route.openshift.io&#x2F;termination&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;edge
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# …
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will assume that the traffic at the service is plain HTTP, and encrypt to so that you have HTTPS outside your cluster.&lt;&#x2F;p&gt;
&lt;p&gt;You can also use “re-encrypt” mode, using the following annotation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;Ingress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;networking.k8s.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route.openshift.io&#x2F;termination&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;reencrypt&amp;quot; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# …
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will assume the traffic already is HTTPS for the service, and it will re-encrypt this at the route level. However, the internal HTTPS traffic can use the internal CA, in which case you don’t need to configure any key&#x2F;cert on the route level, as that is already trusted internally.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-else&quot;&gt;What else?&lt;&#x2F;h2&gt;
&lt;p&gt;I had some issues finding the right information about Ingress on OpenShift, most documentation is about Routes. And I can understand why, because they are just awesome. But I wanted to document what I found out, also through digging through code and other blog posts. So I simply wanted to share what I have learned, in the hope that others might find that information more easily.&lt;&#x2F;p&gt;
&lt;p&gt;If you have some more tips and tricks, please post a comment. I would be happy to update the post with some more information.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Recovering from an expired OpenShift certificate</title>
        <published>2021-01-18T12:29:21+01:00</published>
        <updated>2021-01-18T12:29:21+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2021/01/18/recovering-from-an-expired-openshift-certificate/" type="text/html"/>
        <id>dentrassi.de/blog/2021/01/18/recovering-from-an-expired-openshift-certificate/</id>
        <content type="html">&lt;p&gt;A not-so-great way to start into a new week, is to figure out that the certificate of your API server expired on the weekend. Fixing and expired OpenShift certificate should be straight forward, but it wasn’t. Here is what happened, or you can directly scroll down for the solution.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;the-setting&quot;&gt;The setting&lt;&#x2F;h2&gt;
&lt;p&gt;I am running my own &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.openshift.com&#x2F;&quot;&gt;OpenShift&lt;&#x2F;a&gt; cluster for a while now, playing with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;category&#x2F;iot&#x2F;&quot;&gt;IoT stuff&lt;&#x2F;a&gt;, and using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;letsencrypt.org&#x2F;&quot;&gt;Let’s Encrypt&lt;&#x2F;a&gt; certificates to secure the API server endpoints and the application domain. Most of that is automated, only the certificate renewal is not. So every 60 days, I am refreshing the certificates, which gives me a buffer of 30 days, should something go wrong. And while I have that scripted as well, I need to manually trigger that.&lt;&#x2F;p&gt;
&lt;p&gt;So when you start a new week, try to log in an see the following output, you know that you forgot about something important:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;error: x509: certificate has expired or is not yet valid: current time 2021-01-18T11:21:55+01:00 is after 2021-01-17T09:35:54Z
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then again, I do recall refreshing the certificates at the end of 2020. So what went wrong?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-happened&quot;&gt;What happened?&lt;&#x2F;h2&gt;
&lt;p&gt;I only found out about the root cause later, once I fixed the issue. However, it is an important piece of the puzzle, because my case was a bit different from most cases of an expired OpenShift certificate.&lt;&#x2F;p&gt;
&lt;p&gt;OpenShift allows you to manage the certificates using a custom resource, and has an operator to roll out those certificates. In a nutshell, you need to provide two &lt;code&gt;Secrets&lt;&#x2F;code&gt;, containing a signed certificate and key each. OpenShift will do the rest for you. One combination is for the API server, and the other one is for the application domain, the default ingress mechanism.&lt;&#x2F;p&gt;
&lt;p&gt;I did make a change to my script, and that introduced a bug. The result was that the API server certificates was renewed, however the application domain certificate was not.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-needed-to-be-done&quot;&gt;What needed to be done?&lt;&#x2F;h2&gt;
&lt;p&gt;All that I would needed to do in order to fix this, was to update the &lt;code&gt;Secret&lt;&#x2F;code&gt; which contains the key&#x2F;cert combination. Providing a newer, non-expired version, would trigger a re-rollout and all things would be back to normal.&lt;&#x2F;p&gt;
&lt;p&gt;But how you can update a &lt;code&gt;Secret&lt;&#x2F;code&gt; if you no longer have access to your cluster? &lt;code&gt;oc login&lt;&#x2F;code&gt; failed with the certificate error.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-not-skip-tls-validation&quot;&gt;Why not skip TLS validation?&lt;&#x2F;h2&gt;
&lt;p&gt;True, the &lt;code&gt;oc&lt;&#x2F;code&gt; command, as well as the &lt;code&gt;kubectl&lt;&#x2F;code&gt; command, offer you to provide &lt;code&gt;--insecure-skip-tls-verify=true&lt;&#x2F;code&gt; and just skip TLS validation. And that would have worked, if the issue was with the API server certificate.&lt;&#x2F;p&gt;
&lt;p&gt;However, the situation here was different. I didn’t have a valid access token anymore. In order to get a new one, you simply do &lt;code&gt;oc login&lt;&#x2F;code&gt;. That didn’t work out, reporting the same X.509 certificate error. In the background, the &lt;code&gt;oc&lt;&#x2F;code&gt; commands tries to refresh the token, but not using the API server, but using an OAuth endpoint. Which is hosted on the standard ingress endpoints, and not the API server endpoints. Unfortunately, &lt;code&gt;--insecure-skip-tls-verify&lt;&#x2F;code&gt; only works for the API server endpoints. I would call that a bit inconsistent, but hey.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-cases-of-expired-openshift-certificates&quot;&gt;Other cases of expired OpenShift certificates&lt;&#x2F;h2&gt;
&lt;p&gt;Searching on the internet for a solution, all kinds of “expired certificate” cases with Kubernetes showed up. Many of the on the control plane, but that wasn’t what I was looking for. Also some of the API server certificate fixes sounded rather invasive. I am glad I didn’t give any of them a try, as that might have actually caused more harm in the end.&lt;&#x2F;p&gt;
&lt;p&gt;Remember, all I needed was a way to replace some &lt;code&gt;Secrets&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;&#x2F;h2&gt;
&lt;p&gt;After some debugging, I found the root cause, mentioned above. The API endpoint certificate was working, the OAuth one was expired. Making &lt;code&gt;oc login&lt;&#x2F;code&gt; fail, despite adding &lt;code&gt;--insecure-skip-tls-verify=true&lt;&#x2F;code&gt; to calls.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, when creating an OpenShift cluster you will also get a cluster certificate, which you can use to access the API server as an admin user. You are supposed to keep this key&#x2F;cert combination, for cases like this.&lt;&#x2F;p&gt;
&lt;p&gt;Setting the &lt;code&gt;KUBECONFIG&lt;&#x2F;code&gt; environment variable to the generated, original configuration gives you direct access to your cluster, without the need to log in:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;KUBECONFIG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&#x2F;home&#x2F;me&#x2F;cluster&#x2F;installation&#x2F;auth&#x2F;kubeconfig
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that, I was automatically “logged in”, and could re-run my custom scripts for replacing the &lt;code&gt;Secrets&lt;&#x2F;code&gt; necessary to fix the expired OpenShift certificates. The operator rolled them out, and the cluster was operational again.&lt;&#x2F;p&gt;
&lt;p&gt;The actual commands for re-creating the ingress certificates might be different in your case, depending on your settings and environment. Here is what works for me:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;oc&lt;&#x2F;span&gt;&lt;span&gt; delete secret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; openshift-ingress ingress-cert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --ignore-not-found&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;oc&lt;&#x2F;span&gt;&lt;span&gt; create secret tls ingress-cert \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  --cert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;certs&#x2F;apps.full.pem \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  --key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;certs&#x2F;apps.key \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  -n&lt;&#x2F;span&gt;&lt;span&gt; openshift-ingress
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;oc&lt;&#x2F;span&gt;&lt;span&gt; patch ingresscontroller.operator default \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  --type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -p &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;{&amp;quot;spec&amp;quot;:{&amp;quot;defaultCertificate&amp;quot;: {&amp;quot;name&amp;quot;: &amp;quot;ingress-cert&amp;quot;}}}&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  -n&lt;&#x2F;span&gt;&lt;span&gt; openshift-ingress-operator
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;&#x2F;h2&gt;
&lt;p&gt;Maybe this helps you, and saves you a few minutes. I might help me in the future :-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>A Rusty frontend: Patternfly &amp; Yew</title>
        <published>2021-01-08T17:52:54+01:00</published>
        <updated>2021-01-08T17:52:54+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2021/01/08/rusty-frontend-patternfly-yew/" type="text/html"/>
        <id>dentrassi.de/blog/2021/01/08/rusty-frontend-patternfly-yew/</id>
        <content type="html">&lt;p&gt;A while back I started to become a real Rust fanboy, so when I wanted to “scratch an itch” of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.elkato.de&#x2F;&quot;&gt;our car sharing booking system&lt;&#x2F;a&gt;, of course I was using Rust for the backend. When it came to the frontend stuff, I was wondering if there is an alternative to JavaScript and so I found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;yew.rs&quot;&gt;Yew Stack&lt;&#x2F;a&gt;, which is simply awesome and allows for a full-Rust solution.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;the-setting&quot;&gt;The setting&lt;&#x2F;h2&gt;
&lt;p&gt;So we are part of a car sharing community, and that community uses a web based system to book cars. Plain and simple. Every now and then you run into use cases that the booking system doesn’t cover. If it would have some simply API, that wouldn’t be an issue, but all that is does is serve HTML which, well … let’s just say I am impressed that modern day browsers still render this.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately this solution isn’t open source, and beside that it is a MS Access “application” coded in Visual Basic if I am informed correctly. So staying away from that is my top priority.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-an-api&quot;&gt;Creating an API&lt;&#x2F;h2&gt;
&lt;p&gt;Serving an API in Rust is simple. There are a bunch of choices, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actix&#x2F;actix-web&quot;&gt;actix-web&lt;&#x2F;a&gt; being one of them. The bigger issue was, how to I get access to the data?&lt;&#x2F;p&gt;
&lt;p&gt;If a browser can still interpret the HTML, maybe I can write some code to scrape the booking details from those pages? And yes, a bit of Rust, using the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Geal&#x2F;nom&quot;&gt;nom&lt;&#x2F;a&gt; parser library, and I was able the creating an asynchronous “stream” of Bookings, backed by paging requests to the original web frontend, scraping booking and paging information out of the web pages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; now &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Local::now().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;with_timezone&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;Utc);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bookings: Vec&amp;lt;Booking&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; client
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;list_bookings&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        User {
&lt;&#x2F;span&gt;&lt;span&gt;            club: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;abc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            username: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;def&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            password: Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;123&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()),
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        ListOptions {
&lt;&#x2F;span&gt;&lt;span&gt;            owner: Some(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;def&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()),
&lt;&#x2F;span&gt;&lt;span&gt;            start_from: Some(now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;Duration::days(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;            end_to: Some(now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;Duration::days(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;boxed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;try_collect&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; booking &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;bookings {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, booking);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That was simpler than expected (ok, writing that async-stream iterator with paging was not, but the overall solution up to this point was). But I ended up with a 12 MiB (yes, “megabyte”) service that provided me an API for the booking system. At least the API that I needed to scratch my itch. No gigabytes of Spring Boot application, plain and simple.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;allergic-to-javascript-here-is-a-way-out&quot;&gt;Allergic to JavaScript? Here is a way out!&lt;&#x2F;h2&gt;
&lt;p&gt;The truth is, I am not a frontend guy. Yes, I did some PHP in the past, and I can create some Bootstrap blog theme. But all the “new” JavaScript approaches give me the creeps. The number of components and steps involved to render some basic HTML and CSS in the browser as simply insane. True, the pattern of “running” a web frontend application in the browser is nice. Only fetching data through APIs, compared to fetching the full rendered view all the time. But to me, JavaScript is still a pure nightmare, and TypeScript is not the solution.&lt;&#x2F;p&gt;
&lt;p&gt;I knew that Rust and WASM was a thing, so I looked around what was available and found &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;yew.rs&#x2F;&quot;&gt;Yew Stack&lt;&#x2F;a&gt;. The idea of yew is pretty simple: enable people to create a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;reactjs.org&#x2F;&quot;&gt;ReactJS&lt;&#x2F;a&gt; style application in pure Rust. It describes itself as:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Yew&lt;&#x2F;strong&gt; is a modern &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt; framework for creating multi-threaded front-end web apps with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WebAssembly&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;cite&gt;The Yew homepage&lt;&#x2F;cite&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Just was I was looking for!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;concepts-of-yew&quot;&gt;Concepts of Yew&lt;&#x2F;h2&gt;
&lt;p&gt;Getting started with Yew is pretty simple. There are a few concepts you need to learn and embrace, otherwise you might have a hard time. Don’t think of it as a “web page”, more like a “web application”. People using ReactJS might already be familiar with that, but if you are used to “rendering” HTML views, it might take a bit. Basically everything is running in the browser, where you have a tree of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;yew.rs&#x2F;docs&#x2F;en&#x2F;concepts&#x2F;html&#x2F;components&quot;&gt;components&lt;&#x2F;a&gt;. Each component has a state, a way to render the state, and a way to update the state by sending messages to a component. Yew takes care of orchestrating this internally. So when the state of your component changes, Yew will ask you to re-render yourself, and generates and applies a diff to the DOM tree of your HTML document. Letting the browser render only changed parts.&lt;&#x2F;p&gt;
&lt;p&gt;It will look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;MyComponent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Container {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Properties &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; MyProps;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Messages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; MyMsg;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span&gt;: MyMsg) -&amp;gt; ShouldRender {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; msg {
&lt;&#x2F;span&gt;&lt;span&gt;            MyMsg::ChangeMyState() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Html {
&lt;&#x2F;span&gt;&lt;span&gt;       html! {
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;div id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;container&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.counter }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;span&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;               { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.props.children.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;() }
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As mentioned, the concept is similar to ReactJS in the web world, or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;flutter.dev&#x2F;&quot;&gt;Flutter&lt;&#x2F;a&gt; in the app world. Just that you can use Rust, instead of JavaScript or Dart.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-frontend-stack&quot;&gt;The frontend stack&lt;&#x2F;h2&gt;
&lt;p&gt;One thing that is missing in Yew, is a component library. And for good reason! Yew is built on browser features manipulating the DOM tree. But it does not force you into using a specific web framework, like Bootstrap or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bulma.io&#x2F;&quot;&gt;Bulma&lt;&#x2F;a&gt; (though I have to say, I really like Bulma, and there is a project called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;thedodd&#x2F;ybc&quot;&gt;ybc&lt;&#x2F;a&gt;, which provides Yew components for Bulma already).&lt;&#x2F;p&gt;
&lt;p&gt;And while I am already using Bulma for other stuff, it felt a bit too homepagey to me. I was hoping for some more data&#x2F;controls oriented CSS components. So I was looking into the direction of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.patternfly.org&#x2F;v4&#x2F;&quot;&gt;Patternfly&lt;&#x2F;a&gt;. And while I might be a bit closer to Patternyfly, I still use other CSS frameworks for other stuff as well. But I also had some hopes that I could re-use the work for the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.drogue.io&#x2F;&quot;&gt;Rust IoT stuff&lt;&#x2F;a&gt; I am working on.&lt;&#x2F;p&gt;
&lt;p&gt;So I started to create some &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;patternfly-yew&quot;&gt;Patternfly components for Rust&lt;&#x2F;a&gt;, backed by Yew stack. And while it definitely was a bit slower than simply re-using the existing Bulma components, I was pretty soon able to create the fronted I needed, and learned a lot about Yew on the way.&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Elkato-extras-e1610120101881.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Elkato-extras-e1610120101881.png&quot; alt=&quot;Screenshot of bookings view&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Screenshot of bookings view&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;more-components&quot;&gt;More components&lt;&#x2F;h2&gt;
&lt;p&gt;That early example comes from a while back. As always, when you start something, and you like it, you might re-use it yourself. So every now and then, I need some more components, and simply map them:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Patternfly-Yew-Quickstart-1.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Patternfly-Yew-Quickstart-1-1024x881.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Patternfly-Yew-Quickstart-3.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Patternfly-Yew-Quickstart-3-1024x935.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Patternfly-Yew-Quickstart-4.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Patternfly-Yew-Quickstart-4-1024x472.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Patternfly-Yew-Quickstart.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Patternfly-Yew-Quickstart-1024x782.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Drogue-IoT-Console.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Drogue-IoT-Console-1024x881.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Drogue-IoT-Console-2-e1610121200551.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Screenshot_2021-01-08-Drogue-IoT-Console-2-e1610121200551-1024x443.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;&#x2F;h2&gt;
&lt;p&gt;First of all, writing web frontends in Rust is fun. At least if you are a Rust fanboy. You can leverage your existing knowledge an experience from other Rust projects, and while I definitely has to learn a few new things, it feels much more “home” than doing the same in JavaScript.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;no-more-javascript-mostly&quot;&gt;No more JavaScript … mostly&lt;&#x2F;h3&gt;
&lt;p&gt;All of the compile time checking that Rust offers, are just as helpful in the web world. Assigning a wrong type to a property, forgot to add a match-clause after adding a new enum literal, all caught by the compiler (like calling a wrong method or passing in wrong arguments). No more &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=et8xNAc2ic8&quot;&gt;JavaScript madness&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Well … not fully. First of all, you need to package your web application somehow. Which means that you need to also include Patternfly, and also may need to run a SASS compiler. Packaging all that up, &lt;code&gt;wasm-pack&lt;&#x2F;code&gt; and thus &lt;code&gt;npm&lt;&#x2F;code&gt; and &lt;code&gt;webpack&lt;&#x2F;code&gt; might come in handy. Still, this is only used for running parts of the build, but it requires you to have a Node JS installation, or a least a container of that.&lt;&#x2F;p&gt;
&lt;p&gt;Second: every now and then, you need to integrate with some existing JavaScript library or browser API. Patternfly for example places popovers using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;popper.js.org&#x2F;&quot;&gt;popper.js&lt;&#x2F;a&gt;, and so you somehow need to integrate that into your Rust web application. The bright side of that is, using &lt;code&gt;wasm-bind&lt;&#x2F;code&gt; and the Yew component system, you can easily hide all of that behind a nice API. It is pretty similar to interfacing Rust to C using FFI.&lt;&#x2F;p&gt;
&lt;p&gt;On the other side, a bit of JavaScript, hidden behind proper APIs, isn’t too bad if you can use Rust for all the other parts of the backend and frontend. And yes, you can actually re-use the same code from the backend in the frontend as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yew-stack&quot;&gt;Yew Stack&lt;&#x2F;h3&gt;
&lt;p&gt;Yew is a great framework. But it also can be quite overwhelming when getting started. True, the documentation of Yew could be better, and yes I didn’t contribute as much as I could. Shame on me. However, the Yew community has a few &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;VQck8X4&quot;&gt;discord channels&lt;&#x2F;a&gt; and is willing to help.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wasm&quot;&gt;WASM&lt;&#x2F;h3&gt;
&lt;p&gt;Initially I wasn’t sure if all browsers, desktop and mobile, would be happy executing WASM, but so far, I didn’t have any issues. Fingers crossed!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-even-could&quot;&gt;I even could…&lt;&#x2F;h2&gt;
&lt;p&gt;One concern that came up when demoing the solution was, that my backend would get access to the login credentials of the booking system. Yes, that system is using HTTP authentication instead of any kind of tokens, so the backend actually has the plain password. It doesn’t store the password, that is persisted in the browser storage on the client device. But the API backend needs to pass on the credentials from the user to the original backend system.&lt;&#x2F;p&gt;
&lt;p&gt;As the frontend can run all kinds of Rust code, even the booking system client library that I wrote, it would be possible to put the client code directly into the frontend. Remember, the backend only executes some HTTP calls to the booking system and scrapes the HTML pages for data. So the browser could download the packaged WASM application from any server, and never would need to call into any intermediate backend.&lt;&#x2F;p&gt;
&lt;p&gt;However, there are two downsides to this approach. First, I would need to let go of my hard-learned async-stream iterator client, as the WASM part cannot use raw TCP sockets in the browser, it needs to use the Request API of the browser to perform HTTP requests. As HTTP client I used &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seanmonstar&#x2F;reqwest&quot;&gt;reqwest&lt;&#x2F;a&gt;, which has both an async and sync API and has an implementation for native sockets, but also for the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seanmonstar&#x2F;reqwest&#x2F;tree&#x2F;master&#x2F;src&#x2F;wasm&quot;&gt;Request API of the browser&lt;&#x2F;a&gt;. Unfortunately, it doesn’t provide an implementation of the async API using the browser backend. The second reason for having a standalone API is, that this would allow others to use this API as well, but not force them to use Rust. Still, adding a sync version of my API in the future, for using in the frontend, wouldn’t be a problem, and only hurt my pride 😁&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;If you are a fan of Rust and allergic to JavaScript as well, you might appreciate Yew and maybe the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;patternfly-yew&quot;&gt;Patternfly components for Yew&lt;&#x2F;a&gt;. You can take a quick look at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;patternfly-yew-quickstart&quot;&gt;the quickstart application&lt;&#x2F;a&gt;, or direct your browser to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;patternfly-yew-quickstart&#x2F;&quot;&gt;the running version&lt;&#x2F;a&gt; of that.&lt;&#x2F;p&gt;
&lt;p&gt;I was able to not only able parse the ancient HTML 3-ish output of our booking system, but also able to provide a decent API and state of the art web frontend. All using the same programming language, re-using my Rust experience and even data structures and code between frontend and backend. Fixing my original problem with truly small service.&lt;&#x2F;p&gt;
&lt;p&gt;While you already can do quite a lot, the Patternfly Yew components are far from complete. A bunch of components and properties are still missing. As needed I will be adding new features over time, but contributions are always welcome 😉&lt;&#x2F;p&gt;
&lt;h2 id=&quot;see-also&quot;&gt;See also&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Yew – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;yew.rs&quot;&gt;https:&#x2F;&#x2F;yew.rs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Elkato API – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;elkato-api&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;elkato-api&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;PatternFly – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.patternfly.org&#x2F;v4&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.patternfly.org&#x2F;v4&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;PatternFly Yew Components – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;patternfly-yew&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;patternfly-yew&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;PatternFly Yew Quickstart – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;patternfly-yew-quickstart&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;patternfly-yew-quickstart&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;PatternFly Yew Demo – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;patternfly-yew-quickstart&#x2F;&quot;&gt;https:&#x2F;&#x2F;ctron.github.io&#x2F;patternfly-yew-quickstart&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>OpenShift Update Graph Visualizer, lessons learned</title>
        <published>2020-08-02T14:01:21+02:00</published>
        <updated>2020-08-02T14:01:21+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2020/08/02/openshift-update-graph-visualizer-lessons-learned/" type="text/html"/>
        <id>dentrassi.de/blog/2020/08/02/openshift-update-graph-visualizer-lessons-learned/</id>
        <content type="html">&lt;p&gt;Since OpenShift 4, updates are rather trivial. You wait for the new update to appear, press the button (or use the CLI), wait a bit, and the update is done. True, in production you might want to complicate that process a bit, for good reason.&lt;&#x2F;p&gt;
&lt;p&gt;Running an OpenShift 4 cluster now for a while myself, and developing apps on top of Kubernetes on my day job, I am curious about the next release. Is it GA already? Can I deploy it? Is there an upgrade for my current version? Is that in “candidate”, “fast”, or “stable”? Checking that turned out to be no as easy as it should be.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;a-bit-of-background&quot;&gt;A bit of background&lt;&#x2F;h2&gt;
&lt;p&gt;The tool behind the OpenShift update information is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openshift&#x2F;cincinnati&quot;&gt;openshift&#x2F;cincinnati&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Cincinnati is an update protocol designed to facilitate automatic updates. It describes a particular method for representing transitions between releases of a project and allowing a client to perform automatic updates between these releases.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;cite&gt;https:&#x2F;&#x2F;github.com&#x2F;openshift&#x2F;cincinnati&lt;&#x2F;cite&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Which means, that this tool has all the information available, to show which upgrade is available. And from which version I can upgrade. It also has the information about all the different channels (like “fast”, “candidate”, or “stable”). And it is written in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt;, I love it already.&lt;&#x2F;p&gt;
&lt;p&gt;There is a little bit of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openshift&#x2F;cincinnati-graph-data&quot;&gt;information on the data format&lt;&#x2F;a&gt;, but what about the data itself? It is available from the endpoint &lt;code&gt;https:&#x2F;&#x2F;api.openshift.com&#x2F;api&#x2F;upgrades_info&lt;&#x2F;code&gt;. So now have everything that we need.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;&#x2F;h2&gt;
&lt;p&gt;To be honest, there is nothing too difficult about it. You have all the data. There already is a nice &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openshift&#x2F;cincinnati&#x2F;blob&#x2F;master&#x2F;hack&#x2F;graph.sh&quot;&gt;example&lt;&#x2F;a&gt; using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;graphviz.org&#x2F;&quot;&gt;graphviz&lt;&#x2F;a&gt; in the repository of OpenShift Cincinnati. The problem with the example is, you need to run it every time an update gets posted, for every channel. It will generate a static graph representation, so you have no ability to zoom, or re-arrange. It would be nice to have bit more interactive visualization of that graph.&lt;&#x2F;p&gt;
&lt;p&gt;A few hours later, and with the help of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;visjs.org&#x2F;&quot;&gt;visjs&lt;&#x2F;a&gt;, jQuery, Bootstrap, and some plain old Javascript, you have something more interactive: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;openshift-update-graph&#x2F;&quot;&gt;https:&#x2F;&#x2F;ctron.github.io&#x2F;openshift-update-graph&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;openshift-update-graph&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;image-1024x722.png&quot; alt=&quot;Screenshot of OpenShift Update Graph Visualizer&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenges&quot;&gt;The challenges&lt;&#x2F;h2&gt;
&lt;p&gt;As always, it should be simple. But in real life, nothing is. Of course I encountered a few obstacles to work around …&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hosting-a-web-page&quot;&gt;Hosting a web page&lt;&#x2F;h3&gt;
&lt;p&gt;Hosting a simple, static, webpage used to be so simple. Put a file into a directory that Apache publishes, and your are done … Today, I also could set up a Tekton pipeline, build a new image, and “run” the webpage in a container, on a cluster, proxied by one or two more HTTP reverse proxies.&lt;&#x2F;p&gt;
&lt;p&gt;The truth is, there are now so many options when it comes to hosting a simple web page, it can become a tough decision. I wanted to keep things together closely. Most likely I will build it, use it, and don’t want to actively maintain it (forget about it). Git and GitHub are obvious choices for me, so why not simply host this with GitHub pages, using the same &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;openshift-update-graph&quot;&gt;repository I use for coding&lt;&#x2F;a&gt;. As it turned out later, that was the right choice and helped with a few other obstacles as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cors-headers&quot;&gt;CORS &amp;amp; headers&lt;&#x2F;h3&gt;
&lt;p&gt;Having an online API, HTTP based, should make it so simple to get everything you need, directly from the user’s browser session. The only thing that would be necessary, is to host the web page and a bit of JavaScript.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, the update API is rather picky when it comes to doing requests. It’s missing CORS headers, and using a general purpose CORS proxy turned out to lack the correct HTTP headers that the API requires. I wanted to focus on the visualization and wanted to stick to the plan of simply hosting a static web page, not running a CORS proxy myself for this.&lt;&#x2F;p&gt;
&lt;p&gt;Then again, the only thing I do to with the API, is to perform an &lt;code&gt;HTTP GET&lt;&#x2F;code&gt; request. As there is nothing dynamic about it, I could as well host a JSON file, and fetch that. I would only need a process to update the JSON data.&lt;&#x2F;p&gt;
&lt;p&gt;Now I was glad that I chose GitHub for all of this. Setting up a GitHub Actions &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;openshift-update-graph&#x2F;blob&#x2F;master&#x2F;.github&#x2F;workflows&#x2F;update.yaml&quot;&gt;workflow for updating the data&lt;&#x2F;a&gt; is rather simple. The command was already part of the original example, with the only difference, that I don’t need to run graphviz. The workflow will fetch the data, and when &lt;code&gt;git&lt;&#x2F;code&gt; detects a change in the data, the workflow will commit and push the changes to the same repository. Great plan, but …&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-formats&quot;&gt;Data formats&lt;&#x2F;h3&gt;
&lt;p&gt;… the data format is not stable. Doing multiple GET operations on the endpoint give you back different content. True, the information is the same, but the “byte content” is different. The data format describes updates as nodes and edges, very simple and a perfect match for our purpose. However, the edges reference the nodes by their position in the list of nodes, and not by some stable identifier. Assume the following two examples:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;nodes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;A&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;B&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;C&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;edges&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;from&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;to&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;from&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;to&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;nodes&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;C&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;B&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;A&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;edges&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;    { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;from&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;to&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;    { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;from&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;to&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;  ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both examples contain the same information (&lt;code&gt;A → B → C&lt;&#x2F;code&gt;), however the raw bytes are different (can you spot the difference). And &lt;code&gt;git diff&lt;&#x2F;code&gt; only works with the bytes, and not the actual information conveyed by those.&lt;&#x2F;p&gt;
&lt;p&gt;So my plan of periodically fetching the data, and letting &lt;code&gt;git diff&lt;&#x2F;code&gt; check for differences wouldn’t work. Unless I would create &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;openshift-update-graph&#x2F;blob&#x2F;master&#x2F;.github&#x2F;workflows&#x2F;expand.js&quot;&gt;a small script that normalizes the data&lt;&#x2F;a&gt;. Running that as part of the update job isn’t complicated at all. And now the diff can check if the normalized data changed, and only act on that.&lt;&#x2F;p&gt;
&lt;p&gt;Why do I keep the non-normalized data? Yes, I could let the visualizer use the normalized data. However, I would like to use the original data format. In the hope that some day, I would be able to use the API endpoint directly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;no-api-for-channels&quot;&gt;No API for channels&lt;&#x2F;h3&gt;
&lt;p&gt;I wanted to visualize all channels, with the different versions. Turns out, that there is no API for that: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openshift&#x2F;cincinnati&#x2F;issues&#x2F;171&quot;&gt;openshift&#x2F;cincinnati#171&lt;&#x2F;a&gt;. But I also didn’t want to maintain an update-to-date list of channels myself. A thing that I will forget about sooner or later. Nothing &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;openshift-update-graph&#x2F;blob&#x2F;master&#x2F;.github&#x2F;scripts&#x2F;update_streams.sh&quot;&gt;a little shell script&lt;&#x2F;a&gt; can fix. In GitHub actions, performing a checkout is simply yet another action, and you can &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;openshift-update-graph&#x2F;blob&#x2F;8d0c402e84f259acb249c638500e7579b41d7943&#x2F;.github&#x2F;workflows&#x2F;update.yaml#L20-L24&quot;&gt;check out multiple repositories&lt;&#x2F;a&gt;. Of course, you don’t get triggered from those repositories. But we are running a periodic workflow anyway, so why not checkout the graph data repository, and check for the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;openshift&#x2F;cincinnati-graph-data&#x2F;tree&#x2F;master&#x2F;channels&quot;&gt;channels in there&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Why didn’t I use the data contained in the channel directory of that repository? I wanted to really stick to the original API. There is all kinds of processing done with the data in there, and I simply didn’t want to replicate that. Finding all the channels as a workaround seemed fined though.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nervous-graphs&quot;&gt;Nervous graphs&lt;&#x2F;h3&gt;
&lt;p&gt;Once the graphs grow a bit, they can get rather complex. visj has a “physics” model built in, which helps to balance the layout when you drag around nodes. However, every now and then the layouter and the physics model seemed to produce funny, but useless results. Depending on the model, a simple reload, re-starting the layouting algorithm with a different seed fixes the problem. But that is a bad experience.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily, you can configure all kinds of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;visjs.github.io&#x2F;vis-network&#x2F;examples&#x2F;network&#x2F;physics&#x2F;physicsConfiguration.html&quot;&gt;settings in the physics model&lt;&#x2F;a&gt;, and playing around a bit with the settings lead to some settings, that seem to be fun, but stable enough, even for the bigger graphs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-next&quot;&gt;What is next?&lt;&#x2F;h2&gt;
&lt;p&gt;Not much really. It is a tool for me that just works, showing OpenShift updates with a click. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;The_Cathedral_and_the_Bazaar#Lessons_for_creating_good_open_source_software&quot;&gt;itch is scratched&lt;&#x2F;a&gt;, and I learned a few things in the process. And I hope that by sharing, it becomes useful for someone other than just me.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, if you think that something is missing, broken or could be done in a better way: Open Source is all about contributing ;-) → &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;openshift-update-graph&quot;&gt;ctron&#x2F;openshift-update-graph&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Quarkus – Supersonic Subatomic IoT</title>
        <published>2020-06-30T17:22:14+02:00</published>
        <updated>2020-06-30T17:22:14+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2020/06/30/quarkus-supersonic-subatomic-iot/" type="text/html"/>
        <id>dentrassi.de/blog/2020/06/30/quarkus-supersonic-subatomic-iot/</id>
        <content type="html">&lt;p&gt;Quarkus is advertised as a “Kubernetes Native Java stack, …”, so we took it to a test, and checked what benefits we can get, by replacing an existing service from the IoT components of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;enmasse.io&#x2F;&quot;&gt;EnMasse&lt;&#x2F;a&gt;, the cloud-native, self-service messaging system.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;the-context&quot;&gt;The context&lt;&#x2F;h2&gt;
&lt;p&gt;For quite a while, I wanted to try out Quarkus. I wanted to see what benefits it brings us in the context of EnMasse. The IoT functionality of EnMasse is provided by &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&#x2F;&quot;&gt;Eclipse Hono™&lt;&#x2F;a&gt;, which is a micro-service based IoT connectivity platform. Hono is written in Java, makes heavy use of Vert.x, and the application startup and configuration is being orchestrated by Spring Boot.&lt;&#x2F;p&gt;
&lt;p&gt;EnMasse provides the scalable messaging back-end, based on AMQP 1.0. It also takes care of the Eclipse Hono deployment, alongside EnMasse. Wiring up the different services, based on an infrastructure &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;extend-kubernetes&#x2F;api-extension&#x2F;custom-resources&#x2F;&quot;&gt;custom resource&lt;&#x2F;a&gt;. In a nutshell, you create a snippet of YAML, and EnMasse takes care and deploys a messaging system for you, with first-class support for IoT.&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;architecture.svg&quot; alt=&quot;Architecture diagram, explaining the tenant service.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Architectural overview – showing the Tenant Service&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;This system requires a service called the “tenant service”. That service is responsible for looking up an IoT tenant, whenever the system needs to validate that a tenant exists or when its configuration is required. Like all the other services in Hono, this service is implemented using the default stack, based on Java, Vert.x, and Spring Boot. Most of the implementation is based on Vert.x alone, using its reactive and asynchronous programming model. Spring Boot is only used for wiring up the application, using dependency injection and configuration management. So this isn’t a typical Spring Boot application, it is neither using Spring Web or any of the Spring Messaging components. And the reason for choosing Vert.x over Spring in the past was performance. Vert.x provides an excellent performance, which we tested a while back in our &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2018&#x2F;07&#x2F;25&#x2F;scaling-iot-eclipse-hono&#x2F;&quot;&gt;IoT scale test with Hono&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-goal&quot;&gt;The goal&lt;&#x2F;h2&gt;
&lt;p&gt;The goal was simple: make it use fewer resources, having the same functionality. We didn’t want to re-implement the whole service from scratch. And while the tenant service is specific to EnMasse, it still uses quite a lot of the base functionality coming from Hono. And we wanted to re-use all of that, as we did with Spring Boot. So this wasn’t one of those nice “greenfield” projects, where you can start from scratch, with a nice and clean “Hello World”. This is code is embedded in two bigger projects, passes system tests, and has a history of its own.&lt;&#x2F;p&gt;
&lt;p&gt;So, change as little as possible and get out as much as we can. What else could it be?! And just to understand from where we started, here is a screenshot of the metrics of the tenant service instance on my test cluster:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;before-1024x358.png&quot; alt=&quot;Screenshot of original resource consumption.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Metrics for the original Spring Boot application&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Around 200MiB of RAM, a little bit of CPU, and not much to do. As mentioned before, the tenant service only gets queries to verify the existence of a tenant, and the system will cache this information for a bit.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-1-migrate-to-quarkus&quot;&gt;Step #1 – Migrate to Quarkus&lt;&#x2F;h2&gt;
&lt;p&gt;To use Quarkus, we started to tweak our existing project, to adopt the different APIs that Quarkus uses for dependency injection and configuration. And to be fair, that mostly meant saying good-bye to Spring Boot specific APIs, going for something more open. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;quarkus.io&#x2F;guides&#x2F;cdi-reference&quot;&gt;Dependency Injection in Quarkus&lt;&#x2F;a&gt; comes in the form of CDI. And &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;quarkus.io&#x2F;guides&#x2F;config#injecting-configuration-value&quot;&gt;Quarkus’ configuration is based on Eclipse MicroProfile Config&lt;&#x2F;a&gt;. In a way, we didn’t migrate to Quarkus, but away from Spring Boot specific APIs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-steps&quot;&gt;First steps&lt;&#x2F;h3&gt;
&lt;p&gt;Starting with adding the Quarkus Maven plugin and some basic dependencies to our Maven build, and off we go.&lt;&#x2F;p&gt;
&lt;p&gt;And while replacing dependency inject was a rather smooth process, the configuration part was a bit more tricky. Both Hono and Microprofile Config have a rather opinionated view on the configuration. Which made it problematic to enhance the Hono configuration in the way that Microprofile was happy. So for the first iteration, we ended up wrapping the Hono configuration classes to make them play nice with Microprofile. However, this is something that we intend to improve in Hono in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Packaging the JAR into a container was no different than with the existing version. We only had to adapt the EnMasse operator to provide application arguments in the form Quarkus expected them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;first-results&quot;&gt;First results&lt;&#x2F;h3&gt;
&lt;p&gt;From a user perspective, nothing has changed. The tenant service still works the way it is expected to work and provides all the APIs as it did before. Just running with the Quarkus runtime, and the same &lt;abbr title=&quot;Java Virtual Machine&quot;&gt;JVM&lt;&#x2F;abbr&gt; as before:&lt;&#x2F;p&gt;
&lt;div class=&quot;wp-block-image&quot;&gt;&lt;figure class=&quot;aligncenter size-large&quot;&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;quarkus_jvm-1024x355.png&quot; alt=&quot;Screenshot of resource consumption with Quarkus in JVM mode.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Metrics after the conversion to Quarkus, in JVM mode&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;We can directly see a drop of 50MiB from 200MiB to 150MiB of RAM, that isn’t bad. CPU isn’t really different, though. There also is a slight improvement of the startup time, from ~2.5 seconds down to ~2 seconds. But that isn’t a real game-changer, I would say. Considering that ~2.5 seconds startup time, for a Spring Boot application, is actually not too bad, other services take much longer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-2-the-native-image&quot;&gt;Step #2 – The native image&lt;&#x2F;h2&gt;
&lt;p&gt;Everyone wants to do Java “native compilation”. I guess the expectation is that native compilation makes everything go much faster. There are different tests by different people, comparing native compilation and JVM mode, and the outcomes vary a lot. I don’t think that “native images” are a silver bullet to performance issues, but still, we have been curious to give it a try and see what happens.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;native-image-with-quarkus&quot;&gt;Native image with Quarkus&lt;&#x2F;h3&gt;
&lt;p&gt;Enabling native image mode in Quarkus is trivial. You need to add a Maven profile, set a few properties and you have native image generation enabled. With setting a single property in the Maven POM file, you can also instruct the Quarkus plugin to perform the native compilation step in a container. With that, you don’t need to worry about the GraalVM installation on your local machine.&lt;&#x2F;p&gt;
&lt;p&gt;Native image generation can be tricky, we knew that. However, we didn’t expect this to be as complex as being “Step #2”. In a nutshell, creating a native image compiles your code to CPU instruction, rather than JVM bytecode. In order to do that, it traces the call graph, and it fails to do so when it comes to reflection in Java. GraalVM supports reflection, but you need to provide the information about types, classes, and methods that want to participate in the reflection system, from the outside. Luckily Quarkus provides tooling to generate this information during the build. Quarkus knows about constructs like de-serialization in Jackson and can generate the required information for GraalVM to compile this correctly.&lt;&#x2F;p&gt;
&lt;p&gt;However, the magic only works in areas that Quarkus is aware of. So we did run into some weird issues, strange behavior that was hard to track down. Things that worked in JVM mode all of a sudden were broken in native image mode. Not all the hints are in the documentation. And we also didn’t read (or understand) all of the hints that are there. It takes a bit of time to learn, and with a lot of help from some colleagues (many thanks to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;geoand86&quot;&gt;Georgios&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;xstefank&quot;&gt;Martin&lt;&#x2F;a&gt;, and of course &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;dejanb&quot;&gt;Dejan&lt;&#x2F;a&gt; for all the support), we got it running.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-the-benefit&quot;&gt;What is the benefit?&lt;&#x2F;h3&gt;
&lt;p&gt;After all the struggle, what did it give us?&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;quarkus_native-1024x355.png&quot; alt=&quot;Screenshot of resource consumption with Quarkus in native image mode.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Metrics when running as native image Quarkus application&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;So, we are down another 50MiB of RAM. Starting from ~200MiB, down to ~100MiB. That is only half the RAM! Also, this time, we see a reduction in CPU load. While in JVM mode (both Quarkus and Spring Boot), the CPU load was around 2 &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;configuration&#x2F;manage-resources-containers&#x2F;&quot;&gt;millicores&lt;&#x2F;a&gt;, now the CPU is always below that, even during application startup. Startup time is down from ~2.5 seconds with Spring Boot, to ~2 seconds with Quarkus in JVM mode, to ~0.4 seconds for Quarkus in native image mode. Definitely an improvement, but still, neither of those times is really bad.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pros-and-cons-of-quarkus&quot;&gt;Pros and cons of Quarkus&lt;&#x2F;h2&gt;
&lt;p&gt;Switching to Quarkus was no problem at all. We found a few areas in the Hono configuration classes to improve. But in the end, we can keep the original Spring Boot setup and have Quarkus at the same time. Possibly other Microprofile compatible frameworks as well, though we didn’t test that. Everything worked as before, just using less memory. And except for the configuration classes, we could pretty much keep the whole application as it was.&lt;&#x2F;p&gt;
&lt;p&gt;Native image generation was more complex than expected. However, we also saw some real benefits. And while we didn’t do any performance tests on that, here is a thought: if the service has the same performance as before, the fact that it requires only half the of memory, and half the CPU cycles, this allows us to run twice the amount of instances now. Doubling throughput, as we can scale horizontally. I am really looking forward to another scale test since we did do all other kinds of optimizations as well.&lt;&#x2F;p&gt;
&lt;p&gt;You should also consider that the process of building a native image takes quite an amount of time. For this, rather simple service, it takes around 3 minutes on an above-than-average machine, just to build the native image. I did notice some decent improvement when trying out GraalVM 20.0 over 19.3, so I would expect some more improvements on the toolchain over time. Things like hot code replacement while debugging, are things that are not possible with the native image profile though. It is a different workflow, and that may take a bit to adapt. However, you don’t need to commit to either way. You can still have both at the same time. You can work with JVM mode and the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;quarkus.io&#x2F;guides&#x2F;getting-started#development-mode&quot;&gt;Quarkus development mode&lt;&#x2F;a&gt;, and then &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;quarkus.io&#x2F;guides&#x2F;building-native-image&quot;&gt;enable the native image profile&lt;&#x2F;a&gt;, whenever you are ready.&lt;&#x2F;p&gt;
&lt;p&gt;Taking a look at the size of the container images, I noticed that the native image isn’t smaller (~85 MiB), compared to the uber-JAR file (~45 MiB). Then again, our “java base” image alone is around ~435 MiB. And it only adds the JVM on top of the Fedora minimal image. As you don’t need the JVM when you have the native image, you can go directly with the Fedora minimal image, which is around ~165 MiB, and end up with a much smaller overall image.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Switching our existing Java project to Quarkus wasn’t a big deal. It required some changes, yes. But those changes also mean, using some more open APIs, governed by the Eclipse Foundation’s development process, compared to using Spring Boot specific APIs. And while you can still use Spring Boot, changing the configuration to Eclipse MicroProfile opens up other possibilities as well. Not only Quarkus.&lt;&#x2F;p&gt;
&lt;p&gt;Just by taking a quick look at the numbers, comparing the figures from Spring Boot to Quarkus with native image compilation: RAM consumption was down to 50% of the original, CPU usage also was down to at least 50% of original usage, and the container image shrank to ~50% of the original size. And as mentioned in the beginning, we have been using Vert.x for all the core processing. Users that make use of the other Spring components should see more considerable improvement.&lt;&#x2F;p&gt;
&lt;p&gt;Going forward, I hope we can bring the changes we made to the next versions of EnMasse and Eclipse Hono. There is a real benefit here, and it provides you with some awesome additional choices. And in case you don’t like to choose, the EnMasse operator has some reasonable defaults for you 😉&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;also-see&quot;&gt;Also see&lt;&#x2F;h2&gt;
&lt;p&gt;This work is based on the work of others. Many thanks to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;geoand86&quot;&gt;Georgios Andrianakis&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;dejanb&quot;&gt;Dejan Bosanac&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;xstefank&quot;&gt;Martin Stefanko&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;GitHub branch: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;enmasse&#x2F;tree&#x2F;feature&#x2F;quarkus_tenant_1&quot;&gt;ctron&#x2F;enmasse#feature&#x2F;quarkus_tenant_1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Headless installation of Cargo and Rust</title>
        <published>2020-06-17T15:56:22+02:00</published>
        <updated>2020-06-17T15:56:22+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2020/06/17/headless-installation-of-cargo-and-rust/" type="text/html"/>
        <id>dentrassi.de/blog/2020/06/17/headless-installation-of-cargo-and-rust/</id>
        <content type="html">&lt;p&gt;When you want to containerize your Rust application, you might be using a prepared Rust image. But maybe you are a bit more paranoid when it comes to trusting base layers and you want to create your own Rust base image. Or maybe you are just curios and want to try it yourself.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Getting &lt;code&gt;cargo&lt;&#x2F;code&gt;, the Rust build tool, into the image is probably one of the first tasks in your &lt;code&gt;Dockerfile&lt;&#x2F;code&gt;. And it is rather easy on an interactive command line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;sh.rustup.rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -sSf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;automated-container-build&quot;&gt;Automated container build&lt;&#x2F;h2&gt;
&lt;p&gt;However, running inside a container build, you will be greeted by the nice little helper script, asking you for some input:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;Current installation options:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   default host triple: x86_64-unknown-linux-gnu
&lt;&#x2F;span&gt;&lt;span&gt;     default toolchain: stable
&lt;&#x2F;span&gt;&lt;span&gt;               profile: default
&lt;&#x2F;span&gt;&lt;span&gt;  modify PATH variable: yes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;1) Proceed with installation (default)
&lt;&#x2F;span&gt;&lt;span&gt;2) Customize installation
&lt;&#x2F;span&gt;&lt;span&gt;3) Cancel installation
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In a terminal window this is no problem. But in an automated build, you want the script to proceed without the need for manual input.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;&#x2F;h2&gt;
&lt;p&gt;The solution is rather simple. If you take a look at the script, then you will figure out that it actually allows you to pass an argument &lt;code&gt;-y&lt;&#x2F;code&gt;, assuming defaults without the need to input any more details.&lt;&#x2F;p&gt;
&lt;p&gt;And you can still keep the “one liner” for installing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;sh.rustup.rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -sSf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sh -s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; -y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;-s&lt;&#x2F;code&gt; will instruct the shell to process the script from “standard input”, rather than reading the script from a file. In the original command it already did that, but implicitly, because there was no other argument to the shell.&lt;&#x2F;p&gt;
&lt;p&gt;The double dash (&lt;code&gt;--&lt;&#x2F;code&gt;) indicates to the shell that everything which comes after, it not an argument to the shell, but to the shell script instead.&lt;&#x2F;p&gt;
&lt;p&gt;And finally &lt;code&gt;-y&lt;&#x2F;code&gt; is passed to the script, which is the cargo installer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;&#x2F;h2&gt;
&lt;p&gt;I hope this comes in handy to you. It took me a bit to figure it out. Of course, not only in the context of containers, but for any headless&#x2F;silent installation of Rust.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>An update on Eclipse IoT Packages</title>
        <published>2019-12-19T13:17:44+01:00</published>
        <updated>2019-12-19T13:17:44+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2019/12/19/update-on-eclipse-iot-packages/" type="text/html"/>
        <id>dentrassi.de/blog/2019/12/19/update-on-eclipse-iot-packages/</id>
        <content type="html">&lt;p&gt;A lot has happened, since &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2019&#x2F;09&#x2F;10&#x2F;from-building-blocks-to-iot-solutions&#x2F;&quot;&gt;I wrote last about the Eclipse IoT Packages project&lt;&#x2F;a&gt;. We had some great discussions at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipsecon.org&#x2F;europe2019&quot;&gt;EclipseCon Europe&lt;&#x2F;a&gt;, and started to work together online, having new ideas in the progress. Right before the end of the year, I think it is a good time to give an update, and peek a bit into the future.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;homepage&quot;&gt;Homepage&lt;&#x2F;h2&gt;
&lt;p&gt;One of the first things we wanted to get started, was a home for the content we plan on creating. An important piece of the puzzle is to explain to people, what we have in mind. Not only for people that want to try out the various Eclipse IoT projects, but also to possible contributors. And in the end, an important goal of the project is to attract interested parties. For consuming our ideas, or growing them even further.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;logo.svg&quot; alt=&quot;Eclipse IoT Packages logo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So we now have a logo, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;packages&#x2F;&quot;&gt;a homepage&lt;&#x2F;a&gt;, built using templates in a continuous build system. We are in a position to start focusing on the actual content, and on the more tricky tasks and questions ahead. And should you want to create a PR for the homepage, you are more than welcome. There is also already some content, explaining the main goals, the way we want to move forward, and demo of a first package: “Package Zero”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;community&quot;&gt;Community&lt;&#x2F;h2&gt;
&lt;p&gt;While the homepage is a good entry point for people to learn about Eclipse IoT and packages, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;packages&#x2F;&quot;&gt;our GitHub repository&lt;&#x2F;a&gt; is the home for the community. And having some great discussions on GitHub, quickly brought up the need for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;packages&#x2F;issues&#x2F;4&quot;&gt;a community call&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;packages&#x2F;issues&#x2F;6&quot;&gt;a more direct communication channel&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you are interested in the project, come and join &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;packages&#x2F;contribute&#x2F;#join-the-community-call&quot;&gt;our bi-weekly community call&lt;&#x2F;a&gt;. It is a quick, 30 minutes call at 16:00 CET, and open to everyone. Repeating every two weeks, starting 2019-12-02.&lt;&#x2F;p&gt;
&lt;p&gt;The URL to the call is: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.zoom.us&#x2F;j&#x2F;317801130&quot;&gt;https:&#x2F;&#x2F;eclipse.zoom.us&#x2F;j&#x2F;317801130&lt;&#x2F;a&gt;. You can also subscribe to the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;calendar.google.com&#x2F;calendar&#x2F;ical&#x2F;lu98p1vc1ed4itl7n9qno3oogc%40group.calendar.google.com&#x2F;public&#x2F;basic.ics&quot;&gt;community calendar&lt;&#x2F;a&gt; to get a reminder.&lt;&#x2F;p&gt;
&lt;p&gt;In between calls, we have a chat room &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;eclipse&#x2F;packages&quot;&gt;eclipse&#x2F;packages&lt;&#x2F;a&gt; on Gitter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;eclipse-iot-helm-chart-repository&quot;&gt;Eclipse IoT Helm Chart Repository&lt;&#x2F;h2&gt;
&lt;p&gt;One of the earliest discussion we had, was around the question of how and were we want to host the Helm charts. We would prefer not to author them ourselves, but let the projects contribute them. After all, the IoT packages project has the goal of enabling you to install a whole set of Eclipse IoT projects, with only a few commands. So the focus is on the integration, and the expert knowledge required for creating project Helm chart, is in the actual projects.&lt;&#x2F;p&gt;
&lt;p&gt;On the other side, having a one-stop shop, for getting your Eclipse IoT Helm charts, sounds pretty convenient. So why not host our own Helm chart repository?&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to a company called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kiwigrid&#x2F;helm-charts&quot;&gt;Kiwigrid&lt;&#x2F;a&gt;, who contributed a CI pipeline for validating charts, we could easily extend our existing homepage publishing job, to also publish Helm charts. As a first chart, we published the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;ditto&#x2F;&quot;&gt;Eclipse Ditto&lt;&#x2F;a&gt; chart. And, as expected with Helm, installing it is as easy as:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;h1.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;h1-1024x427.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;h2.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;h2-1024x427.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Of course having a single chart is only the first step. Publishing a single Helm charts isn’t that impressive. But getting an agreement on the community, getting the validation and publishing pipeline set up, attracting new contributors, that is definitely a big step in the right direction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;outlook&quot;&gt;Outlook&lt;&#x2F;h2&gt;
&lt;p&gt;I think that we now have a good foundation, for moving forward. We have a place called “home”, for documentation, code and community. And it looks like we have also been able to attract more people to the project.&lt;&#x2F;p&gt;
&lt;p&gt;While our first package, “Package Zero”, still isn’t complete, it should be pretty close. Creating a first, joint deployment of Hono and Ditto is our immediate focus. And we will continue to work towards a first release of “Package Zero”. Finding a better name is still an item on the list.&lt;&#x2F;p&gt;
&lt;p&gt;Having this foundation in place also means, that the time is right, for you to think about contributing your own Eclipse IoT Package. Contributions are always welcome.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>From building blocks to IoT solutions</title>
        <published>2019-09-10T09:07:37+02:00</published>
        <updated>2019-09-10T09:07:37+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2019/09/10/from-building-blocks-to-iot-solutions/" type="text/html"/>
        <id>dentrassi.de/blog/2019/09/10/from-building-blocks-to-iot-solutions/</id>
        <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;iot.eclipse.org&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;eclipse-IoT-light-300x269.png&quot; alt=&quot;Eclipse IoT&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The Eclipse IoT ecosystem consists of around 40 different projects, ranging from embedded devices, to IoT gateways and up to cloud scale solutions. Many of those projects stand alone as “building blocks”, rather than ready to run solutions. And there is a good reason for that: you can take these building blocks, and incorporate them into your own solution, rather than adopting a complete, pre-built solution.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This approach however comes with a downside. Most people will understand the purpose of building blocks, like “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;paho&#x2F;&quot;&gt;Paho&lt;&#x2F;a&gt;” (an MQTT protocol library) and “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;milo&quot;&gt;Milo&lt;&#x2F;a&gt;” (an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2019&#x2F;07&#x2F;06&#x2F;eclipse-milo-0-3-updated-examples&#x2F;&quot;&gt;OPC UA protocol library&lt;&#x2F;a&gt;) and can easily integrate them into their solution. But on the cloud side of things, building blocks become much more complex to integrate, and harder to understand.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, the “getting started” experience is extremely important. You can simply &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;downloads&#x2F;packages&#x2F;&quot;&gt;download an Eclipse IDE package&lt;&#x2F;a&gt;, tailored towards your context (Java, Modelling, Rust, …), and are up and running within minutes. We don’t want you to design your deployment descriptors first, and then let you figure out how to start up your distributed cluster. Otherwise “getting started” will become a week long task. And a rather frustrating one.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started-quickly&quot;&gt;Getting started. Quickly!&lt;&#x2F;h2&gt;
&lt;div class=&quot;float-start&quot;&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2019&#x2F;02&#x2F;20&#x2F;integrating-eclipse-iot&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_583-300x236.png&quot; alt=&quot;Eclipse IoT building blocks&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;During the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;lists&#x2F;iot-wg&#x2F;msg01495.html&quot;&gt;Eclipse IoT face-to-face meeting in Berlin&lt;&#x2F;a&gt;, early this year, the Eclipse IoT working group discussed various ideas. How can we enable interested parties to get started, with as little effort as possible. And still, give you full control. Not only with a single component, which doesn’t provide much benefit on its own. But get you started with a complete solution, which solves actual IoT related problems.&lt;&#x2F;p&gt;
&lt;p&gt;The goal was simple. Take an IoT use case, which is easy to understand by IoT related people. And provide some form of deployment, which gets people up and running in less than 15 minutes. With as little as possible external requirements. At best, run everything on your local laptop. Still, create everything in a close-to-production style of deployment. Not something completely stripped down. But use a way of deployment, that you could actually use as a basis for extending it further.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kubernetes-helm&quot;&gt;Kubernetes &amp;amp; Helm&lt;&#x2F;h2&gt;
&lt;p&gt;We quickly agreed on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;&quot;&gt;Kubernetes&lt;&#x2F;a&gt; as the runtime platform, and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;helm.sh&#x2F;&quot;&gt;Helm&lt;&#x2F;a&gt; as the way to perform the actual deployments. With Kubernetes being available even on a local machine (using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;learning-environment&#x2F;minikube&#x2F;&quot;&gt;minikube&lt;&#x2F;a&gt; on Linux, Windows and Mac) and being available, at the same time, in several enterprise ready environments, it seemed like an ideal choice. Helm charts seemed like an ideal choice as well. Helm designed directly for Kubernetes. And it also allows you to generate YAML files, from the Helm charts. So that the deployment only requires you to deploy a bunch of YAML files. Maintaining the charts, is still way easier than directly authoring YAML files.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;challenges-moving-towards-an-iot-solution&quot;&gt;Challenges, moving towards an IoT solution&lt;&#x2F;h2&gt;
&lt;div class=&quot;float-end&quot;&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;logo_stack_proper_200px.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;A much tougher question was: how do we structure this, from a project perspective. During the meeting, it soon turned out, there would be two good initial candidates for “stacks” or “groups of projects”, which we would like to create.&lt;&#x2F;p&gt;
&lt;p&gt;It also turned out that we would need some “glue” components for a package like that. Even though it may only be a script here, or a “readme” file there. Some artifacts just don’t fit into either of those projects. And what about “in development” versions of the projects? How can you point people towards a stable deployment, only using a stable (released) group of projects, when scripts and readme’s are spread all over the place, in different branches.&lt;&#x2F;p&gt;
&lt;p&gt;A combination&lt;mark class=&quot;annotation-text annotation-text-yoast&quot; id=&quot;annotation-text-789d9cb0-a34d-4a6b-962f-7411b212884b&quot;&gt;&lt;&#x2F;mark&gt;&lt;mark class=&quot;annotation-text annotation-text-yoast&quot; id=&quot;annotation-text-789d9cb0-a34d-4a6b-962f-7411b212884b&quot;&gt;&lt;&#x2F;mark&gt;&lt;mark class=&quot;annotation-text annotation-text-yoast&quot; id=&quot;annotation-text-0d66c531-3ad2-4ebf-a49c-2a3b362cb3b9&quot;&gt;&lt;&#x2F;mark&gt; of “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&#x2F;&quot;&gt;Hono&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;ditto&#x2F;&quot;&gt;Ditto&lt;&#x2F;a&gt; &amp;amp; &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hawkbit&#x2F;&quot;&gt;Hawkbit&lt;&#x2F;a&gt;” seemed like an ideal IoT solution to start with. People from various companies already work across those three projects, using them in combination for their own purpose. So, why not build on that?&lt;&#x2F;p&gt;
&lt;p&gt;But in addition to all those technical challenges, the governance of this effort is an aspect to consider. We did not want to exclude other Eclipse IoT projects, simply by starting out with “Hono, Ditto, and Hawkbit”. We only wanted to create “an” Eclipse IoT solution, and not “the” Eclipse IoT solution. The whole Eclipse IoT ecosystem is much too diverse, to force our initial idea on everyone else. So what if someone comes up with an additional group of Eclipse IoT projects? Or what if someone would like to add a new project to an existing deployment?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-home-for-everyone&quot;&gt;A home for everyone&lt;&#x2F;h2&gt;
&lt;p&gt;Luckily, creating an Eclipse Foundation project solves all those issues. And the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;projects.eclipse.org&#x2F;projects&#x2F;technology.packaging&quot;&gt;Eclipse Packaging project&lt;&#x2F;a&gt; already proves that this approach works. We played with the idea, to create some kind of a “meta” project. Not a real project in the sense of having a huge code base. But more a project, which makes use of the Eclipse Foundations governance framework. Allowing multiple, even competing companies, to work upstream in a joint effort. And giving all the bits and pieces, which are specific to the integration of the projects, a dedicated home.&lt;&#x2F;p&gt;
&lt;p&gt;A home, not only for the package of “Hono, Ditto and Hawkbit”, but hopefully for other packages as well. If other projects would like to present their IoT solution, by combining multiple Eclipse IoT projects, this is their chance. You can easily become a contributor to this new project, and publish your scripts, documentation and walk-throughs, alongside the other packages.&lt;&#x2F;p&gt;
&lt;p&gt;Of course everything will be open source, licensed under the EPL. So go ahead and fork it, add your custom application on top of it. Or replace an existing component with something, you think is even better than what we put it. We want to enable you to deploy what we provide in a few minutes. Offer you an explanation, what to expect from it, and what this IoT solution can do for you. And encourage you to play around with it. And enable you to extend it, and build something bigger.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;let-s-get-started&quot;&gt;Let’s get started&lt;&#x2F;h2&gt;
&lt;div class=&quot;float-end&quot;&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipsecon.org&#x2F;europe2019&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;https___www.eclipsecon.org_sites_default_files_ECE_only_round_200x200.png.png&quot; alt=&quot;EclipseCon Europe 2019&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We created a new project &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;projects.eclipse.org&#x2F;proposals&#x2F;eclipse-iot-packages&quot;&gt;proposal for the Eclipse IoT packages&lt;&#x2F;a&gt; project. The project is currently in the community review phase. Once we pass the creation review, we will start publishing the content for the first package we have.&lt;&#x2F;p&gt;
&lt;p&gt;The Eclipse IoT working group will also meet at the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipsecon.org&#x2F;europe2019&#x2F;eclipse-community-day&quot;&gt;IoT community day&lt;&#x2F;a&gt; of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipsecon.org&#x2F;europe2019&quot;&gt;EclipseCon Europe 2019&lt;&#x2F;a&gt;. Our goal is to present an initial version of the initial package. Ready to run!&lt;&#x2F;p&gt;
&lt;p&gt;But even more important, we would like to continue our discussions around this effort. All contributions are welcome: code, documentation, additional packages … your ideas, thoughts, and feedback!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Changing the owner of an OpenShift project</title>
        <published>2019-07-29T16:56:50+02:00</published>
        <updated>2019-07-29T16:56:50+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2019/07/29/changing-the-owner-of-an-openshift-project/" type="text/html"/>
        <id>dentrassi.de/blog/2019/07/29/changing-the-owner-of-an-openshift-project/</id>
        <content type="html">&lt;p&gt;Today I wanted to change the owner of an OpenShift project. It actually is rather trivial. However finding out how, wasn’t so easy. Googling didn’t help much, and also the documentation has room for improvement. So I took a few minutes to document how it works.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;&#x2F;h2&gt;
&lt;p&gt;Of course you need to start with a user that already has access to the project. I will assume that you have the &lt;code&gt;oc&lt;&#x2F;code&gt; command installed, and are logged on to your cluster. Also I will assume that your new user is &lt;code&gt;newuser&lt;&#x2F;code&gt; and the project name is &lt;code&gt;test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-the-change&quot;&gt;Making the change&lt;&#x2F;h2&gt;
&lt;p&gt;The access to the project is tied to the cluster role &lt;code&gt;admin&lt;&#x2F;code&gt; for the project. Each project has a “role binding” (not a “cluster role binding”) named &lt;code&gt;admin&lt;&#x2F;code&gt;, which binds the “cluster role” &lt;code&gt;admin&lt;&#x2F;code&gt; to the user, for a specific project.&lt;&#x2F;p&gt;
&lt;p&gt;Assuming that the user &lt;code&gt;admin&lt;&#x2F;code&gt; created the project &lt;code&gt;test&lt;&#x2F;code&gt;, doing &lt;code&gt;oc -n test rolebinding admin -o yaml&lt;&#x2F;code&gt; would give you:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;rbac.authorization.k8s.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;RoleBinding
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;admin
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;roleRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;apiGroup&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;rbac.authorization.k8s.io
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;ClusterRole
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;admin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;subjects&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;apiGroup&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;rbac.authorization.k8s.io
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;User
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;admin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can simply replace (or add) the subject in the &lt;code&gt;subjects&lt;&#x2F;code&gt; list. Moving the project over to &lt;code&gt;newuser&lt;&#x2F;code&gt; would look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;rbac.authorization.k8s.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;RoleBinding
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;admin
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;roleRef&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;apiGroup&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;rbac.authorization.k8s.io
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;ClusterRole
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;admin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;subjects&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;apiGroup&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;rbac.authorization.k8s.io
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;User
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;newuser
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-one-liner&quot;&gt;The one liner&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;oc&lt;&#x2F;code&gt; command line tool can actually do this for you with a single call:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;oc&lt;&#x2F;span&gt;&lt;span&gt; policy add-role-to-user admin newuser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course this only adds the new user, but you can also remove the old user by:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;oc&lt;&#x2F;span&gt;&lt;span&gt; policy remove-role-from-user admin olduser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -n&lt;&#x2F;span&gt;&lt;span&gt; test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;one-more-thing&quot;&gt;One more thing&lt;&#x2F;h2&gt;
&lt;p&gt;When you take a look at the list of projects in the Web UI, you will still see the old user as the “requester”:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;ocp_projects_test.png&quot; alt=&quot;Web UI project list&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This information is read from the annotation &lt;code&gt;openshift.io&#x2F;requester&lt;&#x2F;code&gt; from the “project”:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;project.openshift.io&#x2F;v1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;Project
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;annotations&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;openshift.io&#x2F;description&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;openshift.io&#x2F;display-name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;openshift.io&#x2F;requester&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;admin
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;…
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately OpenShift considers the project information immutable. However the OpenShift “project” is backed by the Kubernetes “namespace”, which has the same annotation and it allows editing. So you can change the “requester” there, and it will be reflected in the project as well.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse Milo 0.3, updated examples</title>
        <published>2019-07-06T22:22:28+02:00</published>
        <updated>2019-07-06T22:22:28+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2019/07/06/eclipse-milo-0-3-updated-examples/" type="text/html"/>
        <id>dentrassi.de/blog/2019/07/06/eclipse-milo-0-3-updated-examples/</id>
        <content type="html">&lt;p&gt;A while back I wrote&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2017&#x2F;09&#x2F;14&#x2F;creating-opc-ua-solutions-eclipse-milo&#x2F;&quot;&gt; a blog post about OPC UA, using Milo&lt;&#x2F;a&gt; and added a bunch of examples, in order to get you started. Time passed by and now Milo 0.3.x is released, with a changed API and so those examples no longer work. Not too much has changed, but the experience of running into compile errors isn’t a good one. Finally I found some time to update the examples.&lt;&#x2F;p&gt;
&lt;p&gt;This blog post will focus on the changes, compared to the old blog post. As the old blog post is still valid, I though it might make sense to keep it, and introduce the changes of Milo here. The examples repository however is updated to show the new APIs on the &lt;code&gt;master&lt;&#x2F;code&gt; branch.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;making-contact&quot;&gt;Making contact&lt;&#x2F;h2&gt;
&lt;p&gt;This is the first situation where you run into the changed API, getting the endpoints. Although the new code is not much different, the old will no longer work:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EndpointDescription&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; endpoints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DiscoveryClient&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getEndpoints&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;opc.tcp:&#x2F;&#x2F;localhost:4840&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When you compare that to the old code, then you will notice that instead of an array, now a list is being used and the class name changed. Not too bad.&lt;&#x2F;p&gt;
&lt;p&gt;Also, the way you create a new client instance with Milo 0.3.x is a bit different now:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OpcUaClientConfigBuilder&lt;&#x2F;span&gt;&lt;span&gt; cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OpcUaClientConfigBuilder&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;cfg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setEndpoint&lt;&#x2F;span&gt;&lt;span&gt;(endpoints[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; please do better, and not only pick the first entry
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OpcUaClient&lt;&#x2F;span&gt;&lt;span&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OpcUaClient&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(cfg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using the static &lt;code&gt;create&lt;&#x2F;code&gt; method instead of the constructor allows for a bit more processing, before the class instance is actually created. Also may this new method throw an exception now. Handling this in an async way isn’t too hard when you are using Java 9+:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CompletableFuture&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OpcUaClient&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;createClient&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; uri) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DiscoveryClient
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getEndpoints&lt;&#x2F;span&gt;&lt;span&gt;(uri) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; look up endpoints from remote
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;thenCompose&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;endpoints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CompletableFuture&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;completedFuture&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OpcUaClient&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;buildConfiguration&lt;&#x2F;span&gt;&lt;span&gt;(endpoints)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; &amp;quot;buildConfiguration&amp;quot; should pick an endpoint
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UaException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CompletableFuture&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;failedFuture&lt;&#x2F;span&gt;&lt;span&gt;(e);
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;that-s-it-that-s-it&quot;&gt;That’s it? That’s it!&lt;&#x2F;h2&gt;
&lt;p&gt;Well, pretty much. However, we have only been looking at the client side of Milo. Implementing your own server requires to use the server side API, and that change much more. But to be fair, the changes improve the situation a lot, and make things much easier to use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;milo-examples-repository&quot;&gt;Milo examples repository&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned, the examples in the repository &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;milo-ece2017&quot;&gt;ctron&#x2F;milo-ece2017&lt;&#x2F;a&gt; have been updated as well. They also contain the changed server side, which changed a lot more than the client side.&lt;&#x2F;p&gt;
&lt;p&gt;When you &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;milo-ece2017&#x2F;compare&#x2F;milo-0.2x...master&quot;&gt;compare the two branches&lt;&#x2F;a&gt; &lt;code&gt;master&lt;&#x2F;code&gt; and &lt;code&gt;milo-0.2.x&lt;&#x2F;code&gt;, you can see the changed I made for updating to the new version.&lt;&#x2F;p&gt;
&lt;p&gt;I hope this helps a bit in getting started with Milo 0.3.x. And please be sure to read the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2017&#x2F;09&#x2F;14&#x2F;creating-opc-ua-solutions-eclipse-milo&#x2F;&quot;&gt;original post&lt;&#x2F;a&gt;, giving a more detailed introduction, as well.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Bringing IoT to Red Hat AMQ Online</title>
        <published>2019-06-24T09:47:59+02:00</published>
        <updated>2019-06-24T09:47:59+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2019/06/24/bringing-iot-to-red-hat-amq-online/" type="text/html"/>
        <id>dentrassi.de/blog/2019/06/24/bringing-iot-to-red-hat-amq-online/</id>
        <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;en-us&#x2F;red_hat_amq&#x2F;7.2&#x2F;html&#x2F;amq_online_1.1_on_openshift_container_platform_release_notes&#x2F;index&quot;&gt;Red Hat AMQ Online 1.1&lt;&#x2F;a&gt; was recently announced, and I am excited about it because it contains a tech preview of our Internet of Things &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;en-us&#x2F;red_hat_amq&#x2F;7.2&#x2F;html&#x2F;amq_online_1.1_on_openshift_container_platform_release_notes&#x2F;tech-preview-online#internet_of_things_iot_functionality&quot;&gt;(IoT) support&lt;&#x2F;a&gt;. AMQ Online is the “messaging as service solution” from Red Hat AMQ. Leveraging the work we did on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&#x2F;&quot;&gt;Eclipse Hono&lt;&#x2F;a&gt; allows us to integrate a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2018&#x2F;07&#x2F;25&#x2F;scaling-iot-eclipse-hono&#x2F;&quot;&gt;scalable&lt;&#x2F;a&gt;, cloud-native IoT personality into this general-purpose messaging layer. And the whole reason why you need an IoT messaging layer is so you can focus on connecting your cloud-side application with the millions of devices that you have out there.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;em&gt;This post was originally published on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.redhat.com&#x2F;blog&#x2F;&quot;&gt;Red Hat Developers&lt;&#x2F;a&gt;, the community to learn, code, and share faster. To read the original post, click &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.redhat.com&#x2F;blog&#x2F;2019&#x2F;05&#x2F;14&#x2F;bringing-iot-to-red-hat-amq-online&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-eclipse-honotm&quot;&gt;What is Eclipse Hono™?&lt;&#x2F;h2&gt;
&lt;p&gt;Eclipse Hono is an IoT abstraction layer. It defines APIs in order to build an IoT stack in the cloud, taking care of things like device credentials, protocols, and scalability. For some of those APIs, it comes with a ready-to-run implementation, such as the MQTT protocol adapter. For others, such as the device registry, it only defines the necessary API. The actual implementation must be provided to the system.&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;hono-overview.svg&quot; alt=&quot;Eclipse Hono IoT architecture overview&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Eclipse Hono overview&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;A key feature of Hono is that it normalizes the different IoT-specific protocols on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.amqp.org&#x2F;specification&#x2F;1.0&#x2F;amqp-org-download&quot;&gt;AMQP 1.0&lt;&#x2F;a&gt;. This protocol is common on the data center side, and it is quite capable of handling the requirements on throughput and back-pressure. However, on the IoT devices side, other protocols might have more benefits for certain use cases. MQTT is a favorite for many people, as is plain HTTP due to its simplicity. LoRaWAN, CoAP, Sigfox, etc. all have their pros and cons. If you want to play in the world of IoT, you simply have to support them all. Even when it comes to custom protocols, Hono provides a software stack to easily implement your custom protocol.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;amq-online&quot;&gt;AMQ Online&lt;&#x2F;h2&gt;
&lt;p&gt;Hono requires an AMQP 1.0 messaging backend. It requires a broker and a component called “router” (which doesn’t own messages but only forwards them to the correct receiver). Of course, it expects the AMQP layer to be as scalable as Hono itself. AMQ Online is a “self-service,” messaging solution for the cloud. So it makes sense to allow Hono to run on top of it. We had this deployment model for a while in Hono, allowing the use of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;enmasse.io&#x2F;&quot;&gt;EnMasse&lt;&#x2F;a&gt; (the upstream project of AMQ Online).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;self-service-iot&quot;&gt;Self-service IoT&lt;&#x2F;h2&gt;
&lt;p&gt;In a world of Kubernetes and operators, the thing that you are actually looking for is more like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;IoTProject
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;apiVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;iot.enmasse.io&#x2F;v1alpha1
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;iot
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;myapp
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;downstreamStrategy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;managedStrategy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addressSpace&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;iot
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plan&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;standard-unlimited
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addresses&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;telemetry&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plan&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;standard-small-anycast
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plan&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;standard-small-queue
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plan&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;standard-small-anycast
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You simply define your IoT project, by creating a new custom resource using &lt;code&gt;kubectl create -f&lt;&#x2F;code&gt; and you are done. If you have the IoT operator of AMQ Online 1.1 deployed, then it will create the necessary address space for you, and set up the required addresses.&lt;&#x2F;p&gt;
&lt;p&gt;The IoT project will also automatically act as a Hono tenant. In this example, the Hono tenant would be &lt;code&gt;myapp.iot&lt;&#x2F;code&gt;, and so the full authentication ID of e.g. &lt;code&gt;sensor1&lt;&#x2F;code&gt; would be &lt;code&gt;sensor1@myapp.iot&lt;&#x2F;code&gt;. The IoT project also holds all the optional tenant configuration under the section &lt;code&gt;.spec.configuration&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;hat&quot;&gt;Hono admin tool,&lt;&#x2F;a&gt; you can quickly register a new device with your installation (the documentation will also tell you how to achieve the same with &lt;code&gt;curl&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# register the new context once with &amp;#39;hat&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;hat&lt;&#x2F;span&gt;&lt;span&gt; context create myapp1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --default-tenant&lt;&#x2F;span&gt;&lt;span&gt; myapp.iot https:&#x2F;&#x2F;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;oc -n&lt;&#x2F;span&gt;&lt;span&gt; messaging-infra get routes device-registry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;{{ .spec.host }}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# register a new device and set credentials
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;hat&lt;&#x2F;span&gt;&lt;span&gt; reg create 4711
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;hat&lt;&#x2F;span&gt;&lt;span&gt; cred set-password sensor1 sha-512 hono-secret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --device&lt;&#x2F;span&gt;&lt;span&gt; 4711
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With that, you can simply use Hono as always. First, start the consumer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# from the hono&#x2F;cli directory
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;MESSAGING_HOST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;oc -n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; myapp get addressspace iot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt; jsonpath={.status.endpointStatuses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;(@.name==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;messaging&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;.externalHost})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;MESSAGING_PORT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;443
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mvn&lt;&#x2F;span&gt;&lt;span&gt; spring-boot:run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -Drun&lt;&#x2F;span&gt;&lt;span&gt;.arguments=--hono.client.host=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;MESSAGING_HOST&lt;&#x2F;span&gt;&lt;span&gt;,--hono.client.port=$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;MESSAGING_PORT&lt;&#x2F;span&gt;&lt;span&gt;,--hono.client.username=consumer,--hono.client.password=foobar,--tenant.id=myapp.iot,--hono.client.trustStorePath=target&#x2F;config&#x2F;hono-demo-certs-jar&#x2F;tls.crt,--message.type=telemetry
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then publish some data to the telemetry channel:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;curl -X&lt;&#x2F;span&gt;&lt;span&gt; POST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -i -u&lt;&#x2F;span&gt;&lt;span&gt; sensor1@myapp.iot:hono-secret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -H &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;Content-Type: application&#x2F;json&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --data-binary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;{&amp;quot;temp&amp;quot;: 5}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;oc -n&lt;&#x2F;span&gt;&lt;span&gt; enmasse-infra get routes iot-http-adapter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;#39;{{ .spec.host }}&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)&#x2F;telemetry
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more detailed instructions, see: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;access.redhat.com&#x2F;documentation&#x2F;en-us&#x2F;red_hat_amq&#x2F;7.2&#x2F;html&#x2F;evaluating_amq_online_on_openshift_container_platform&#x2F;assembly-iot-messaging&quot;&gt;Getting Started with Internet of Things (IoT) on AMQ Online&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;iot-integration&quot;&gt;IoT integration&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned before, you don’t do IoT just for the fun of it (well, maybe at home, with a Raspberry Pi, Node.js, OpenHAB, and mosquitto). But when you want to connect millions of devices with your cloud backend, you want to start working with that data. Using Hono gives you a pretty simple start. Everything you need is an AMQP 1.0 connectivity. Assuming you use Apache Camel, pushing telemetry data towards a Kafka cluster is as easy as (also see &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;hono-example-bridge&quot;&gt;ctron&#x2F;hono-example-bridge&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;store&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;amqp:telemetry&#x2F;myapp.iot&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setHeader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;setKafkaKey&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;headerName&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;kafka.KEY&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${header[device_id]}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setHeader&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;kafka:telemetry?brokers={{kafka.brokers}}&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Bringing together solutions like &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;en&#x2F;technologies&#x2F;jboss-middleware&#x2F;fuse&quot;&gt;Red Hat Fuse&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;en&#x2F;technologies&#x2F;jboss-middleware&#x2F;amq&quot;&gt;AMQ&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;en&#x2F;technologies&#x2F;jboss-middleware&#x2F;decision-manager&quot;&gt;Decision Manager&lt;&#x2F;a&gt; makes it a lot easier to give your custom logic in the data center (your value add‑on) access to the Internet of Things.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What’s next?&lt;&#x2F;h2&gt;
&lt;p&gt;AMQ Online 1.1 is the first version to feature IoT as a tech preview. So, give it a try, play with it, but also keep in mind that it is a tech preview.&lt;&#x2F;p&gt;
&lt;p&gt;In the upstream project EnMasse, we are currently working on creating a scalable, general purpose device registry based on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;infinispan.org&#x2F;&quot;&gt;Infinispan&lt;&#x2F;a&gt;. Hono itself doesn’t bring a device registry, it only defines the APIs it requires. However, we think it makes sense to provide a scalable device registry, out of the box, to get you started. In AMQ Online, that would then be supported by using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;en&#x2F;technologies&#x2F;jboss-middleware&#x2F;data-grid&quot;&gt;Red Hat Data Grid&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the next months, we hope to also see the release of Eclipse Hono 1.0 and graduate the project from the incubation phase. This is a big step for a project at Eclipse but also the right thing to do. Eclipse Hono is ready, and graduating the project means that we will pay even closer attention to APIs and stability. Still, new features like LoRaWAN, maybe Sigfox, and a proper HTTP API definition for the device registry, are already under development.&lt;&#x2F;p&gt;
&lt;p&gt;So, there are lots of new features and enhancements that we hope to bring into AMQ Online 1.2.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Rust on the ESP and how to get started</title>
        <published>2019-06-16T16:18:55+02:00</published>
        <updated>2019-06-16T16:18:55+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2019/06/16/rust-on-the-esp-and-how-to-get-started/" type="text/html"/>
        <id>dentrassi.de/blog/2019/06/16/rust-on-the-esp-and-how-to-get-started/</id>
        <content type="html">&lt;p&gt;I have been working with ESPs, for playing around in the space of IoT, for a while now. Mostly using the ESP8266 and Espressif, through platform.io. In recent times, I have also started to really like Rust as programming language. And I really believe that all Rust has to offer, would be great match for embedded development. So when I had a bit of time, I wanted to give it a try. And here is what came out of it &lt;em&gt;…&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Up until now I only used the ESP and Rust on a very high level. So I was hoping to get some kind of an “out-of-the-box” solution. Well, we are not there yet. But my only intention was to play around a bit with the technology. And so I started to search what others had done in this area already.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;llvm-rust&quot;&gt;LLVM &amp;amp; Rust&lt;&#x2F;h2&gt;
&lt;p&gt;Rust, or more precisely, the default rust compiler is based on LLVM. It compiles rust code by parsing it and handing it over to the LLVM toolchain at some point. So as soon as LLVM can create code for the Xtensa target (the CPU of the ESP), that first step of being able to compile code for the ESP should be achieved.&lt;&#x2F;p&gt;
&lt;p&gt;The good news: work for this is already underway. There is a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;espressif&#x2F;llvm-xtensa&quot;&gt;fork of LLVM for Xtensa&lt;&#x2F;a&gt;, which seems to be provided by the people behind the Espressif framework. Having support for LLVM will enable all other kinds of integrations, Rust for the ESP is just one of them. The bad news: this is more or less “compile your own”. And have you ever compiled a compiler, which is needed to compile a compiler? ;-)&lt;&#x2F;p&gt;
&lt;p&gt;So the next step, after compiling LLVM (on a x64 target, with the ability to cross compile to Xtensa) is to compile Rust itself. Actually, that wasn’t too bad. It takes a while, but the process of compiling Rust with a provided version of LLVM is more or less straight forward. Assuming that you use a version of Rust, patched for providing the Xtensa target architectures, which is already available on GitHub at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MabezDev&#x2F;rust-xtensa&quot;&gt;MabezDev&#x2F;rust-xtensa&lt;&#x2F;a&gt; (be sure to use the &lt;code&gt;xtensa-target&lt;&#x2F;code&gt; branch).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cross-compiling-with-rust&quot;&gt;Cross compiling with Rust&lt;&#x2F;h2&gt;
&lt;p&gt;After this, you are basically set up for getting started. However, it still is a bit complicated, as you do need to cross compile with Rust for the ESP. You are running Rust on your host machine (x64) and want to build for the Xtensa target architecture. This requires also to compile the core Rust crate for that architecture. This is where &lt;code&gt;xargo&lt;&#x2F;code&gt;comes into play.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;japaric&#x2F;xargo&quot;&gt;Xargo&lt;&#x2F;a&gt; helps you build your project (like &lt;code&gt;cargo&lt;&#x2F;code&gt;), but it also supports building the “sysroot”, which is required by each rust application. I know that on the Xargo GitHub repository you will find a note, which says that it is in “maintenance mode”. But for one, the tool just works and does what it should do. And second, I also do understand the original author of the tool, setting the right expectations. It also seems that there is work underway in Rust to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;1133&quot;&gt;make this tool obsolete&lt;&#x2F;a&gt;. Maybe it already is done and I just need to check ;-)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;esp-hardware-abstraction-layer&quot;&gt;ESP Hardware Abstraction Layer&lt;&#x2F;h2&gt;
&lt;p&gt;So we have a compiler now, and the core foundation to run Rust on the Xtensa architecture. But of course, we do want to interact with the ESP functionalities. At least, let an LED blink or print something out on the serial console.&lt;&#x2F;p&gt;
&lt;p&gt;And this is where it gets complicated. When running on an embedded system, you don’t have a “kernel”, you don’t have “drivers” and you don’t have something like a “libc”, which does all the work for you, and that e.g. Rust can be based upon. The right thing to do would be to start writing everything in Rust, from scratch. Having a full “std” crate on Rust, would basically allow you to re-use all the “rust native” crates that are available on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt;. At least as long as they fit into your embedded system of course :-)&lt;&#x2F;p&gt;
&lt;p&gt;But we don’t (yet) have a “standard crate”, we only have the bare minimum “core” crate to work with. Now, there is a simple way around this. And yes, it feels a little bit like cheating.&lt;&#x2F;p&gt;
&lt;p&gt;The Espressif &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;espressif&#x2F;esp-idf&quot;&gt;IoT Development Framework&lt;&#x2F;a&gt; framework (IDF) already provides all kinds of drivers and components to work with the hardware of the ESP. So, why not re-use that? A good reason to not re-use that is, that it is not written in Rust, and has all the problems of classic C code. But on the other side, it is available right now :-)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wiring-up-esp-idf&quot;&gt;Wiring up ESP-IDF&lt;&#x2F;h2&gt;
&lt;p&gt;In a nutshell, the IDF is a framework, which provides all the required bits and pieces to create applications on top of the ESP. It is written in C, and provides you with a modular build system (welcome back &lt;code&gt;make menuconfig&lt;&#x2F;code&gt;) that allows you to select which components and features you would like to compile in.&lt;&#x2F;p&gt;
&lt;p&gt;The basic idea is to build a normal “ESP-IDF” based project. And then you use Rust to build your application, pulling in everything except the C based “main” method from that project. That way, when your application starts up, you have the ESP HAL from the IDF, but your Rust application code.&lt;&#x2F;p&gt;
&lt;p&gt;The final step is to allow your Rust code to call into the C code of the ESP-IDF. You can use a tool called &lt;code&gt;bindgen&lt;&#x2F;code&gt; from Rust, in order to achieve this. Bindgen creates Rust bindings for C libraries, and this is exactly what we are looking for.&lt;&#x2F;p&gt;
&lt;p&gt;There is a basic example at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lexxvir&#x2F;esp32-hello&quot;&gt;lexxvir&#x2F;esp32-hello&lt;&#x2F;a&gt;, but it took me a while to tweak it and get it working. It also only uses the UART, which also pulls in the GPIO, but it shows the basic concept of the idea.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-rust-for-esp-out-of-the-box&quot;&gt;Making Rust for ESP “out-of-the-box”&lt;&#x2F;h2&gt;
&lt;p&gt;Figuring out all of this, and getting it actually working, took me the better part of a Saturday. It was fun digging a little bit into all of this, but it would be great if there was this “out-of-the-box” solution that I was looking for. Honestly I forgot probably half of the pitfalls when writing up this blog post. And didn’t tell you about the hours and hours of compiling and re-compiling.&lt;&#x2F;p&gt;
&lt;p&gt;So I did write it all up in a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;rust-esp-container&#x2F;blob&#x2F;master&#x2F;Dockerfile&quot;&gt;Dockerfile&lt;&#x2F;a&gt; (full repository: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;rust-esp-container&quot;&gt;ctron&#x2F;rust-esp-container&lt;&#x2F;a&gt;). And crated an automated build for that on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;quay.io&#x2F;repository&#x2F;ctron&#x2F;rust-esp&quot;&gt;quay.io&lt;&#x2F;a&gt;. Why not Docker Hub? Because it couldn’t handle the build. The builds ran much longer, and always timed out before they were even close to complete. And this container isn’t a small one. Even after cleaning up intermediate layers, it still is around 5GiB.&lt;&#x2F;p&gt;
&lt;p&gt;Now it is possible to just use &lt;code&gt;docker&lt;&#x2F;code&gt;, mapping a local folder into that container, and let the pre-compiled Xtensa toolchain do the build. There is a short introduction in the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;rust-esp-container&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;README&lt;&#x2F;a&gt;, which should help you get started pretty quickly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;caveats-what-s-next&quot;&gt;Caveats &amp;amp; What’s next?&lt;&#x2F;h2&gt;
&lt;p&gt;Getting started with Rust on the ESP, based on the ESP-IDF HAL is much easier now. However, most of your code will therefore still be C based. Of course that may be OK for you, but using the IDF specific APIs also prevents you from using Rust crates, which expect the Rust standard library. Network access and thus HTTP calls (which was my goal in the beginning) is just one of this. So instead of just using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;reqwest&quot;&gt;reqwest&lt;&#x2F;a&gt;, you will need to map in the HTTP layer from IDF, &lt;code&gt;bindgen&lt;&#x2F;code&gt; this to rust in order to do HTTP.&lt;&#x2F;p&gt;
&lt;p&gt;So my hope is that there all the temporary changes and forks, used in this setup, get merged into their upstream sources. LLVM and Rust directly supporting Xtensa. So, that the next step, can be to build some standard library support for Rust. And so you would be able to use most of Rust’s ecosystem on an ESP, without too much trouble.&lt;&#x2F;p&gt;
&lt;p&gt;But for me, I am happy to share my experience, and try to provide this container image in order to make things easier for people that want to get started quickly. I will be trying to improve this, after all, my goal of sending HTTP requests from Rust it not yet reached. After all, this helps me to not re-start from scratch, every time I find a few minutes to play around with this. And maybe it helps you as well.&lt;&#x2F;p&gt;
&lt;p&gt;If you find any bugs or have improvements, contributions are always welcome.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thanks-to&quot;&gt;Thanks to …&lt;&#x2F;h2&gt;
&lt;p&gt;I would have never been able to figure all of this out, without the help of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;quickhack.net&#x2F;nom&#x2F;blog&#x2F;2019-05-14-build-rust-environment-for-esp32.html&quot;&gt;https:&#x2F;&#x2F;quickhack.net&#x2F;nom&#x2F;blog&#x2F;2019-05-14-build-rust-environment-for-esp32.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;esp32.com&#x2F;viewtopic.php?t=9226&quot;&gt;https:&#x2F;&#x2F;esp32.com&#x2F;viewtopic.php?t=9226&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;MabezDev&#x2F;rust-xtensa&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;MabezDev&#x2F;rust-xtensa&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lexxvir&#x2F;esp32-hello&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;lexxvir&#x2F;esp32-hello&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Integrating Eclipse IoT</title>
        <published>2019-02-20T13:28:51+01:00</published>
        <updated>2019-02-20T13:28:51+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2019/02/20/integrating-eclipse-iot/" type="text/html"/>
        <id>dentrassi.de/blog/2019/02/20/integrating-eclipse-iot/</id>
        <content type="html">&lt;p&gt;The Eclipse IoT project is a top level project at the Eclipse Foundation. It currently consists of around 40 projects, which focus on different aspects of IoT. This may either be complete solutions, like the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;smarthome&#x2F;&quot;&gt;Eclipse SmartHome&lt;&#x2F;a&gt; project, the PLC runtime and IDE, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;4diac&#x2F;&quot;&gt;Eclipse 4DIAC&lt;&#x2F;a&gt;. Or it may be building block projects, like the MQTT libraries of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;paho&#x2F;&quot;&gt;Eclipse Paho&lt;&#x2F;a&gt;, or the cloud scale IoT messaging infrastructure of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&#x2F;&quot;&gt;Eclipse Hono&lt;&#x2F;a&gt;. I can only encourage you to have a look at the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;iot.eclipse.org&#x2F;projects&#x2F;&quot;&gt;list of projects&lt;&#x2F;a&gt; and do a bit of exploring.&lt;&#x2F;p&gt;
&lt;p&gt;And while it is great to a have a diverse set of projects, covering &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;iot.eclipse.org&#x2F;white-papers&#x2F;iot-architectures&#x2F;&quot;&gt;the three tiers of IoT &lt;&#x2F;a&gt;(Device, Gateway and Cloud), it can be a challenge to explain people, how all of those projects can create something, which is bigger than the individual projects. Because having 40 different IoT projects is great, but imagine the possibilities of having a whole IoT ecosystem of projects. Mixing and matching, building your IoT solution as you see fit.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;iot-means-different-things-to-different-people&quot;&gt;IoT means different things to different people&lt;&#x2F;h3&gt;
&lt;p&gt;Everyone sees something different in the “Internet of Things”. Looking at the introduction on Wikipedia, you may understand why:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Internet of things (IoT) is the network of devices such as vehicles, and home appliances that contain electronics, software, sensors, actuators, and connectivity which allows these things to connect, interact and exchange data&lt;&#x2F;p&gt;
&lt;p&gt;&lt;cite&gt;Wikipedia – “Internet of Things”&lt;&#x2F;cite&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;While it is absolutely valid, it is also rather vague and covers quite a few use cases. This is also being reflected by the different projects of Eclipse IoT. Different projects cover different areas, sometimes they overlap, but sometimes they don’t. Sometimes to follow similar principles, and sometimes they don’t. Most people are caught up in their daily work, contributing to the projects you focus on. But it might be beneficial for everyone, to look a bit over the fence and try to establish a common ground, creating a more integrated Eclipse IoT experience&lt;&#x2F;p&gt;
&lt;h3 id=&quot;let-s-draw-a-map&quot;&gt;Let’s draw a map&lt;&#x2F;h3&gt;
&lt;p&gt;One of the biggest problems, and not only when you are a newcomer to Eclipse IoT, is to understand what is already there, and how it works together. Because, yes it does work together! Finding out “how” can however be challenging. Many projects already have some kind of documentation on how to set up project X with project Y. In most cases such information stored in the project’s Git repository, some blog post or only lives in a forum or mailing list.&lt;&#x2F;p&gt;
&lt;p&gt;So we tried to find a format on how to bring this all together, and also motivate projects to actively contribute to that format. A single person cannot know and understand how all those different projects work together, but the committers on each project know their projects and existing integration points best. And they can also easily point you to the necessary documentation. The result, that resonated quite well with people is a simple, interactive map of the integrated projects:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;eclipse-iot-integration-map&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_583.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Eclipse IoT integration map – &lt;a href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;eclipse-iot-integration-map&#x2F;&quot;&gt;https:&#x2F;&#x2F;ctron.github.io&#x2F;eclipse-iot-integration-map&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;This map represents a condensed view on the current state of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;eclipse-iot-integration-map&#x2F;&quot;&gt;Eclipse IoT integration&lt;&#x2F;a&gt;, to the best of my knowledge. But please fix that latter part, by using the “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;eclipse-iot-integration-map&quot;&gt;Fork me!&lt;&#x2F;a&gt;” button. Adding a new project to that map is only one pull request away. And if you are new to Eclipse IoT, then go ahead and explore the map.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;get-started-quickly&quot;&gt;Get started quickly&lt;&#x2F;h3&gt;
&lt;p&gt;Getting started still is hard. Yes, most projects do have some kind of “quick start” tutorial, which gets you started within a few minutes. However, the more components and projects you add, the more complex and time consuming it gets. Mostly because you need to figure out the integration part yourself:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Getting us started with Eclipse IoT took us four months. On the other hand we don’t want to reinvent the wheel, especially when it comes to a complex piece of infrastructure like an IoT platform. Our target market requires being able to run on-premise, ruling out the majority of IoT platforms offered in the cloud. Using and actively participating in an open source IoT platform and exposing open API’s to our customers for integrating the IoT platform aligns perfectly with our vision.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;cite&gt;Bob Claerhout – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.aloxy.io&#x2F;&quot;&gt;Aloxy&lt;&#x2F;a&gt;&lt;&#x2F;cite&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I was really glad that I joined the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;IoT&#x2F;M2MIWG&#x2F;Weekly_call_minutes&quot;&gt;bi-weekly Eclipse IoT community call&lt;&#x2F;a&gt; that day. Because hearing that feedback, from someone who just started to look into the ecosystem, confirmed two things: Eclipse IoT can be a pretty valuable asset for the IoT solution you are building. But I think we should make it way easier to consume those projects, or at least to get people started quicker. Just a little bit later, a first, small PR from Bob landed in the Eclipse Hono project, proving that the open source approach works just fine.&lt;&#x2F;p&gt;
&lt;p&gt;But not everyone is that persistent and keeps trying that hard. What we need is good starting point, a super-opinionated deployment. Showing the basics of each of the projects, in some kind of integrated deployment. You will never take this out into production, but it should help you to get started, and allow you to explore what is already there. See how it works, let you play around with a running instance of the components you chose to deploy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;we-are-close&quot;&gt;We are close&lt;&#x2F;h3&gt;
&lt;p&gt;And actually we are pretty close to that target. It just needs a bit of polish, and we have a nice starting point. Over the last year or so, we have built a kind of “example”, “demo setup”, whatever you will call it. It all started with a simple deployment of Eclipe Hono, including an IoT gateway simulator and a “Demo Gauge”, which acts as a web frontend, showing the simulated data in a web browser.&lt;&#x2F;p&gt;
&lt;p&gt;Over the time we extended this and now have an example of telemetry data ingestion, using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;kura&#x2F;&quot;&gt;Eclipse Kura&lt;&#x2F;a&gt; as an IoT gateway, connecting to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;hono&#x2F;&quot;&gt;Eclipse Hono&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;enmasse.io&#x2F;&quot;&gt;EnMasse&lt;&#x2F;a&gt; as the IoT messaging layer. Pushing data via &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;camel.apache.org&#x2F;&quot;&gt;Apache Camel&lt;&#x2F;a&gt; to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kafka.apache.org&#x2F;&quot;&gt;Apache Kafka&lt;&#x2F;a&gt;, and then running the “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;hono-example-demo-gauge&quot;&gt;Demo Gauge&lt;&#x2F;a&gt;” application to show the data. Alongside we deploy &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;che&#x2F;&quot;&gt;Eclipse Che&lt;&#x2F;a&gt;, to show how you can start developing on the same cloud infrastructure that the IoT stack is deployed to. All of that is running on Kubernetes based &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.okd.io&#x2F;&quot;&gt;OKD&lt;&#x2F;a&gt;, using a source-to-image, devops style deployment model.&lt;&#x2F;p&gt;
&lt;p&gt;Like the integration map, it is right here on GitHub: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redhat-iot&#x2F;iot-cloud-stack-ece2018&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;redhat-iot&#x2F;iot-cloud-stack-ece2018&lt;&#x2F;a&gt;. A hand full of people already contributes to that effort over time. But, compared to the integration map, this “Tutorial” repository needs a bit of cleanup. And instead of running through it sequentially, it might be better to approach this from a feature based perspective. Deploying a core infrastructure, and then allowing for a few choices, of what you would like to deploy in addition.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gathering-recipes&quot;&gt;Gathering recipes&lt;&#x2F;h3&gt;
&lt;p&gt;So let’s simply start with a fresh repository. Name it “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;eclipse-iot-recipes&quot;&gt;Eclipse IoT recipes&lt;&#x2F;a&gt;“, for the time being, and re-organize the content a little bit: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;eclipse-iot-recipes&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;eclipse-iot-recipes&lt;&#x2F;a&gt; … that wasn’t too difficult :-)&lt;&#x2F;p&gt;
&lt;p&gt;The goal should be, that within a few hours, you have a system up and running. A system which allows you to play at least with the basics. And everyone who would like to add something, can easily do that with a PR. And “adding” might also be to provide an alternative path. Replace the IoT gateway, replace the messaging layer, … whatever you have in mind.&lt;&#x2F;p&gt;
&lt;p&gt;I still think it is helpful to have some manual steps, with a little bit of explanation, rather than a fully automated script. From my experience, you learn a lot more when you do things yourself, rather than watching a script doing things for you.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;play-with-it-and-contribute&quot;&gt;Play with it … and contribute!&lt;&#x2F;h3&gt;
&lt;p&gt;Now it is up to you, to test this, play with it, and contribute. Provide feedback, make suggestions, or fork it and turn it upside down.&lt;&#x2F;p&gt;
&lt;p&gt;Or just explore what Eclipse IoT has to offer.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Securing a Spring Boot application with PKCS #1 PEM files</title>
        <published>2018-09-25T17:17:27+02:00</published>
        <updated>2018-09-25T17:17:27+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2018/09/25/securing-a-spring-boot-application-with-pkcs-1-pem-files/" type="text/html"/>
        <id>dentrassi.de/blog/2018/09/25/securing-a-spring-boot-application-with-pkcs-1-pem-files/</id>
        <content type="html">&lt;p&gt;When you want to secure a Spring Boot application with e.g. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;letsencrypt.org&#x2F;&quot;&gt;Let’s Encrypt&lt;&#x2F;a&gt; or the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.openshift.com&#x2F;container-platform&#x2F;3.10&#x2F;dev_guide&#x2F;secrets.html#service-serving-certificate-secrets&quot;&gt;OpenShift Service CA&lt;&#x2F;a&gt;, then you will pretty soon figure out that working with PKCS #1 PEM files is a nightmare when it comes to Java. When you Google for PKCS #1 and Java, you will find all kinds of tutorials which suggest to use &lt;code&gt;openssl&lt;&#x2F;code&gt; and &lt;code&gt;keytool&lt;&#x2F;code&gt; to create a JKS or PKCS #12 keystore. As Java actually supports pluggable KeyStore implementations, I think there is a better solution for that.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;A while back I did work on a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2018&#x2F;05&#x2F;18&#x2F;pem-encoded-x-509-certificates-java&#x2F;&quot;&gt;PKCS #1 PEM keystore implementation&lt;&#x2F;a&gt;, but at the time, it did only support certificates. Now this problem came back to me, and so it was time for version 2.0.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;&#x2F;h2&gt;
&lt;p&gt;Securing a Spring Boot application is rather simple, e.g have a look at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dzone.com&#x2F;articles&#x2F;spring-boot-secured-by-lets-encrypt&quot;&gt;this tutorial&lt;&#x2F;a&gt;. All you have to do is to provide a system properties:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;server.ssl.enabled=true
&lt;&#x2F;span&gt;&lt;span&gt;server.ssl.key-store=&#x2F;path&#x2F;to&#x2F;server.p12
&lt;&#x2F;span&gt;&lt;span&gt;server.ssl.key-store-type=PKCS12
&lt;&#x2F;span&gt;&lt;span&gt;server.ssl.key-store-password=secret
&lt;&#x2F;span&gt;&lt;span&gt;server.ssl.key-alias=server
&lt;&#x2F;span&gt;&lt;span&gt;server.ssl.key-password=secret
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But most of the tutorial actually is about converting from PKCS #1 PEM files to PKCS #12. Because all that Java can directly process is PKCS #12 or its own JKS format.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pkcs-1-pem-keystore&quot;&gt;PKCS #1 PEM KeyStore&lt;&#x2F;h2&gt;
&lt;p&gt;Now you can drop in the PKCS #1 PEM KeyStore, and directly use those PEM:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;server.ssl.enabled=true
&lt;&#x2F;span&gt;&lt;span&gt;server.ssl.key-store=&#x2F;path&#x2F;to&#x2F;keystore.properties
&lt;&#x2F;span&gt;&lt;span&gt;server.ssl.key-store-type=PEMCFG
&lt;&#x2F;span&gt;&lt;span&gt;server.ssl.key-store-password=dummy
&lt;&#x2F;span&gt;&lt;span&gt;server.ssl.key-alias=keycert
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then you create the file &lt;code&gt;keystore.properties&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;alias=keycert
&lt;&#x2F;span&gt;&lt;span&gt;source.cert=&#x2F;etc&#x2F;…&#x2F;fullchain.pem
&lt;&#x2F;span&gt;&lt;span&gt;source.key=&#x2F;etc&#x2F;…&#x2F;privkey.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you need to make the Java security system aware of the &lt;code&gt;PEMCFG&lt;&#x2F;code&gt; KeyStore provider. Gladly Java doesn’t easily allow to tamper with the security sub-system. So this needs to be an explicit action. In some way, you have to manually register the provider with Java. With Spring Boot the easiest option is in the main application entry-point:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;de.dentrassi.crypto.pem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PemKeyStoreProvider&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;…
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; args) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Security&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addProvider&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PemKeyStoreProvider&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SpringApplication&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Application&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;, args);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;openshift-service-ca&quot;&gt;OpenShift Service CA&lt;&#x2F;h2&gt;
&lt;p&gt;This also works with the OpenShift Service CA. Assuming you mapped the TLS secret to &lt;code&gt;&#x2F;etc&#x2F;tls&lt;&#x2F;code&gt;, you could use the following &lt;code&gt;application.yaml&lt;&#x2F;code&gt; file for Spring Boot:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;8443
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ssl&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key-store-type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;PEMCFG
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key-store&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;classpath:keystore.properties
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key-store-password&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;dummy
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;key-alias&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;keycert
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;security&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;require-ssl&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the following “keystore.properties” file, which you put in your JAR:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;alias=keycert
&lt;&#x2F;span&gt;&lt;span&gt;source.key=&#x2F;etc&#x2F;tls&#x2F;tls.key
&lt;&#x2F;span&gt;&lt;span&gt;source.cert=&#x2F;etc&#x2F;tls&#x2F;tls.crt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Apache Camel Java DSL in combination Eclipse Kura Wires</title>
        <published>2018-09-19T10:30:33+02:00</published>
        <updated>2018-09-19T10:30:33+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2018/09/19/apache-camel-java-dsl-eclipse-kura-wires/" type="text/html"/>
        <id>dentrassi.de/blog/2018/09/19/apache-camel-java-dsl-eclipse-kura-wires/</id>
        <content type="html">&lt;p&gt;In &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2018&#x2F;09&#x2F;14&#x2F;the-power-of-apache-camel-in-eclipse-kura&#x2F;&quot;&gt;part #1&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2018&#x2F;09&#x2F;17&#x2F;sunny-weather-apache-camel-kura-wires&#x2F;&quot;&gt;part #2&lt;&#x2F;a&gt;, we saw how easy it is to interface &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;camel.apache.org&quot;&gt;Apache Camel&lt;&#x2F;a&gt; with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;kura&quot;&gt;Kura&lt;&#x2F;a&gt; Wires. Simply by re-using some existing functionality. A few lines of XML, Groovy and you can already build an IoT solution based on the Camel ecosystem and the Eclipse Kura runtime. This part will focus on the Java DSL of Apache Camel.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;It will also take into account, that when you develop and deploy an application, you need some kind of development, test and integration environment. When you build something, no matter how big, based on Camel or Kura Wires, you do want to test it. You want to have unit tests, and the capability to automatically test if your solution works, or still works after you made changes.&lt;&#x2F;p&gt;
&lt;p&gt;Using Kura Wires alone, this can be a problem. But Camel offers you a way to easily run your solution in a local IDE, debugging the whole process. You can have extra support for debugging Camel specific constructs like routes and endpoints. Camel has support for JUnit and e.g. using the “seda” endpoints, you can in create an abstraction layer between Camel and Wires.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-goal&quot;&gt;The goal&lt;&#x2F;h2&gt;
&lt;p&gt;I’ll make this one up (and yes, let’s try to keep it realistic). We have a device, and his device allows to set two parameters for its operation (P1 and P2, both floating points). Now we already have the device connection set up in Kura. Maybe using Modbus, or something else. Kura can talk to it using Kura Wires and that is all that counts.&lt;&#x2F;p&gt;
&lt;p&gt;Now we do get two additional requirements. There is some kind of operating panel next to the device, which should allow viewing and setting those parameters locally. Also, those parameters should be accessible, using IEC 60870-5-104, for an additional device, right next to the Kura gateway.&lt;&#x2F;p&gt;
&lt;p&gt;All of those operations have to be local only, and still work when no connection to the cloud is possible. But of course, we don’t want to lose the ability to monitor the parameters from our cloud system.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;drawing_5.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The operator panel will, of course, be programmed in the newest and hippest Web UI technology possible. It is super easy to fire a few HTTP API calls and encode everything in JSON. While, at the same time, the IEC 60870 layer has no idea about complex data structures. The panel application will send a full update of both parameters, while the 60870 client, due to the nature of this protocol, will only send one parameter at a time.&lt;&#x2F;p&gt;
&lt;p&gt;Doesn’t sound too unrealistic, does it?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-project-structure&quot;&gt;The project structure&lt;&#x2F;h2&gt;
&lt;p&gt;The full project source code is available at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura-examples&#x2F;tree&#x2F;master&#x2F;camel&#x2F;camel-example4&quot;&gt;ctron&#x2F;kura-examples&lt;&#x2F;a&gt;, on GitHub. So this blog post will only focus on some important spots of the whole project.&lt;&#x2F;p&gt;
&lt;p&gt;The project is a standard Maven project, and thus has the typical project structure:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_529.png&quot; alt=&quot;Maven Camel project structure&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are only three important differences to a standard Java Maven project:&lt;&#x2F;p&gt;
&lt;p&gt;The packaging type is &lt;code&gt;bundle&lt;&#x2F;code&gt;, which requires the &lt;code&gt;maven-bundle-plugin&lt;&#x2F;code&gt;. It will create an OSGi bundle JAR, instead of a plain JAR file. This is required as the Kura IoT gateway is based on OSGi.&lt;&#x2F;p&gt;
&lt;p&gt;We will create a “DP” package at the end of the build, using the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;osgi-dp&#x2F;&quot;&gt;OSGi DP Maven Plugin&lt;&#x2F;a&gt;. This package can directly be uploaded to the Kura instance. As this plugin does include direct dependencies, but doesn’t include transient dependencies (on purpose), the project declares a few dependencies as “provided” to prevent them from being re-packaged in the final DP package.&lt;&#x2F;p&gt;
&lt;p&gt;The project uses the &lt;code&gt;maven-antrun-plugin&lt;&#x2F;code&gt; to download and unpack the static Swagger UI resources. Swagger UI is just a convenience for playing around with the REST API later on. Camel will take care of creating the OpenAPI (Swagger) JSON description, even if the SwaggerUI part is removed. So in a production setup, you most likely would not add Swagger UI to the deployment.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;starting-it-up&quot;&gt;Starting it up&lt;&#x2F;h2&gt;
&lt;p&gt;The project has three entry points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CamelApplicationComponent&lt;&#x2F;code&gt; is the OSGi service, which will be managed by the OSGi service component runtime (SCR) when the component is uploaded to Kura.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;TestApplication&lt;&#x2F;code&gt; is a local test application, which is intended to be started from the local IDE for manual testing.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;CamelApplicationComponentTest&lt;&#x2F;code&gt; is the JUnit 4 based test for testing the Camel routes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All three entry points will have a slightly different creation process for the Camel Context. This is simply due to the fact that different environments (like plain Java, OSGI and JUnit) have different requirements.&lt;&#x2F;p&gt;
&lt;p&gt;The routes configuration, which is the same for all entry points, is located in &lt;code&gt;Routes&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s have a quick look at the OSGi startup:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Activate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;(final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BundleContext&lt;&#x2F;span&gt;&lt;span&gt; context) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OsgiDefaultCamelContext&lt;&#x2F;span&gt;&lt;span&gt;(context, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SwaggerUi&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;createRegistry&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addRoutes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Routes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.state));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Dictionary&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; properties &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Hashtable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  properties.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;camel.context.id&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;camel.example.4&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.registration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;registerService&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CamelContext&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.context, properties);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the component is placed inside an OSGi container, the start method will be called and set up the Camel context. This is all pretty straightforward Camel code. As the last step, the Camel context will be registered with the OSGi service layer. Setting the service property &lt;code&gt;camel.context.id&lt;&#x2F;code&gt; in the process. This property is important, as we will, later on, use it to locate the Camel context from the Kura Wires graph by it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-java-dsl-routes&quot;&gt;The Java DSL routes&lt;&#x2F;h2&gt;
&lt;p&gt;The routes configuration is pretty simple Camel stuff. First, the REST DSL will be used to configure the REST API. For example, the “GET” operation to receive the currently active parameters:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;…
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Get the current parameters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;outType&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Parameters&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;direct:getParameters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;…
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This creates a get operation, which is being redirected to the internal “direct:getParameters” endpoint. Which is a way of forwarding that call to another Camel Route. This way Camel routes can be re-used from different callers.&lt;&#x2F;p&gt;
&lt;p&gt;Like for example the &lt;code&gt;direct:updateParameters&lt;&#x2F;code&gt; route, which will be called by all routes which want to update the parameters, no matter if that call originated in the IEC 60870, the REST or the Kura Wires component:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;direct:updateParameters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routeId&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;updateParameters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bean&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.state, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;updateCurrentParameters&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;multicast&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;direct:update.wires&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;direct:update.iec.p1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;direct:update.iec.p2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The route will forward the new parameters to the method &lt;code&gt;updateCurrentParameters&lt;&#x2F;code&gt; of the &lt;code&gt;State&lt;&#x2F;code&gt; class. This class is a plain Java class, holding the state and filling in &lt;code&gt;null&lt;&#x2F;code&gt; parameters with the current state. The result of this method will be forwarded to the other routes, for updating Kura Wires and the two parameters in the IEC 60870 data layer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trying-it-out&quot;&gt;Trying it out&lt;&#x2F;h2&gt;
&lt;p&gt;If you have Java and Maven installed, then you can simply compile the package by running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; camel&#x2F;camel-example4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mvn&lt;&#x2F;span&gt;&lt;span&gt; clean package
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will compile, run the unit tests and create the &lt;code&gt;.dp&lt;&#x2F;code&gt; package in the folder &lt;code&gt;target&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can upload the package directly to your Kura instance. Please note that you do need the dependencies installed in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2018&#x2F;09&#x2F;14&#x2F;the-power-of-apache-camel-in-eclipse-kura&#x2F;&quot;&gt;part #1&lt;&#x2F;a&gt; of the tutorial. In additional you will need to install the following dependencies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;de&#x2F;dentrassi&#x2F;kura&#x2F;addons&#x2F;de.dentrassi.kura.addons.camel.iec60870&#x2F;0.6.1&#x2F;de.dentrassi.kura.addons.camel.iec60870-0.6.1.dp&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;de&#x2F;dentrassi&#x2F;kura&#x2F;addons&#x2F;de.dentrassi.kura.addons.camel.jetty&#x2F;0.6.1&#x2F;de.dentrassi.kura.addons.camel.jetty-0.6.1.dp&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;de&#x2F;dentrassi&#x2F;kura&#x2F;addons&#x2F;de.dentrassi.kura.addons.camel.swagger&#x2F;0.6.1&#x2F;de.dentrassi.kura.addons.camel.swagger-0.6.1.dp&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;de&#x2F;dentrassi&#x2F;kura&#x2F;addons&#x2F;de.dentrassi.kura.addons.camel.http&#x2F;0.6.1&#x2F;de.dentrassi.kura.addons.camel.http-0.6.1.dp&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This will install the support for REST APIs, backed by Jetty. As Kura already contains Jetty, it only makes sense to re-use those existing components.&lt;&#x2F;p&gt;
&lt;p&gt;Once the component is deployed and started, you can navigate your web browser to &lt;code&gt;http:&#x2F;&#x2F;:8090&#x2F;api&lt;&#x2F;code&gt;. This should bring up the Swagger UI, showing the API of the routes:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_530.png&quot; alt=&quot;SwaggerUI of Camel example for Kura&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Next, you can create the following components in the Kura wires graph:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new “Camel consumer”, named &lt;code&gt;consumer2&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Set the ID to &lt;code&gt;camel.example.4&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Set the endpoint URI to &lt;code&gt;seda:wiresOutput1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Create a new “Logger”, named &lt;code&gt;logger2&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Set it to “verbose”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Connect &lt;code&gt;consumer2&lt;&#x2F;code&gt; with &lt;code&gt;logger2&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Click on “Apply” to activate the changes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Open the console of Kura and then open the Swagger UI page with the Web browser. Click on ““Try Out” of the “PUT” operation, enter some new values for &lt;code&gt;setpoint1&lt;&#x2F;code&gt; and&#x2F;or &lt;code&gt;setpoint2&lt;&#x2F;code&gt; and click on the blue “Execute” button.&lt;&#x2F;p&gt;
&lt;p&gt;In the console of Kura you should see the following output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;2018-09-17T13:35:49,589 [Camel (camel-10) thread #27 - seda:&#x2F;&#x2F;wiresOutput1] INFO  o.e.k.i.w.l.Logger - Received WireEnvelope from org.eclipse.kura.wire.camel.CamelConsume-1537188764126-1
&lt;&#x2F;span&gt;&lt;span&gt;2018-09-17T13:35:49,589 […] INFO  o.e.k.i.w.l.Logger - Record List content:
&lt;&#x2F;span&gt;&lt;span&gt;2018-09-17T13:35:49,589 […] INFO  o.e.k.i.w.l.Logger -   Record content:
&lt;&#x2F;span&gt;&lt;span&gt;2018-09-17T13:35:49,589 […] INFO  o.e.k.i.w.l.Logger -     P1 : 3.0
&lt;&#x2F;span&gt;&lt;span&gt;2018-09-17T13:35:49,589 […] INFO  o.e.k.i.w.l.Logger -     P2 : 2.0
&lt;&#x2F;span&gt;&lt;span&gt;2018-09-17T13:35:49,589 […] INFO  o.e.k.i.w.l.Logger -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the result of the “Logger” component from Kura Wires. Which did receive the new parameter updates from the Camel Context, as they got triggered through the Web UI. At the same time, the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2017&#x2F;02&#x2F;17&#x2F;iec-60870-5-104-with-apache-camel&#x2F;&quot;&gt;IEC 60870 server&lt;&#x2F;a&gt; would update all clients being subscribed to those data items.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-it-up&quot;&gt;Wrapping it up&lt;&#x2F;h2&gt;
&lt;p&gt;The last part of this tutorial showed that, if the prep-prepared XML router component of Eclipse Kura, is not enough, then you can drop in your own and powerful replacements. Developing with all the bells and whistles of Apache Camel, and still integrate with Kura Wires if necessary.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Sunny weather with Apache Camel and Kura Wires</title>
        <published>2018-09-17T16:48:37+02:00</published>
        <updated>2018-09-17T16:48:37+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2018/09/17/sunny-weather-apache-camel-kura-wires/" type="text/html"/>
        <id>dentrassi.de/blog/2018/09/17/sunny-weather-apache-camel-kura-wires/</id>
        <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2018&#x2F;09&#x2F;14&#x2F;the-power-of-apache-camel-in-eclipse-kura&#x2F;&quot;&gt;Part #1&lt;&#x2F;a&gt; of the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;camel.apache.org&quot;&gt;Apache Camel&lt;&#x2F;a&gt; to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;kura&quot;&gt;Kura&lt;&#x2F;a&gt; Wires integration tutorial did focus on pushing data from Kura Wires to Camel and processing it there. But part #1 already mentioned that it is also possible to pull in data from Camel into Kura Wires.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;drawing_2.png&quot; alt=&quot;Apache Camel consumer node in Kura Wires&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;preparations&quot;&gt;Preparations&lt;&#x2F;h2&gt;
&lt;p&gt;For the next step, you again need to install a Camel package, for interfacing with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;openweathermap.org&#x2F;&quot;&gt;Open Weather Map&lt;&#x2F;a&gt;: &lt;code&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;de&#x2F;dentrassi&#x2F;kura&#x2F;addons&#x2F;de.dentrassi.kura.addons.camel.weather&#x2F;0.6.0&#x2F;de.dentrassi.kura.addons.camel.weather-0.6.0.dp&lt;&#x2F;code&gt; The installation follows the same way as already described in part #1.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to the installation of the package, you will also need to create an account at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;openweathermap.org&#x2F;&quot;&gt;https:&#x2F;&#x2F;openweathermap.org&#x2F;&lt;&#x2F;a&gt; and create an API key. You can select the free tier plan, it is more than enough for our example.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;back-to-wires&quot;&gt;Back to Wires&lt;&#x2F;h2&gt;
&lt;p&gt;Next, create a new Camel context, like before, and give it the ID “camel2”. Add the required component &lt;code&gt;weather&lt;&#x2F;code&gt;, the required language &lt;code&gt;groovy&lt;&#x2F;code&gt; and set the following XML router content (be sure to replace &amp;lt;appid&amp;gt; with your API token):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;camel.apache.org&#x2F;schema&#x2F;spring&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;weather:dummy?appid=&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;YOUR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;API TOKEN&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;lat=48.1351&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;lon=11.5820&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;stream:out&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;unmarshal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Gson&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;unmarshal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${body[&amp;quot;main&amp;quot;][&amp;quot;temp&amp;quot;]}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;convertBodyTo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;java.lang.Double&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;stream:out&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groovy&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;[&amp;quot;TEMP&amp;quot;: request.body-273.15]&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groovy&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;stream:out&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;seda:output1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After applying the changes, you can create two new components in the Wire graph:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new “Camel Consumer”, name it &lt;code&gt;consumer1&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Set the Camel context ID &lt;code&gt;camel2&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Set the endpoint URI &lt;code&gt;seda:output1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Create a new “Logger”, name it &lt;code&gt;logger1&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Set it to “verbose”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Connect &lt;code&gt;consumer1&lt;&#x2F;code&gt; with &lt;code&gt;logger1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Click on “Apply” to activate the changes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-does-it-do&quot;&gt;What does it do?&lt;&#x2F;h2&gt;
&lt;p&gt;What this Camel context does, is to first start polling information from the Open Weather Map API. It requests with a manually provided GPS location, Munich.&lt;&#x2F;p&gt;
&lt;p&gt;It then parses the JSON, so that we can work with the data. Then it extracts the current temperature from the rather complex Open Weather Map structure. Of course, we could also use a different approach and extract additional or other information.&lt;&#x2F;p&gt;
&lt;p&gt;The extracted value could still be a number, represented internally by a string. So we ask Camel to ensure that the body of the message gets converted to a Double. If the body already is a double, then nothing will be done. But, if necessary, Camel will pull in its type converter system and optionally convert e.g. a string to a double by parsing it.&lt;&#x2F;p&gt;
&lt;p&gt;Now the body contains the raw value, as a Java double. But we still have two issues with that. The first one is, that the value is in degree Kelvin. Living in Germany, I would expect degree Celsius ;-) The second issue is, that Kura Wires requires some kind of key to that value, like a Map structure.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, we easily can solve both issues with a short snippet of Groovy: &lt;code&gt;[&amp;quot;TEMP&amp;quot;: request.body-273.15]&lt;&#x2F;code&gt;. This will take the message (request) body, convert it to degree Celsius, and using this as a value for the key &lt;code&gt;TEMP&lt;&#x2F;code&gt; in the newly created map.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;checking-the-result&quot;&gt;Checking the result&lt;&#x2F;h2&gt;
&lt;p&gt;As soon as you apply the changes, you should see some output on the console, which shows the incoming weather data:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;{&amp;quot;coord&amp;quot;:{&amp;quot;lon&amp;quot;:11.58,&amp;quot;lat&amp;quot;:48.14},&amp;quot;weather&amp;quot;:[{&amp;quot;id&amp;quot;:801,&amp;quot;main&amp;quot;:&amp;quot;Clouds&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;few clouds&amp;quot;,&amp;quot;icon&amp;quot;:&amp;quot;02d&amp;quot;}],&amp;quot;base&amp;quot;:&amp;quot;stations&amp;quot;,&amp;quot;main&amp;quot;:{&amp;quot;temp&amp;quot;:297.72,&amp;quot;pressure&amp;quot;:1021,&amp;quot;humidity&amp;quot;:53,&amp;quot;temp_min&amp;quot;:295.15,&amp;quot;temp_max&amp;quot;:299.15},&amp;quot;visibility&amp;quot;:10000,&amp;quot;wind&amp;quot;:{&amp;quot;speed&amp;quot;:1.5},&amp;quot;clouds&amp;quot;:{&amp;quot;all&amp;quot;:20},&amp;quot;dt&amp;quot;:1537190400,&amp;quot;sys&amp;quot;:{&amp;quot;type&amp;quot;:1,&amp;quot;id&amp;quot;:4914,&amp;quot;message&amp;quot;:0.0022,&amp;quot;country&amp;quot;:&amp;quot;DE&amp;quot;,&amp;quot;sunrise&amp;quot;:1537160035,&amp;quot;sunset&amp;quot;:1537204873},&amp;quot;id&amp;quot;:2867714,&amp;quot;name&amp;quot;:&amp;quot;Muenchen&amp;quot;,&amp;quot;cod&amp;quot;:200}
&lt;&#x2F;span&gt;&lt;span&gt;297.72
&lt;&#x2F;span&gt;&lt;span&gt;{TEMP=24.57000000000005}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Every change, which should happen every second, shows three lines. First the raw JSON data, directly from the Open Weather Map API. Then the raw temperature in degree Kelvin, parsed by Camel and converted into a Java type already. Followed by the custom Map structure, created by the Groovy script. The beauty here is again, that you don’t need to fiddle around with custom data structures of the Kura Wires system, but can rely on standard data structures likes plain Java maps.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at the Kura log file, which is by default &lt;code&gt;&#x2F;var&#x2F;log&#x2F;kura.log&lt;&#x2F;code&gt;, you should see some output like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;2018-09-17T13:57:10,117 [Camel (camel-15) thread #31 - seda:&#x2F;&#x2F;output1] INFO  o.e.k.i.w.l.Logger - Received WireEnvelope from org.eclipse.kura.wire.camel.CamelConsume-1537188764126-1
&lt;&#x2F;span&gt;&lt;span&gt;2018-09-17T13:57:10,117 [Camel (camel-15) thread #31 - seda:&#x2F;&#x2F;output1] INFO  o.e.k.i.w.l.Logger - Record List content:
&lt;&#x2F;span&gt;&lt;span&gt;2018-09-17T13:57:10,118 [Camel (camel-15) thread #31 - seda:&#x2F;&#x2F;output1] INFO  o.e.k.i.w.l.Logger -   Record content:
&lt;&#x2F;span&gt;&lt;span&gt;2018-09-17T13:57:10,118 [Camel (camel-15) thread #31 - seda:&#x2F;&#x2F;output1] INFO  o.e.k.i.w.l.Logger -     TEMP : 24.57000000000005
&lt;&#x2F;span&gt;&lt;span&gt;2018-09-17T13:57:10,118 [Camel (camel-15) thread #31 - seda:&#x2F;&#x2F;output1] INFO  o.e.k.i.w.l.Logger -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This shows the same value, as processed by the Camel context but received by Kura Wires.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-it-up&quot;&gt;Wrapping it up&lt;&#x2F;h2&gt;
&lt;p&gt;Now, of course, a simple logger component isn’t really useful. But as you might now, Kura has the ability to connect to a GPS receiver. So you could also take the current position as an input to the Open Weather Map request. And instead of using my static GPS coordinates of Munich, you could query for the nearby weather information. So this might allow you to create some amazing IoT applications.&lt;&#x2F;p&gt;
&lt;p&gt;Stay tuned for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2018&#x2F;09&#x2F;19&#x2F;apache-camel-java-dsl-eclipse-kura-wires&#x2F;&quot;&gt;Part #3&lt;&#x2F;a&gt;, where we will look at a Camel based solution, which can run inside of Kura, as well as outside. Including actual unit tests, ready for continuous delivery.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Leveraging the power of Apache Camel in Eclipse Kura</title>
        <published>2018-09-14T15:52:25+02:00</published>
        <updated>2018-09-14T15:52:25+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2018/09/14/the-power-of-apache-camel-in-eclipse-kura/" type="text/html"/>
        <id>dentrassi.de/blog/2018/09/14/the-power-of-apache-camel-in-eclipse-kura/</id>
        <content type="html">&lt;p&gt;With the upcoming version of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;kura&quot;&gt;Eclipse Kura&lt;&#x2F;a&gt; 4, we will see some nice new features for the embedded &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;camel.apache.org&quot;&gt;Apache Camel&lt;&#x2F;a&gt; runtime. This tutorial walks you through the Camel integration of Kura wires, which allows you to bridge both technologies, and leverage the power of Apache Camel for your solutions on the IoT gateway.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Kura Wires is a graph-oriented programming model of Eclipse Kura. It allows wiring up different components, like a Modbus client to the internal Kura Cloud Service. It is similar to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nodered.org&#x2F;&quot;&gt;Node-RED&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Apache Camel is a message-oriented integration platform with a rule-based routing approach. It has a huge eco-system of components, allowing to integrate numerous messaging endpoints, data formats, and scripting languages.&lt;&#x2F;p&gt;
&lt;p&gt;A graphical approach, like Kura Wires may be interesting for a single instance, which is manually administered. But assume that you want to re-deploy the same solution multiple times. In this case you would want to locally develop and test it. Have proper tooling like validation and debugging. And then you want to automatically package it and run a set of unit and integration tests. And only after that you would want to deploy this. This model is supported when you are using Apache Camel. There is a lot of tooling available, tutorials, training, books on how to work with Apache Camel. And you can make use of the over 100 components which Camel itself provides. In addition to that, you have a whole ecosystem around Apache Camel, which can extend this even more. So it is definitely worth a look.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;&#x2F;h2&gt;
&lt;p&gt;As a prerequisite, you will need an instance of Kura 4. As this is currently not yet released, you can also use a snapshot build of Kura 3.3, which will later become Kura 4.&lt;&#x2F;p&gt;
&lt;p&gt;If you don’t want to set up a dedicated device just for playing around, you can always use the Kura container image and it e.g. with Docker. There is a short introduction on how to get started with this at the DockerHub repository: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;ctron&#x2F;kura&#x2F;&quot;&gt;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;ctron&#x2F;kura&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Starting a new Kura instance is as easy as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -ti&lt;&#x2F;span&gt;&lt;span&gt; ctron&#x2F;kura:develop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 8080:8080
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The following tutorial assumes that you have already set up Kura, and started with a fresh instance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;baby-steps&quot;&gt;Baby Steps&lt;&#x2F;h2&gt;
&lt;p&gt;The first step we take is to create a very simple, empty, Camel Context and hook and directly hook up a Camel endpoint without further configuration.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;new-camel-context&quot;&gt;New Camel Context&lt;&#x2F;h3&gt;
&lt;p&gt;As a first step, we create a new XML Router Camel context:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Open the Kura Web UI&lt;&#x2F;li&gt;
&lt;li&gt;Click on the “+” button next to the services search box&lt;&#x2F;li&gt;
&lt;li&gt;Select the &lt;code&gt;org.eclipse.kura.camel.xml.XmlRouterComponent&lt;&#x2F;code&gt; factory&lt;&#x2F;li&gt;
&lt;li&gt;Enter the name &lt;code&gt;camel1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Press “Submit”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_524.png&quot; alt=&quot;New Camel Context Component&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A new service should appear in the left side navigation area. Sometimes it happens that the service does not show up, but reloading the Web UI will reveal the newly created service.&lt;&#x2F;p&gt;
&lt;p&gt;Now select the service and edit the newly created context. Clear out the “Router XML” and only leave the root element:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;camel.apache.org&#x2F;schema&#x2F;spring&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the field “Required Camel Components” add the &lt;code&gt;stream&lt;&#x2F;code&gt; component. Click on “Apply” to activate the changes. This will configure the Camel context to have no routes, but wait for the &lt;code&gt;stream&lt;&#x2F;code&gt; component to be present in the OSGi runtime. The &lt;code&gt;stream&lt;&#x2F;code&gt; component is a default component, provided by the Eclipse Kura Camel runtime. The Camel context should be ready immediately and will be registered as an OSGi service for others to consume.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_525.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-wires-graph&quot;&gt;The Wires Graph&lt;&#x2F;h3&gt;
&lt;p&gt;The next step is to configure the Kura Wires graph:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Switch to “Wire Graph” in the navigation pane&lt;&#x2F;li&gt;
&lt;li&gt;Add a new “Timer” component named &lt;code&gt;timer1&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Configure the component to fire every second&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Add a new “Camel Producer” named &lt;code&gt;producer1&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Set the Context ID field of the component to &lt;code&gt;camel1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Set the endpoint URI to &lt;code&gt;stream:out&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Connect the nodes &lt;code&gt;timer1&lt;&#x2F;code&gt; and &lt;code&gt;producer1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Click on &lt;code&gt;Apply&lt;&#x2F;code&gt; to activate the changes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_526.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you look at the console of the Kura instance, then you should see something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;org.eclipse.kura.wire.WireEnvelope@bdc823c
&lt;&#x2F;span&gt;&lt;span&gt;org.eclipse.kura.wire.WireEnvelope@5b1f50f4
&lt;&#x2F;span&gt;&lt;span&gt;org.eclipse.kura.wire.WireEnvelope@50851555
&lt;&#x2F;span&gt;&lt;span&gt;org.eclipse.kura.wire.WireEnvelope@34cce95d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; If you are running Kura on an actual device, then the output might be in the file &lt;code&gt;&#x2F;var&#x2F;log&#x2F;kura-console.log&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What is happening is, that the Kura wires timer component will trigger a Wires event every second. That event is passed along to the Camel endpoint &lt;code&gt;stream:out&lt;&#x2F;code&gt; in the Camel context &lt;code&gt;camel1&lt;&#x2F;code&gt;. This isn’t using any Camel routes yet. But this is a basic integration, which allows you to access all available Camel endpoints directly from Kura Wires.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;producer-consumer-processor&quot;&gt;Producer, Consumer, Processor&lt;&#x2F;h2&gt;
&lt;p&gt;In addition to the “Producer” component, it is also possible to use the “Consumer”, or the “Processor”. The Consumer takes events from the Camel context and forwards them to the Kura Wires graph. While the “Processor” takes an event from the Wire Graph, processes it using Camel, and passes along the result to Wires again:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;drawing_1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;br &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;drawing_2.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For Producer and Consumer, this would be a unidirectional message exchange from a Camel point of view. The Processor component would use an “in”&#x2F;”out” message exchange, which is more like “request&#x2F;response”. Of course that only makes sense when you have an endpoint which actually hands back a response, like the HTTP client endpoint.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;drawing_3.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the following sections, we will see that in most cases there will be a more complex route set up that the Camel Wire component would interact with, proxied by a &lt;code&gt;seda&lt;&#x2F;code&gt; Camel component. Still, the “in”, “out” flow of the Camel message exchange would be end-to-end between whatever endpoint you have and the Wires graph.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;drawing_4.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-professional&quot;&gt;Getting professional&lt;&#x2F;h2&gt;
&lt;p&gt;Apache Camel mostly uses the concept of routes. And while accessing an endpoint directly from the Kura Camel component technically works, I wouldn’t recommend it. Mainly due to the fact that you would be missing an abstraction layer, there is no way to inject anything between the Kura Wires component and the final destination at the Camel endpoint. You directly hook up Kura Wires with the endpoint and thus lose all ways that Camel allows you to work with your data.&lt;&#x2F;p&gt;
&lt;p&gt;So as a first step, let’s decouple the Camel endpoint from Kura Wires and provide an API for our Camel Context.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;code&gt;camel1&lt;&#x2F;code&gt; configurations screen, change the “Router XML” to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;camel.apache.org&#x2F;schema&#x2F;spring&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;seda:input1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;stream:out&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then configure the &lt;code&gt;producer1&lt;&#x2F;code&gt; component in the Wire Graph to use the “Endpoint URI” &lt;code&gt;seda:input1&lt;&#x2F;code&gt; instead of directly using &lt;code&gt;stream:out&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If everything is right, then you should still see the same output on the Kura console, but now Wires and Camel are decoupled and properly interfaced using an internal event queue, which allows us to use Camel routes for the following steps.&lt;&#x2F;p&gt;
&lt;p&gt;One benefit of this approach also is that you can now take the XML route definitions outside of Kura and test them in your local IDE. There are various IDE extensions for Eclipse, IntelliJ and Visual Studio, which can help to work with Camel XML route definitions. And of course, there are the JBoss Tools as well ;-). So you can easily test the routes outside of a running Kura instance and feed in emulated Kura Wires events using the &lt;code&gt;seda&lt;&#x2F;code&gt; endpoints.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;to-json&quot;&gt;To JSON&lt;&#x2F;h2&gt;
&lt;p&gt;This first example already shows a common problem, when working with data, and even so for IoT use cases. The output of &lt;code&gt;org.eclipse.kura.wire.WireEnvelope@3e0cef10&lt;&#x2F;code&gt; is definitely not what is of much use. But Camel is great a converting data, so let’s make use of that.&lt;&#x2F;p&gt;
&lt;p&gt;As a first step we need to enable the JSON support for Camel:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Navigate to “Packages”&lt;&#x2F;li&gt;
&lt;li&gt;Click on “Install&#x2F;Upgrade”&lt;&#x2F;li&gt;
&lt;li&gt;Enter the URL: &lt;code&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;de&#x2F;dentrassi&#x2F;kura&#x2F;addons&#x2F;de.dentrassi.kura.addons.camel.gson&#x2F;0.6.0&#x2F;de.dentrassi.kura.addons.camel.gson-0.6.0.dp&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Click on “Submit”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After a while, the package &lt;code&gt;de.dentrassi.kura.addons.gson&lt;&#x2F;code&gt; should appear in the list of installed packages. It may happen that the list doesn’t properly refresh. Clicking on “refresh” or reloading the Web page will help.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of downloading the package directly to the Kura installation you can also download the file to your local machine and then upload it by providing the file in the “Install&#x2F;Upgrade” dialog box.&lt;&#x2F;p&gt;
&lt;p&gt;As a next step, you need to change the “Router XML” of the Camel context &lt;code&gt;camel1&lt;&#x2F;code&gt; to the following configuration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;camel.apache.org&#x2F;schema&#x2F;spring&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;seda:input1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;marshal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Gson&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;marshal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${body}\n&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;stream:out&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the Kura console you will now see that we successfully transformed the internal Kura Wires data format to simple JSON:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:[{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;properties&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;TIMER&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:{}}}],&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;identification&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;org.eclipse.kura.wire.Timer-1536913933101-5&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;scope&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;WIRES&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This change did intercept the internal Kura wires objects and serialized them into proper JSON structures. The following step simply appends the content with a “newline” character in order to have a more readable output on the command line.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;transforming-data&quot;&gt;Transforming data&lt;&#x2F;h2&gt;
&lt;p&gt;Depending on your IoT use case, transforming data can become rather complex. Camel is good at handling this. Transforming, filtering, splitting, aggregating, … for this tutorial I want to stick to a rather simple example, in order to focus in the integration between Kura and Camel, and less on the powers of Camel itself.&lt;&#x2F;p&gt;
&lt;p&gt;As the next step will use the “Groovy” script language to transform data, we will need to install an additional package using the same way as before: &lt;code&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;de&#x2F;dentrassi&#x2F;kura&#x2F;addons&#x2F;de.dentrassi.kura.addons.camel.groovy&#x2F;0.6.0&#x2F;de.dentrassi.kura.addons.camel.groovy-0.6.0.dp&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Then go ahead and modify the “Router XML” to include a transformation step, add the following content before the JSON conversion:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groovy&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;return  [&amp;quot;value&amp;quot;: new Random().nextInt(10), &amp;quot;timer&amp;quot;: request.body.identification ];
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groovy&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The full XML context should now be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;camel.apache.org&#x2F;schema&#x2F;spring&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;seda:input1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groovy&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        return  [&amp;quot;value&amp;quot;: new Random().nextInt(10), &amp;quot;timer&amp;quot;: request.body.identification ];
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groovy&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;marshal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;json &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;library&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Gson&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;marshal&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${body}\n&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;transform&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;stream:out&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After applying the changes, the output on the console should change to something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;value&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;timer&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;org.eclipse.kura.wire.Timer-1536913933101-5&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, we now created a new data structure, based on generated content and based on the original Kura Wires event information.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;off-to-the-eclipse-hono-http-adapter&quot;&gt;Off to the Eclipse Hono HTTP Adapter&lt;&#x2F;h2&gt;
&lt;p&gt;Printing out JSON to the console is nice, but let’s get a bit more professional. Yes, Kura allows you to use its Kura specific MQTT data format. But what we want to send this piece of JSON to some HTTP endpoint, like the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&quot;&gt;Eclipse Hono&lt;&#x2F;a&gt; HTTP protocol adapter?&lt;&#x2F;p&gt;
&lt;p&gt;Camel has a huge variety of endpoints for connecting to various APIs, transport mechanisms and protocols. I doubt you directly would like your IoT gateway to contact Salesforce or Twitter, but using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2017&#x2F;04&#x2F;27&#x2F;opc-ua-with-apache-camel&#x2F;&quot;&gt;OPC UA&lt;&#x2F;a&gt;, MQTT, HTTP, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2017&#x2F;02&#x2F;17&#x2F;iec-60870-5-104-with-apache-camel&#x2F;&quot;&gt;IEC 60870&lt;&#x2F;a&gt;, might be a reasonable use case for IoT.&lt;&#x2F;p&gt;
&lt;p&gt;As a first step, we need to install Camel HTTP endpoint support: &lt;code&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;de&#x2F;dentrassi&#x2F;kura&#x2F;addons&#x2F;de.dentrassi.kura.addons.camel.http&#x2F;0.6.0&#x2F;de.dentrassi.kura.addons.camel.http-0.6.0.dp&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The next step requires an instance of Eclipse Hono, thankfully there is a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&#x2F;sandbox&#x2F;&quot;&gt;Hono sandbox server&lt;&#x2F;a&gt; running at &lt;code&gt;hono.eclipse.org&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the XML Router we need two steps for this. You can add them after the &lt;code&gt;to&lt;&#x2F;code&gt; element, so that we still see the JSON on the command line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setHeader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;headerName&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;constant&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;application&#x2F;json&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;constant&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setHeader&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https4:&#x2F;&#x2F;hono.eclipse.org:28080&#x2F;telemetry?authenticationPreemptive=true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;authUsername=sensor1@DEFAULT_TENANT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;authPassword=hono-secret&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first step sets the content type to &lt;code&gt;application&#x2F;json&lt;&#x2F;code&gt;, which is passed along by Hono to the AMQP network.&lt;&#x2F;p&gt;
&lt;p&gt;Yes, it really is &lt;code&gt;http4:&#x2F;&#x2F;&lt;&#x2F;code&gt;, this is not a typo but the Camel endpoint using Apache HttpClient 4.&lt;&#x2F;p&gt;
&lt;p&gt;You may need to register the device with Hono before actually publishing data to the instance. Also, it is necessary that a consumer is attached, which receives the data. Hono rejects devices publish data if no consumer is attached. Also see: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&#x2F;getting-started&#x2F;#publishing-data&quot;&gt;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&#x2F;getting-started&#x2F;#publishing-data&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you are using a custom deployment of Hono using the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&#x2F;deployment&#x2F;openshift_s2i&#x2F;&quot;&gt;OpenShift S2I&lt;&#x2F;a&gt; approach, then the &lt;code&gt;to&lt;&#x2F;code&gt; URL would look more like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https4:&#x2F;&#x2F;hono-adapter-http-vertx-sec-hono.my.openshift.cluster&#x2F;telemetry?authenticationPreemptive=true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;authUsername=sensor1@DEFAULT_TENANT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;&amp;amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;authPassword=hono-secret&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;wrapping-it-up&quot;&gt;Wrapping it up&lt;&#x2F;h2&gt;
&lt;p&gt;What we have seen so far is that, with a few lines of XML, it is possible to interface with Kura Wires, and start processing data that was originally not supported by Kura, sending to a target that also isn’t supported by Kura. On for that we only used a few lines of XML.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to that, you can test and develop everything in a local, confined space. Without having to worry too much about actually running a Kura instance.&lt;&#x2F;p&gt;
&lt;p&gt;In &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2018&#x2F;09&#x2F;17&#x2F;sunny-weather-apache-camel-kura-wires&#x2F;&quot;&gt;Part #2&lt;&#x2F;a&gt;, we will have a look at ways to get data from Camel back into Kura Wires. And in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2018&#x2F;09&#x2F;19&#x2F;apache-camel-java-dsl-eclipse-kura-wires&#x2F;&quot;&gt;Part #3&lt;&#x2F;a&gt; of this tutorial, we will continue with this approach and develop a Camel based solution, which can run inside of Kura, as well as outside, including actual unit tests.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>We scaled IoT – Eclipse Hono in the lab</title>
        <published>2018-07-25T14:03:45+02:00</published>
        <updated>2018-07-25T14:03:45+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2018/07/25/scaling-iot-eclipse-hono/" type="text/html"/>
        <id>dentrassi.de/blog/2018/07/25/scaling-iot-eclipse-hono/</id>
        <content type="html">&lt;p&gt;Working for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jobs.redhat.com&quot;&gt;Red Hat&lt;&#x2F;a&gt; is awesome. Not only can you work on amazing things, you will also get the tools you need in order to do just that. We wanted to test &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;hono&quot;&gt;Eclipse Hono&lt;&#x2F;a&gt; (yes, again) and see how far we can scale it. And of course which limits and issues we encounter on the way. So we took the current development version of Hono (0.7) from Eclipse IoT, backed by &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;enmasse.io&quot;&gt;EnMasse&lt;&#x2F;a&gt; 0.21 and ran it on an OpenShift 3.9 cluster.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt;  This blog post presents an intermediate result of the whole test, as it is still ongoing. Want to know more? We put in a talk for EclipseCon Europe about this scale test. With a bit of luck we can show you more in person at the end of October in Ludwigsburg.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-lab&quot;&gt;The lab&lt;&#x2F;h2&gt;
&lt;p&gt;From the full test cluster, we received an allocation of 16 nodes with a bit of storage (mostly HDDs), Intel Xeon E5-2620, 2×6 cores (24 threads) each and a mix of 64GB&#x2F;128GB RAM. 12 nodes got assigned for the IoT cluster, running Eclipse Hono, EnMasse and OpenShift. The remaining 4 nodes made up the simulation cluster for generating the IoT workload. For the simulation cluster, we also deployed OpenShift, simply to re-use the same features like scaling, deploying, building as we did for the IoT cluster. Both clusters are a single master setup. For the IoT cluster, we went with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.openshift.com&#x2F;container-platform&#x2F;3.9&#x2F;install_config&#x2F;persistent_storage&#x2F;persistent_storage_glusterfs.html&quot;&gt;GlusterFS&lt;&#x2F;a&gt; as the storage provider as we wanted to have dynamic provisioning for the broker deployments. Everything is connected by a 1GBit Ethernet link. In the IoT cluster, we allocated 3 nodes for infrastructure-only purposes (like the Docker registry and the OpenShift router). Which left 8 general-purpose compute nodes that Hono could make use of.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;eclipse-hono-scaletest2-nodes.svg&quot;&gt;&lt;object class=&quot;img-fluid&quot; data=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;eclipse-hono-scaletest2-nodes.svg&quot;&gt;&lt;&#x2F;object&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-test&quot;&gt;The test&lt;&#x2F;h2&gt;
&lt;p&gt;The focus of this test was put on telemetry data using HTTP as a transport. For this we simulated devices, sending one message per second. In the context of IoT, you have a bigger number of senders (devices), but they do send less payload and less frequent than e.g. a cloud-side enterprise system might do. It is also most likely that an IoT device wouldn’t send once each second over HTTP. But “per second” is easier to process. And, at least in theory, you could trade in 1.000 devices sending once per second with 10.000 devices sending once every 10 seconds.&lt;&#x2F;p&gt;
&lt;p&gt;The simulator cluster consisted of three main components. An InfluxDB to store some metrics. A “consumer” and a “HTTP simulator” deployment. The consumer directly consumed from the EnMasse &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;qpid.apache.org&#x2F;components&#x2F;dispatch-router&#x2F;index.html&quot;&gt;Qpid dispatch router&lt;&#x2F;a&gt; instance via AMQP 1.0, as fast as possible. The HTTP simulator tries to simulate 2.000 devices with a message rate of 1 message per second per device. If the HTTP adapter stalls, it will wait for requests to complete. For the HTTP client, we used the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;vertx.io&#x2F;docs&#x2F;vertx-web-client&#x2F;java&#x2F;&quot;&gt;Vert.x Web Client&lt;&#x2F;a&gt;, as it turned out to be the most performant Java HTTP client (aside from having a nice API). So scaling up by single pod means that we increase the IoT workload by 2.000 devices (meaning 2.000 additional messages per second).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;object alt=&quot;Testing architecture&quot; class=&quot;aligncenter size-full wp-image-3949&quot; data=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;eclipse-hono-scaletest2-architecture.svg&quot;&gt;&lt;&#x2F;object&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;to-the-max&quot;&gt;To the max&lt;&#x2F;h2&gt;
&lt;p&gt;As a first exercise we tried out a few configurations and see how far we could get. In the end, we were able to saturate the ethernet port of our (initially) two ingress nodes and so decided to re-allocate one node from Eclipse Hono to the OpenShift infrastructure. Having 3 ingress nodes and 8 compute nodes. This did reduce the capacity available for Hono and let us run into a limit of processing messages. However, it seemed better to run into a limit with Hono compared to running into a limit of network throughput. Adding an additional ingress node would be a simple task to do. And if we could improve Hono during the test, then we would actually see more throughput as we have some reserves in network throughput with that third node.&lt;&#x2F;p&gt;
&lt;p&gt;The final setup processed something around 80.000 devices with 1 message&#x2F;second. There was a bit of room above that. But our DNS round-robin “load balancer” was not optimal, so we kept that reserve for further testing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; Please note, that this number may be quite different on other machines, in other environments. We simply used this as a baseline for further testing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scaling-up&quot;&gt;Scaling up&lt;&#x2F;h2&gt;
&lt;p&gt;The first automated scenario we ran was a simple scale up test. For that we scaled down all producers and consumer and slowly started to scale up the producers. After adding a new pod it waited until the message flow has settled. If the failure rate is too high, then scale up an additional protocol adapter. Otherwise, scale up another producer and continue.&lt;&#x2F;p&gt;
&lt;p&gt;As an acceptable failure rate, this test used 2% of the messages over the last 3 minutes. And a “failure” is actually a rejection of the message at the current point in time. Devices may re-try at a later time to submit its data. For telemetry data, it may be fine to, drop some information (with QoS 0) every now and then. Or use QoS 1 instead and but be aware of the fact that the current request as rejected and re-try at a later time. In any case, if Hono responds with a failure of 503, then the adapter cannot handle any more requests at the moment, leading to an increased failure rate in the simulator.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initial-results&quot;&gt;Initial results&lt;&#x2F;h2&gt;
&lt;p&gt;So let’s have a quick look at the results of this test:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;eclipse-hono-scaletest2-chart1.svg&quot; alt=&quot;Eclipse Hono scale testing results, number of pods&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This chart shows the scale-up of the simulator pods and the accompanying scale-up of the Eclipse Hono protocol adapter pods. You can also see the number of messages each instance of the protocol adapters processes. It looks like, once we push a few messages into the system, this evens out around 5.000 msgs&#x2F;s. Meaning that each additional Hono HTTP adapter instance can serve 5.000 more messages&#x2F;s, or 5.000 devices sending one message per second. Or 50.000 devices sending one message every 10 seconds. And each time we fire up a new instance the whole system can handle 5.000 msgs&#x2F;s more.&lt;&#x2F;p&gt;
&lt;p&gt;In the second chart we can see the failure rate:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;eclipse-hono-scaletest2-chart2.svg&quot; alt=&quot;Eclipse Hono scale testing results, failure rate&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now the rule for the test was, that the failure rate has to be below 2% in order for the test to continue scaling up. We the test didn’t do well was to wait a bit longer and see if the failure rate declined even more. The failure rate is a moving average over 3 minutes. For that reason, this behavior has been changed in succeeding tests. The scenario now waits a bit longer before recording the final result of the current step.&lt;&#x2F;p&gt;
&lt;p&gt;So what you can see is that the failure rate stays below that “magic” 2% line. But that was the requirement. Except of course for the last entry, where the test was ended as there were no more resources to scale up in order for the scenario to compensate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yes-it-scales&quot;&gt;Yes it scales&lt;&#x2F;h2&gt;
&lt;p&gt;Does Eclipse Hono scale? With charts and numbers, there is always room for interpretation. ;-) But to me, it definitely looks that way. When we increase the IoT workload we can compensate by scaling up protocol adapters in a linear way. Settling around 5.000 msgs&#x2F;s per protocol adapter instance and keeping that figure until the end of the test. Until we ran out of computing resources.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;want-more&quot;&gt;Want more?&lt;&#x2F;h2&gt;
&lt;p&gt;More background? You can have a look at the source code around this test on GitHub at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redhat-iot&#x2F;hono-simulator&quot;&gt;redhat-iot&#x2F;hono-simulator&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redhat-iot&#x2F;hono-scale-test&quot;&gt;redhat-iot&#x2F;hono-scale-test&lt;&#x2F;a&gt;. But please remember that this setup might be very specific to our infrastructure and test.&lt;&#x2F;p&gt;
&lt;p&gt;More details? Come to our talk at EclipseCon Europe if we get accepted and learn more about how we did the test. What improvements we tried out, which issues we ran in and how we set up of our infrastructure. And maybe have a chat with us in person about the gory details of IoT testing.&lt;&#x2F;p&gt;
&lt;p&gt;More throughput? Come and join the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;hono&quot;&gt;Eclipse Hono community&lt;&#x2F;a&gt; and bring in your ideas about performance improvements.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Using PKCS #1 PEM encoded X.509 certificates in Java</title>
        <published>2018-05-18T14:43:19+02:00</published>
        <updated>2018-05-18T14:43:19+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2018/05/18/pem-encoded-x-509-certificates-java/" type="text/html"/>
        <id>dentrassi.de/blog/2018/05/18/pem-encoded-x-509-certificates-java/</id>
        <content type="html">&lt;p&gt;PEM is a well know file format when it comes to certificates. And when using Kubernetes (or OpenShift in my case) it is so easy to re-use the internal CA for some tasks.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Except when it comes to Java. As Java does only use JKS (its Java-only, binary keystore) or PKCS12 for keys and certificates. Google offers you a bunch of tutorials, on how to convert PEM encoded certificates to JKS or PKCS12, so that Java can consume that. But that may be ugly in a lot of situations. Doing that manually once if fine. But adding this to e.g. a pod, becomes a lengthy YAML init container setup, which seems unnecessary to me.&lt;&#x2F;p&gt;
&lt;p&gt;But Java does allow the use of security providers, which may extend the security system. However searching the net, I couldn’t find anything which would provider a PEM based KeyStore. Maybe that was simply due to the fact that the over “convert PEM to …” tutorials spammed the search results.&lt;&#x2F;p&gt;
&lt;p&gt;So I went along and simply created my own provider. For my own use case, which is using the OpenShift service CA certificate. It only took a few minutes to do the actual implementation as reading a PEM file is no mystery.&lt;&#x2F;p&gt;
&lt;p&gt;In case you need to use a PEM encoded X.509 certificate in Java, you now can either re-encode that with &lt;code&gt;openssl &lt;&#x2F;code&gt;on the command line or simply drop on this provider and use &lt;code&gt;PEM&lt;&#x2F;code&gt; as the KeyStore type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;de.dentrassi.crypto&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;pem-keystore&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;2.0.0&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KeyStore&lt;&#x2F;span&gt;&lt;span&gt; keyStore &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KeyStore&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;PEM&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more information see: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;pem-keystore&quot;&gt;ctron&#x2F;pem-keystore&lt;&#x2F;a&gt; at GitHub&lt;&#x2F;p&gt;
&lt;p&gt;If you know some other provider which supports this, please let me know and I would be happy to switch as this is only a scratch to my itch :) On the other hand if this is useful to you, then please let me know. There are still a few things missing, like &lt;del&gt;keys&lt;&#x2F;del&gt; and Java 9+ support. But maybe you want to submit a pull request for that :D&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;&#x2F;strong&gt; I did release an update of this provider. Version 2.0 has support for keys and CA bundles.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse Kura on the Intel UP² with CentOS</title>
        <published>2018-05-16T13:01:27+02:00</published>
        <updated>2018-05-16T13:01:27+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2018/05/16/intel-upc2b2-eclipse-kura/" type="text/html"/>
        <id>dentrassi.de/blog/2018/05/16/intel-upc2b2-eclipse-kura/</id>
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;20180515_171043-292x300.jpg&quot; alt=&quot;Intel UP²&quot; &#x2F;&gt; In the past I was testing modifications to Kura with a Raspberry Pi 3 and Fedora for ARM. But I got a nice little Intel UP² just recently, and so I decided to perform my next Kura tests, with the modifications to the Apache Camel runtime in Kura, on this nice board. Creating a new device profile for Kura using CentOS 7 and the Intel UP² looked like a good idea anyway.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;At the time of writing, the PR for merging the device profile into Kura is still pending (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;kura&#x2F;pull&#x2F;2093&quot;&gt;PR #2093&lt;&#x2F;a&gt;). But my hope is that this will be merged before Kura 4 comes out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;build-your-own-kura-image&quot;&gt;Build your own Kura image&lt;&#x2F;h2&gt;
&lt;p&gt;But it is possible to try this out right now by using the preview branch (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura&#x2F;tree&#x2F;preview&#x2F;intel_up2_1&quot;&gt;preview&#x2F;intel_up2_1&lt;&#x2F;a&gt;) on my forked repository: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura&quot;&gt;ctron&#x2F;kura&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The following commands use the &lt;code&gt;kura-build&lt;&#x2F;code&gt; container. For more information about building Kura with this container see: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura-build&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura-build&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;ctron&#x2F;kura-build&#x2F;&quot;&gt;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;ctron&#x2F;kura-build&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So for the moment you will need to build this image yourself. But if you have Docker installed, then it only needs a few minutes to create your own build of Kura:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;path&#x2F;to&#x2F;output:&#x2F;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -ti&lt;&#x2F;span&gt;&lt;span&gt; ctron&#x2F;kura-build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; ctron&#x2F;kura&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span&gt; preview&#x2F;intel_up2_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; -Pintel-up2-centos-7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Where &lt;code&gt;&#x2F;path&#x2F;to&#x2F;output&lt;&#x2F;code&gt; must be replaced with a local directory where the resulting output should be placed. If you are running Docker with SElinux enabled, then you might need to append &lt;code&gt;:z&lt;&#x2F;code&gt; to the volume:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;path&#x2F;to&#x2F;output:&#x2F;output:z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -ti&lt;&#x2F;span&gt;&lt;span&gt; ctron&#x2F;kura-build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; ctron&#x2F;kura&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span&gt; preview&#x2F;intel_up2_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; -Pintel-up2-centos-7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you might guess, it is also possible to build other branches and repositories of Kura in the same way. That docker image only ensures that all the necessary build dependencies are present when executing the build.&lt;&#x2F;p&gt;
&lt;p&gt;If you are running on Linux and do have all the dependencies installed locally. Then of course there is no need to run through Docker, you can simply call the &lt;code&gt;build-kura&lt;&#x2F;code&gt; script directly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;.&#x2F;build-kura&lt;&#x2F;span&gt;&lt;span&gt; preview&#x2F;intel_up2_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -r&lt;&#x2F;span&gt;&lt;span&gt; ctron&#x2F;kura&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -b&lt;&#x2F;span&gt;&lt;span&gt; preview&#x2F;intel_up2_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt; --&lt;&#x2F;span&gt;&lt;span&gt; -Pintel-up2-centos-7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;setting-up-centos-7&quot;&gt;Setting up CentOS 7&lt;&#x2F;h2&gt;
&lt;p&gt;This is rather simple step, you simply need to download CentOS from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.centos.org&#x2F;download&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.centos.org&#x2F;download&#x2F;&lt;&#x2F;a&gt; (the Minimal ISO is just fine). Copy the ISO to a USB stick (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.centos.org&#x2F;HowTos&#x2F;InstallFromUSBkey&quot;&gt;https:&#x2F;&#x2F;wiki.centos.org&#x2F;HowTos&#x2F;InstallFromUSBkey&lt;&#x2F;a&gt;). On a Linux-ish system this should work like (where &lt;code&gt;&#x2F;dev&#x2F;sdX&lt;&#x2F;code&gt; is the USB stick, all data on this stick will be lost!):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; dd if=CentOS-7-x86_64-Minimal-1804.iso of=&#x2F;dev&#x2F;sdX bs=8M status=progress oflag=direct
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rebooting your UP with the USB stick attached, this should reboot into the CentOS installer from where you can perform a standard installation.&lt;&#x2F;p&gt;
&lt;p&gt;After the installation is finished and you booted into CentOS, you will need to enable &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;fedoraproject.org&#x2F;wiki&#x2F;EPEL&quot;&gt;EPEL&lt;&#x2F;a&gt;, as Kura requires some extra components (like &lt;code&gt;wireless-tools&lt;&#x2F;code&gt; and &lt;code&gt;hostapd&lt;&#x2F;code&gt;). You can do this by executing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; yum install epel-release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You might also want to install a more recent kernel into CentOS. All the core things works with the default CentOS kernel. However some things like support for the GPIO support is still missing in the default CentOS kernel. But the mainline kernel from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.elrepo.org&quot;&gt;ELRepo&lt;&#x2F;a&gt; can easily be installed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rpm --import&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;www.elrepo.org&#x2F;RPM-GPG-KEY-elrepo.org
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rpm -Uvh&lt;&#x2F;span&gt;&lt;span&gt; http:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.0-3.el7.elrepo.noarch.rpm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;yum --enablerepo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;elrepo-kernel install kernel-ml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more information check e.g.: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.howtoforge.com&#x2F;tutorial&#x2F;how-to-upgrade-kernel-in-centos-7-server&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.howtoforge.com&#x2F;tutorial&#x2F;how-to-upgrade-kernel-in-centos-7-server&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-kura-on-the-intel-up2&quot;&gt;Installing Kura on the Intel UP²&lt;&#x2F;h2&gt;
&lt;p&gt;Copy the RPM you just created from the build process over to the UP, e.g. by:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scp&lt;&#x2F;span&gt;&lt;span&gt; kura-build-output&#x2F;2018XXXX-YYYY&#x2F;kura-intel-up2-centos-7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;.rpm user@my-up:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then on the device run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;yum&lt;&#x2F;span&gt;&lt;span&gt; install kura-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;.rpm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will install the Kura package as well as any required dependencies. After the installation has completed, reboot the machine and navigate your web browser to “http:&#x2F;&#x2F;my-up”, using the credentials “admin” &#x2F; “admin”.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-information&quot;&gt;More information&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;kura&quot;&gt;Eclipse Kura&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura-build&quot;&gt;Kura Build container&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.up-board.org&#x2F;upsquared&quot;&gt;Intel UP²&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Add Intel UP2 support with CentOS 7 #2093&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;kura&#x2F;pull&#x2F;2093&quot;&gt;PR #2093&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; – Add Intel UP2 support with CentOS 7&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Apache Camel Utgard – OPC DA</title>
        <published>2018-04-25T10:19:38+02:00</published>
        <updated>2018-04-25T10:19:38+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/camel-utgard/" type="text/html"/>
        <id>dentrassi.de/pages/attic/camel-utgard/</id>
        <content type="html">&lt;p&gt;This page is about an Apache Camel component for providing OPC DA 2.0 (not OPC UA) client support for Apache Camel&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This component can be used with Camel or inside of Eclipse Kura. It is based on the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;openscada.org&#x2F;projects&#x2F;utgard&#x2F;&quot;&gt;OpenSCADA Utgard&lt;&#x2F;a&gt; library and does not require any kind of native code. It runs on pure Java.&lt;&#x2F;p&gt;
&lt;p&gt;More details are at my GitHub repository: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.utgard&quot;&gt;ctron&#x2F;de.dentrassi.camel.utgard&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; This component is for the old OPC DA 2.0 protocol. For the newer OPC UA there is an official OPC UA component (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;camel&#x2F;blob&#x2F;master&#x2F;components&#x2F;camel-milo&#x2F;src&#x2F;main&#x2F;docs&#x2F;milo-server-component.adoc&quot;&gt;milo-server&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;camel&#x2F;blob&#x2F;master&#x2F;components&#x2F;camel-milo&#x2F;src&#x2F;main&#x2F;docs&#x2F;milo-client-component.adoc&quot;&gt;milo-client&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Datenschutzerklärung &#x2F; Privacy Policy</title>
        <published>2018-04-15T15:16:32+02:00</published>
        <updated>2018-04-15T15:16:32+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/legal/privacy/" type="text/html"/>
        <id>dentrassi.de/legal/privacy/</id>
        <content type="html">&lt;h1 id=&quot;deutsch&quot;&gt;Deutsch&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;1-datenschutz-auf-einen-blick&quot;&gt;1. Datenschutz auf einen Blick&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;allgemeine-hinweise&quot;&gt;Allgemeine Hinweise&lt;&#x2F;h3&gt;
&lt;p&gt;Die folgenden Hinweise geben einen einfachen Überblick darüber, was mit Ihren personenbezogenen Daten passiert, wenn Sie unsere Website besuchen. Personenbezogene Daten sind alle Daten, mit denen Sie persönlich identifiziert werden können. Ausführliche Informationen zum Thema Datenschutz entnehmen Sie unserer unter diesem Text aufgeführten Datenschutzerklärung.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;datenerfassung-auf-unserer-website&quot;&gt;Datenerfassung auf unserer Website&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Wer ist verantwortlich für die Datenerfassung auf dieser Website?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Die Datenverarbeitung auf dieser Website erfolgt durch den Websitebetreiber. Dessen Kontaktdaten können Sie dem Impressum dieser Website entnehmen.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Wie erfassen wir Ihre Daten?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ihre Daten werden zum einen dadurch erhoben, dass Sie uns diese mitteilen. Hierbei kann es sich z.B. um Daten handeln, die Sie in ein Kontaktformular eingeben.&lt;&#x2F;p&gt;
&lt;p&gt;Andere Daten werden automatisch beim Besuch der Website durch unsere IT-Systeme erfasst. Das sind vor allem technische Daten (z.B. Internetbrowser, Betriebssystem oder Uhrzeit des Seitenaufrufs). Die Erfassung dieser Daten erfolgt automatisch, sobald Sie unsere Website betreten.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Wofür nutzen wir Ihre Daten?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ein Teil der Daten wird erhoben, um eine fehlerfreie Bereitstellung der Website zu gewährleisten. Andere Daten können zur Analyse Ihres Nutzerverhaltens verwendet werden.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Welche Rechte haben Sie bezüglich Ihrer Daten?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sie haben jederzeit das Recht unentgeltlich Auskunft über Herkunft, Empfänger und Zweck Ihrer gespeicherten personenbezogenen Daten zu erhalten. Sie haben außerdem ein Recht, die Berichtigung, Sperrung oder Löschung dieser Daten zu verlangen. Hierzu sowie zu weiteren Fragen zum Thema Datenschutz können Sie sich jederzeit unter der im Impressum angegebenen Adresse an uns wenden. Des Weiteren steht Ihnen ein Beschwerderecht bei der zuständigen Aufsichtsbehörde zu.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;analyse-tools-und-tools-von-drittanbietern&quot;&gt;Analyse-Tools und Tools von Drittanbietern&lt;&#x2F;h3&gt;
&lt;p&gt;Beim Besuch unserer Website kann Ihr Surf-Verhalten statistisch ausgewertet werden. Das geschieht vor allem mit Cookies und mit sogenannten Analyseprogrammen. Die Analyse Ihres Surf-Verhaltens erfolgt in der Regel anonym; das Surf-Verhalten kann nicht zu Ihnen zurückverfolgt werden. Sie können dieser Analyse widersprechen oder sie durch die Nichtbenutzung bestimmter Tools verhindern. Detaillierte Informationen dazu finden Sie in der folgenden Datenschutzerklärung.&lt;&#x2F;p&gt;
&lt;p&gt;Sie können dieser Analyse widersprechen. Über die Widerspruchsmöglichkeiten werden wir Sie in dieser Datenschutzerklärung informieren.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-allgemeine-hinweise-und-pflichtinformationen&quot;&gt;2. Allgemeine Hinweise und Pflichtinformationen&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;datenschutz&quot;&gt;Datenschutz&lt;&#x2F;h3&gt;
&lt;p&gt;Die Betreiber dieser Seiten nehmen den Schutz Ihrer persönlichen Daten sehr ernst. Wir behandeln Ihre personenbezogenen Daten vertraulich und entsprechend der gesetzlichen Datenschutzvorschriften sowie dieser Datenschutzerklärung.&lt;&#x2F;p&gt;
&lt;p&gt;Wenn Sie diese Website benutzen, werden verschiedene personenbezogene Daten erhoben. Personenbezogene Daten sind Daten, mit denen Sie persönlich identifiziert werden können. Die vorliegende Datenschutzerklärung erläutert, welche Daten wir erheben und wofür wir sie nutzen. Sie erläutert auch, wie und zu welchem Zweck das geschieht.&lt;&#x2F;p&gt;
&lt;p&gt;Wir weisen darauf hin, dass die Datenübertragung im Internet (z.B. bei der Kommunikation per E-Mail) Sicherheitslücken aufweisen kann. Ein lückenloser Schutz der Daten vor dem Zugriff durch Dritte ist nicht möglich.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hinweis-zur-verantwortlichen-stelle&quot;&gt;Hinweis zur verantwortlichen Stelle&lt;&#x2F;h3&gt;
&lt;p&gt;Die verantwortliche Stelle für die Datenverarbeitung auf dieser Website ist:&lt;&#x2F;p&gt;
&lt;p&gt;Jens Reimann&lt;br &#x2F;&gt;
Egilostraße 2&lt;br &#x2F;&gt;
85614 Eglharting &#x2F;Kirchseeon&lt;&#x2F;p&gt;
&lt;p&gt;Telefon: +49 &#x2F; 171 &#x2F; 3648411&lt;br &#x2F;&gt;
E-Mail: ctron@dentrassi.de&lt;&#x2F;p&gt;
&lt;p&gt;Verantwortliche Stelle ist die natürliche oder juristische Person, die allein oder gemeinsam mit anderen über die Zwecke und Mittel der Verarbeitung von personenbezogenen Daten (z.B. Namen, E-Mail-Adressen o. Ä.) entscheidet.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ssl-bzw-tls-verschlusselung&quot;&gt;SSL- bzw. TLS-Verschlüsselung&lt;&#x2F;h3&gt;
&lt;p&gt;Diese Seite nutzt aus Sicherheitsgründen und zum Schutz der Übertragung vertraulicher Inhalte, wie zum Beispiel Bestellungen oder Anfragen, die Sie an uns als Seitenbetreiber senden, eine SSL-bzw. TLS-Verschlüsselung. Eine verschlüsselte Verbindung erkennen Sie daran, dass die Adresszeile des Browsers von “http:&#x2F;&#x2F;” auf “https:&#x2F;&#x2F;” wechselt und an dem Schloss-Symbol in Ihrer Browserzeile.&lt;&#x2F;p&gt;
&lt;p&gt;Wenn die SSL- bzw. TLS-Verschlüsselung aktiviert ist, können die Daten, die Sie an uns übermitteln, nicht von Dritten mitgelesen werden.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-datenerfassung-auf-unserer-website&quot;&gt;3. Datenerfassung auf unserer Website&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cookies&quot;&gt;Cookies&lt;&#x2F;h3&gt;
&lt;p&gt;Die Internetseiten verwenden teilweise so genannte Cookies. Cookies richten auf Ihrem Rechner keinen Schaden an und enthalten keine Viren. Cookies dienen dazu, unser Angebot nutzerfreundlicher, effektiver und sicherer zu machen. Cookies sind kleine Textdateien, die auf Ihrem Rechner abgelegt werden und die Ihr Browser speichert.&lt;&#x2F;p&gt;
&lt;p&gt;Die meisten der von uns verwendeten Cookies sind so genannte “Session-Cookies”. Sie werden nach Ende Ihres Besuchs automatisch gelöscht. Andere Cookies bleiben auf Ihrem Endgerät gespeichert bis Sie diese löschen. Diese Cookies ermöglichen es uns, Ihren Browser beim nächsten Besuch wiederzuerkennen.&lt;&#x2F;p&gt;
&lt;p&gt;Sie können Ihren Browser so einstellen, dass Sie über das Setzen von Cookies informiert werden und Cookies nur im Einzelfall erlauben, die Annahme von Cookies für bestimmte Fälle oder generell ausschließen sowie das automatische Löschen der Cookies beim Schließen des Browser aktivieren. Bei der Deaktivierung von Cookies kann die Funktionalität dieser Website eingeschränkt sein.&lt;&#x2F;p&gt;
&lt;p&gt;Cookies, die zur Durchführung des elektronischen Kommunikationsvorgangs oder zur Bereitstellung bestimmter, von Ihnen erwünschter Funktionen (z.B. Warenkorbfunktion) erforderlich sind, werden auf Grundlage von Art. 6 Abs. 1 lit. f DSGVO gespeichert. Der Websitebetreiber hat ein berechtigtes Interesse an der Speicherung von Cookies zur technisch fehlerfreien und optimierten Bereitstellung seiner Dienste. Soweit andere Cookies (z.B. Cookies zur Analyse Ihres Surfverhaltens) gespeichert werden, werden diese in dieser Datenschutzerklärung gesondert behandelt.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;server-log-dateien&quot;&gt;Server-Log-Dateien&lt;&#x2F;h3&gt;
&lt;p&gt;Der Provider der Seiten erhebt und speichert automatisch Informationen in so genannten Server-Log-Dateien, die Ihr Browser automatisch an uns übermittelt. Dies sind:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Browsertyp und Browserversion&lt;&#x2F;li&gt;
&lt;li&gt;verwendetes Betriebssystem&lt;&#x2F;li&gt;
&lt;li&gt;Referrer URL&lt;&#x2F;li&gt;
&lt;li&gt;Hostname des zugreifenden Rechners&lt;&#x2F;li&gt;
&lt;li&gt;Uhrzeit der Serveranfrage&lt;&#x2F;li&gt;
&lt;li&gt;IP-Adresse&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Eine Zusammenführung dieser Daten mit anderen Datenquellen wird nicht vorgenommen.&lt;&#x2F;p&gt;
&lt;p&gt;Grundlage für die Datenverarbeitung ist Art. 6 Abs. 1 lit. b DSGVO, der die Verarbeitung von Daten zur Erfüllung eines Vertrags oder vorvertraglicher Maßnahmen gestattet.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kontaktformular&quot;&gt;Kontaktformular&lt;&#x2F;h3&gt;
&lt;p&gt;Wenn Sie uns per Kontaktformular Anfragen zukommen lassen, werden Ihre Angaben aus dem Anfrageformular inklusive der von Ihnen dort angegebenen Kontaktdaten zwecks Bearbeitung der Anfrage und für den Fall von Anschlussfragen bei uns gespeichert. Diese Daten geben wir nicht ohne Ihre Einwilligung weiter.&lt;&#x2F;p&gt;
&lt;p&gt;Die Verarbeitung der in das Kontaktformular eingegebenen Daten erfolgt somit ausschließlich auf Grundlage Ihrer Einwilligung (Art. 6 Abs. 1 lit. a DSGVO). Sie können diese Einwilligung jederzeit widerrufen. Dazu reicht eine formlose Mitteilung per E-Mail an uns. Die Rechtmäßigkeit der bis zum Widerruf erfolgten Datenverarbeitungsvorgänge bleibt vom Widerruf unberührt.&lt;&#x2F;p&gt;
&lt;p&gt;Die von Ihnen im Kontaktformular eingegebenen Daten verbleiben bei uns, bis Sie uns zur Löschung auffordern, Ihre Einwilligung zur Speicherung widerrufen oder der Zweck für die Datenspeicherung entfällt (z.B. nach abgeschlossener Bearbeitung Ihrer Anfrage). Zwingende gesetzliche Bestimmungen – insbesondere Aufbewahrungsfristen – bleiben unberührt.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;registrierung-auf-dieser-website&quot;&gt;Registrierung auf dieser Website&lt;&#x2F;h3&gt;
&lt;p&gt;Sie können sich auf unserer Website registrieren, um zusätzliche Funktionen auf der Seite zu nutzen. Die dazu eingegebenen Daten verwenden wir nur zum Zwecke der Nutzung des jeweiligen Angebotes oder Dienstes, für den Sie sich registriert haben. Die bei der Registrierung abgefragten Pflichtangaben müssen vollständig angegeben werden. Anderenfalls werden wir die Registrierung ablehnen.&lt;&#x2F;p&gt;
&lt;p&gt;Für wichtige Änderungen etwa beim Angebotsumfang oder bei technisch notwendigen Änderungen nutzen wir die bei der Registrierung angegebene E-Mail-Adresse, um Sie auf diesem Wege zu informieren.&lt;&#x2F;p&gt;
&lt;p&gt;Die Verarbeitung der bei der Registrierung eingegebenen Daten erfolgt auf Grundlage Ihrer Einwilligung (Art. 6 Abs. 1 lit. a DSGVO). Sie können eine von Ihnen erteilte Einwilligung jederzeit widerrufen. Dazu reicht eine formlose Mitteilung per E-Mail an uns. Die Rechtmäßigkeit der bereits erfolgten Datenverarbeitung bleibt vom Widerruf unberührt.&lt;&#x2F;p&gt;
&lt;p&gt;Die bei der Registrierung erfassten Daten werden von uns gespeichert, solange Sie auf unserer Website registriert sind und werden anschließend gelöscht. Gesetzliche Aufbewahrungsfristen bleiben unberührt.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kommentarfunktion-auf-dieser-website&quot;&gt;Kommentarfunktion auf dieser Website&lt;&#x2F;h3&gt;
&lt;p&gt;Für die Kommentarfunktion auf dieser Seite werden neben Ihrem Kommentar auch Angaben zum Zeitpunkt der Erstellung des Kommentars und, wenn Sie nicht anonym posten, der von Ihnen gewählte Nutzername gespeichert.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Speicherung der IP-Adresse&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Unsere Kommentarfunktion speichert die IP-Adressen der Nutzer, die Kommentare verfassen. Da wir Kommentare auf unserer Seite nicht vor der Freischaltung prüfen, benötigen wir diese Daten, um im Falle von Rechtsverletzungen wie Beleidigungen oder Propaganda gegen den Verfasser vorgehen zu können.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Abonnieren von Kommentaren&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Als Nutzer der Seite können Sie nach einer Anmeldung Kommentare abonnieren. Sie erhalten eine Bestätigungsemail, um zu prüfen, ob Sie der Inhaber der angegebenen E-Mail-Adresse sind. Sie können diese Funktion jederzeit über einen Link in den Info-Mails abbestellen. Die im Rahmen des Abonnierens von Kommentaren eingegebenen Daten werden in diesem Fall gelöscht; wenn Sie diese Daten für andere Zwecke und an anderer Stelle (z.B. Newsletterbestellung) an uns übermittelt haben, verbleiben die jedoch bei uns.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Speicherdauer der Kommentare&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Die Kommentare und die damit verbundenen Daten (z.B. IP-Adresse) werden gespeichert und verbleiben auf unserer Website, bis der kommentierte Inhalt vollständig gelöscht wurde oder die Kommentare aus rechtlichen Gründen gelöscht werden müssen (z.B. beleidigende Kommentare).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Rechtsgrundlage&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Die Speicherung der Kommentare erfolgt auf Grundlage Ihrer Einwilligung (Art. 6 Abs. 1 lit. a DSGVO). Sie können eine von Ihnen erteilte Einwilligung jederzeit widerrufen. Dazu reicht eine formlose Mitteilung per E-Mail an uns. Die Rechtmäßigkeit der bereits erfolgten Datenverarbeitungsvorgänge bleibt vom Widerruf unberührt.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-analyse-tools-und-werbung&quot;&gt;4. Analyse Tools und Werbung&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;google-analytics&quot;&gt;Google Analytics&lt;&#x2F;h3&gt;
&lt;p&gt;Diese Website nutzt Funktionen des Webanalysedienstes Google Analytics. Anbieter ist die Google Inc., 1600 Amphitheatre Parkway, Mountain View, CA 94043, USA.&lt;&#x2F;p&gt;
&lt;p&gt;Google Analytics verwendet so genannte “Cookies”. Das sind Textdateien, die auf Ihrem Computer gespeichert werden und die eine Analyse der Benutzung der Website durch Sie ermöglichen. Die durch den Cookie erzeugten Informationen über Ihre Benutzung dieser Website werden in der Regel an einen Server von Google in den USA übertragen und dort gespeichert.&lt;&#x2F;p&gt;
&lt;p&gt;Die Speicherung von Google-Analytics-Cookies erfolgt auf Grundlage von Art. 6 Abs. 1 lit. f DSGVO. Der Websitebetreiber hat ein berechtigtes Interesse an der Analyse des Nutzerverhaltens, um sowohl sein Webangebot als auch seine Werbung zu optimieren.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;IP Anonymisierung&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Wir haben auf dieser Website die Funktion IP-Anonymisierung aktiviert. Dadurch wird Ihre IP-Adresse von Google innerhalb von Mitgliedstaaten der Europäischen Union oder in anderen Vertragsstaaten des Abkommens über den Europäischen Wirtschaftsraum vor der Übermittlung in die USA gekürzt. Nur in Ausnahmefällen wird die volle IP-Adresse an einen Server von Google in den USA übertragen und dort gekürzt. Im Auftrag des Betreibers dieser Website wird Google diese Informationen benutzen, um Ihre Nutzung der Website auszuwerten, um Reports über die Websiteaktivitäten zusammenzustellen und um weitere mit der Websitenutzung und der Internetnutzung verbundene Dienstleistungen gegenüber dem Websitebetreiber zu erbringen. Die im Rahmen von Google Analytics von Ihrem Browser übermittelte IP-Adresse wird nicht mit anderen Daten von Google zusammengeführt.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Browser Plugin&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sie können die Speicherung der Cookies durch eine entsprechende Einstellung Ihrer Browser-Software verhindern; wir weisen Sie jedoch darauf hin, dass Sie in diesem Fall gegebenenfalls nicht sämtliche Funktionen dieser Website vollumfänglich werden nutzen können. Sie können darüber hinaus die Erfassung der durch den Cookie erzeugten und auf Ihre Nutzung der Website bezogenen Daten (inkl. Ihrer IP-Adresse) an Google sowie die Verarbeitung dieser Daten durch Google verhindern, indem Sie das unter dem folgenden Link verfügbare Browser-Plugin herunterladen und installieren: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tools.google.com&#x2F;dlpage&#x2F;gaoptout?hl=de&quot;&gt;https:&#x2F;&#x2F;tools.google.com&#x2F;dlpage&#x2F;gaoptout?hl=de&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Widerspruch gegen Datenerfassung&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sie können die Erfassung Ihrer Daten durch Google Analytics verhindern, indem Sie auf folgenden Link klicken. Es wird ein Opt-Out-Cookie gesetzt, der die Erfassung Ihrer Daten bei zukünftigen Besuchen dieser Website verhindert: &lt;a href=&quot;javascript:gaOptout();&quot;&gt;Google Analytics deaktivieren&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Mehr Informationen zum Umgang mit Nutzerdaten bei Google Analytics finden Sie in der Datenschutzerklärung von Google: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;support.google.com&#x2F;analytics&#x2F;answer&#x2F;6004245?hl=de&quot;&gt;https:&#x2F;&#x2F;support.google.com&#x2F;analytics&#x2F;answer&#x2F;6004245?hl=de&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Auftragsdatenverarbeitung&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Wir haben mit Google einen Vertrag zur Auftragsdatenverarbeitung abgeschlossen und setzen die strengen Vorgaben der deutschen Datenschutzbehörden bei der Nutzung von Google Analytics vollständig um.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-plugins-und-tools&quot;&gt;5. Plugins und Tools&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;youtube&quot;&gt;YouTube&lt;&#x2F;h3&gt;
&lt;p&gt;Unsere Website nutzt Plugins der von Google betriebenen Seite YouTube. Betreiber der Seiten ist die YouTube, LLC, 901 Cherry Ave., San Bruno, CA 94066, USA.&lt;&#x2F;p&gt;
&lt;p&gt;Wenn Sie eine unserer mit einem YouTube-Plugin ausgestatteten Seiten besuchen, wird eine Verbindung zu den Servern von YouTube hergestellt. Dabei wird dem YouTube-Server mitgeteilt, welche unserer Seiten Sie besucht haben.&lt;&#x2F;p&gt;
&lt;p&gt;Wenn Sie in Ihrem YouTube-Account eingeloggt sind, ermöglichen Sie YouTube, Ihr Surfverhalten direkt Ihrem persönlichen Profil zuzuordnen. Dies können Sie verhindern, indem Sie sich aus Ihrem YouTube-Account ausloggen.&lt;&#x2F;p&gt;
&lt;p&gt;Die Nutzung von YouTube erfolgt im Interesse einer ansprechenden Darstellung unserer Online-Angebote. Dies stellt ein berechtigtes Interesse im Sinne von Art. 6 Abs. 1 lit. f DSGVO dar.&lt;&#x2F;p&gt;
&lt;p&gt;Weitere Informationen zum Umgang mit Nutzerdaten finden Sie in der Datenschutzerklärung von YouTube unter: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.google.de&#x2F;intl&#x2F;de&#x2F;policies&#x2F;privacy&quot;&gt;https:&#x2F;&#x2F;www.google.de&#x2F;intl&#x2F;de&#x2F;policies&#x2F;privacy&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;google-web-fonts&quot;&gt;Google Web Fonts&lt;&#x2F;h3&gt;
&lt;p&gt;Diese Seite nutzt zur einheitlichen Darstellung von Schriftarten so genannte Web Fonts, die von Google bereitgestellt werden. Beim Aufruf einer Seite lädt Ihr Browser die benötigten Web Fonts in ihren Browsercache, um Texte und Schriftarten korrekt anzuzeigen.&lt;&#x2F;p&gt;
&lt;p&gt;Zu diesem Zweck muss der von Ihnen verwendete Browser Verbindung zu den Servern von Google aufnehmen. Hierdurch erlangt Google Kenntnis darüber, dass über Ihre IP-Adresse unsere Website aufgerufen wurde. Die Nutzung von Google Web Fonts erfolgt im Interesse einer einheitlichen und ansprechenden Darstellung unserer Online-Angebote. Dies stellt ein berechtigtes Interesse im Sinne von Art. 6 Abs. 1 lit. f DSGVO dar.&lt;&#x2F;p&gt;
&lt;p&gt;Wenn Ihr Browser Web Fonts nicht unterstützt, wird eine Standardschrift von Ihrem Computer genutzt.&lt;&#x2F;p&gt;
&lt;p&gt;Weitere Informationen zu Google Web Fonts finden Sie unter &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;fonts&#x2F;faq&quot;&gt;https:&#x2F;&#x2F;developers.google.com&#x2F;fonts&#x2F;faq&lt;&#x2F;a&gt; und in der Datenschutzerklärung von Google: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.google.com&#x2F;policies&#x2F;privacy&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.google.com&#x2F;policies&#x2F;privacy&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;english&quot;&gt;English&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;1-an-overview-of-data-protection&quot;&gt;1. An overview of data protection&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;general&quot;&gt;General&lt;&#x2F;h3&gt;
&lt;p&gt;The following gives a simple overview of what happens to your personal information when you visit our website. Personal information is any data with which you could be personally identified. Detailed information on the subject of data protection can be found in our privacy policy found below.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-collection-on-our-website&quot;&gt;Data collection on our website&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Who is responsible for the data collection on this website?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The data collected on this website are processed by the website operator. The operator’s contact details can be found in the website’s required legal notice.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;How do we collect your data?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Some data are collected when you provide it to us. This could, for example, be data you enter on a contact form.&lt;&#x2F;p&gt;
&lt;p&gt;Other data are collected automatically by our IT systems when you visit the website. These data are primarily technical data such as the browser and operating system you are using or when you accessed the page. These data are collected automatically as soon as you enter our website.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What do we use your data for?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Part of the data is collected to ensure the proper functioning of the website. Other data can be used to analyze how visitors use the site.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What rights do you have regarding your data?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You always have the right to request information about your stored data, its origin, its recipients, and the purpose of its collection at no charge. You also have the right to request that it be corrected, blocked, or deleted. You can contact us at any time using the address given in the legal notice if you have further questions about the issue of privacy and data protection. You may also, of course, file a complaint with the competent regulatory authorities.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;analytics-and-third-party-tools&quot;&gt;Analytics and third-party tools&lt;&#x2F;h3&gt;
&lt;p&gt;When visiting our website, statistical analyses may be made of your surfing behavior. This happens primarily using cookies and analytics. The analysis of your surfing behavior is usually anonymous, i.e. we will not be able to identify you from this data. You can object to this analysis or prevent it by not using certain tools. Detailed information can be found in the following privacy policy.&lt;&#x2F;p&gt;
&lt;p&gt;You can object to this analysis. We will inform you below about how to exercise your options in this regard.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-general-information-and-mandatory-information&quot;&gt;2. General information and mandatory information&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;data-protection&quot;&gt;Data protection&lt;&#x2F;h3&gt;
&lt;p&gt;The operators of this website take the protection of your personal data very seriously. We treat your personal data as confidential and in accordance with the statutory data protection regulations and this privacy policy.&lt;&#x2F;p&gt;
&lt;p&gt;If you use this website, various pieces of personal data will be collected. Personal information is any data with which you could be personally identified. This privacy policy explains what information we collect and what we use it for. It also explains how and for what purpose this happens.&lt;&#x2F;p&gt;
&lt;p&gt;Please note that data transmitted via the internet (e.g. via email communication) may be subject to security breaches. Complete protection of your data from third-party access is not possible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;notice-concerning-the-party-responsible-for-this-website&quot;&gt;Notice concerning the party responsible for this website&lt;&#x2F;h3&gt;
&lt;p&gt;The party responsible for processing data on this website is:&lt;&#x2F;p&gt;
&lt;p&gt;Jens Reimann&lt;br &#x2F;&gt;
Egilostraße 2&lt;br &#x2F;&gt;
85614 Eglharting &#x2F;Kirchseeon&lt;&#x2F;p&gt;
&lt;p&gt;Telephone: +49 &#x2F; 171 &#x2F; 3648411&lt;br &#x2F;&gt;
Email: ctron@dentrassi.de&lt;&#x2F;p&gt;
&lt;p&gt;The responsible party is the natural or legal person who alone or jointly with others decides on the purposes and means of processing personal data (names, email addresses, etc.).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ssl-or-tls-encryption&quot;&gt;SSL or TLS encryption&lt;&#x2F;h3&gt;
&lt;p&gt;This site uses SSL or TLS encryption for security reasons and for the protection of the transmission of confidential content, such as the inquiries you send to us as the site operator. You can recognize an encrypted connection in your browser’s address line when it changes from “http:&#x2F;&#x2F;” to “https:&#x2F;&#x2F;” and the lock icon is displayed in your browser’s address bar.&lt;&#x2F;p&gt;
&lt;p&gt;If SSL or TLS encryption is activated, the data you transfer to us cannot be read by third parties.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-data-collection-on-our-website&quot;&gt;3. Data collection on our website&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;cookies-1&quot;&gt;Cookies&lt;&#x2F;h3&gt;
&lt;p&gt;Some of our web pages use cookies. Cookies do not harm your computer and do not contain any viruses. Cookies help make our website more user-friendly, efficient, and secure. Cookies are small text files that are stored on your computer and saved by your browser.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the cookies we use are so-called “session cookies.” They are automatically deleted after your visit. Other cookies remain in your device’s memory until you delete them. These cookies make it possible to recognize your browser when you next visit the site.&lt;&#x2F;p&gt;
&lt;p&gt;You can configure your browser to inform you about the use of cookies so that you can decide on a case-by-case basis whether to accept or reject a cookie. Alternatively, your browser can be configured to automatically accept cookies under certain conditions or to always reject them, or to automatically delete cookies when closing your browser. Disabling cookies may limit the functionality of this website.&lt;&#x2F;p&gt;
&lt;p&gt;Cookies which are necessary to allow electronic communications or to provide certain functions you wish to use (such as the shopping cart) are stored pursuant to Art. 6 paragraph 1, letter f of DSGVO. The website operator has a legitimate interest in the storage of cookies to ensure an optimized service provided free of technical errors. If other cookies (such as those used to analyze your surfing behavior) are also stored, they will be treated separately in this privacy policy.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;server-log-files&quot;&gt;Server log files&lt;&#x2F;h3&gt;
&lt;p&gt;The website provider automatically collects and stores information that your browser automatically transmits to us in “server log files”. These are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Browser type and browser version&lt;&#x2F;li&gt;
&lt;li&gt;Operating system used&lt;&#x2F;li&gt;
&lt;li&gt;Referrer URL&lt;&#x2F;li&gt;
&lt;li&gt;Host name of the accessing computer&lt;&#x2F;li&gt;
&lt;li&gt;Time of the server request&lt;&#x2F;li&gt;
&lt;li&gt;IP address&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These data will not be combined with data from other sources.&lt;&#x2F;p&gt;
&lt;p&gt;The basis for data processing is Art. 6 (1) (b) DSGVO, which allows the processing of data to fulfill a contract or for measures preliminary to a contract.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;contact-form&quot;&gt;Contact form&lt;&#x2F;h3&gt;
&lt;p&gt;Should you send us questions via the contact form, we will collect the data entered on the form, including the contact details you provide, to answer your question and any follow-up questions. We do not share this information without your permission.&lt;&#x2F;p&gt;
&lt;p&gt;We will, therefore, process any data you enter onto the contact form only with your consent per Art. 6 (1)(a) DSGVO. You may revoke your consent at any time. An informal email making this request is sufficient. The data processed before we receive your request may still be legally processed.&lt;&#x2F;p&gt;
&lt;p&gt;We will retain the data you provide on the contact form until you request its deletion, revoke your consent for its storage, or the purpose for its storage no longer pertains (e.g. after fulfilling your request). Any mandatory statutory provisions, especially those regarding mandatory data retention periods, remain unaffected by this provision.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;registration-on-this-website&quot;&gt;Registration on this website&lt;&#x2F;h3&gt;
&lt;p&gt;You can register on our website in order to access additional functions offered here. The input data will only be used for the purpose of using the respective site or service for which you have registered. The mandatory information requested during registration must be provided in full. Otherwise, we will reject your registration.&lt;&#x2F;p&gt;
&lt;p&gt;To inform you about important changes such as those within the scope of our site or technical changes, we will use the email address specified during registration.&lt;&#x2F;p&gt;
&lt;p&gt;We will process the data provided during registration only based on your consent per Art. 6 (1)(a) DSGVO. You may revoke your consent at any time with future effect. An informal email making this request is sufficient. The data processed before we receive your request may still be legally processed.&lt;&#x2F;p&gt;
&lt;p&gt;We will continue to store the data collected during registration for as long as you remain registered on our website. Statutory retention periods remain unaffected.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;leaving-comments-on-this-website&quot;&gt;Leaving comments on this website&lt;&#x2F;h3&gt;
&lt;p&gt;If you use the comment function on this site, the time at which you created the comment will be stored along with your comment, as well as your username, unless you are posting anonymously.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Storage of the IP address&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Our comment function stores the IP addresses of those users who post comments. Since we do not check comments on our site before they go live, we need this information to be able to pursue action for illegal or slanderous content.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Subscribing to the comment feed&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As a user of this site, you can sign up to receive the comment feed after registering. Your email address will be checked with a confirmation email. You can unsubscribe from this function at any time by clicking the link in the emails. The data provided when you subscribed to the comments feed will then be deleted, but if you have submitted this data to us for other purposes or elsewhere (such as subscribing to a newsletter), it will be retained.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;How long comments are stored&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The comments and the associated data (e.g. IP address) are stored and remain on our website until the content commented upon has been completely deleted or the comments are required to be removed for legal reasons (slander, etc.).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Legal basis&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The comments are stored based on your consent per Art. 6 (1) (a) DSGVO. You may revoke your consent at any time with future effect. An informal email making this request is sufficient. The data processed before we receive your request may still be legally processed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-analytics-and-advertising&quot;&gt;4. Analytics and advertising&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;google-analytics-1&quot;&gt;Google Analytics&lt;&#x2F;h3&gt;
&lt;p&gt;This website uses Google Analytics, a web analytics service. It is operated by Google Inc., 1600 Amphitheatre Parkway, Mountain View, CA 94043, USA.&lt;&#x2F;p&gt;
&lt;p&gt;Google Analytics uses so-called “cookies”. These are text files that are stored on your computer and that allow an analysis of the use of the website by you. The information generated by the cookie about your use of this website is usually transmitted to a Google server in the USA and stored there.&lt;&#x2F;p&gt;
&lt;p&gt;Google Analytics cookies are stored based on Art. 6 (1) (f) DSGVO. The website operator has a legitimate interest in analyzing user behavior to optimize both its website and its advertising.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;IP anonymization&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We have activated the IP anonymization feature on this website. Your IP address will be shortened by Google within the European Union or other parties to the Agreement on the European Economic Area prior to transmission to the United States. Only in exceptional cases is the full IP address sent to a Google server in the US and shortened there. Google will use this information on behalf of the operator of this website to evaluate your use of the website, to compile reports on website activity, and to provide other services regarding website activity and Internet usage for the website operator. The IP address transmitted by your browser as part of Google Analytics will not be merged with any other data held by Google.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Browser plugin&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can prevent these cookies being stored by selecting the appropriate settings in your browser. However, we wish to point out that doing so may mean you will not be able to enjoy the full functionality of this website. You can also prevent the data generated by cookies about your use of the website (incl. your IP address) from being passed to Google, and the processing of these data by Google, by downloading and installing the browser plugin available at the following link: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tools.google.com&#x2F;dlpage&#x2F;gaoptout?hl=en&quot;&gt;https:&#x2F;&#x2F;tools.google.com&#x2F;dlpage&#x2F;gaoptout?hl=en&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Objecting to the collection of data&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can prevent the collection of your data by Google Analytics by clicking on the following link. An opt-out cookie will be set to prevent your data from being collected on future visits to this site: &lt;a href=&quot;javascript:gaOptout();&quot;&gt;Disable Google Analytics&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For more information about how Google Analytics handles user data, see Google’s privacy policy: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;support.google.com&#x2F;analytics&#x2F;answer&#x2F;6004245?hl=en&quot;&gt;https:&#x2F;&#x2F;support.google.com&#x2F;analytics&#x2F;answer&#x2F;6004245?hl=en&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Outsourced data processing&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We have entered into an agreement with Google for the outsourcing of our data processing and fully implement the strict requirements of the German data protection authorities when using Google Analytics.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-plugins-and-tools&quot;&gt;5. Plugins and tools&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;youtube-1&quot;&gt;YouTube&lt;&#x2F;h3&gt;
&lt;p&gt;Our website uses plugins from YouTube, which is operated by Google. The operator of the pages is YouTube LLC, 901 Cherry Ave., San Bruno, CA 94066, USA.&lt;&#x2F;p&gt;
&lt;p&gt;If you visit one of our pages featuring a YouTube plugin, a connection to the YouTube servers is established. Here the YouTube server is informed about which of our pages you have visited.&lt;&#x2F;p&gt;
&lt;p&gt;If you’re logged in to your YouTube account, YouTube allows you to associate your browsing behavior directly with your personal profile. You can prevent this by logging out of your YouTube account.&lt;&#x2F;p&gt;
&lt;p&gt;YouTube is used to help make our website appealing. This constitutes a justified interest pursuant to Art. 6 (1) (f) DSGVO.&lt;&#x2F;p&gt;
&lt;p&gt;Further information about handling user data, can be found in the data protection declaration of YouTube under &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.google.de&#x2F;intl&#x2F;de&#x2F;policies&#x2F;privacy&quot;&gt;https:&#x2F;&#x2F;www.google.de&#x2F;intl&#x2F;de&#x2F;policies&#x2F;privacy&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;google-web-fonts-1&quot;&gt;Google Web Fonts&lt;&#x2F;h3&gt;
&lt;p&gt;For uniform representation of fonts, this page uses web fonts provided by Google. When you open a page, your browser loads the required web fonts into your browser cache to display texts and fonts correctly.&lt;&#x2F;p&gt;
&lt;p&gt;When you call up a page of our website that contains a social plugin, your browser makes a direct connection with Google servers. Google thus becomes aware that our web page was accessed via your IP address. The use of Google Web fonts is done in the interest of a uniform and attractive presentation of our website. This constitutes a justified interest pursuant to Art. 6 (1) (f) DSGVO.&lt;&#x2F;p&gt;
&lt;p&gt;If your browser does not support web fonts, a standard font is used by your computer.&lt;&#x2F;p&gt;
&lt;p&gt;Further information about handling user data, can be found at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;fonts&#x2F;faq&quot;&gt;https:&#x2F;&#x2F;developers.google.com&#x2F;fonts&#x2F;faq&lt;&#x2F;a&gt; and in Google’s privacy policy at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.google.com&#x2F;policies&#x2F;privacy&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.google.com&#x2F;policies&#x2F;privacy&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Build your own IoT cloud platform</title>
        <published>2018-04-04T16:37:31+02:00</published>
        <updated>2018-04-04T16:37:31+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2018/04/04/build-your-own-iot-cloud-platform/" type="text/html"/>
        <id>dentrassi.de/blog/2018/04/04/build-your-own-iot-cloud-platform/</id>
        <content type="html">&lt;p&gt;If you want to do large scale IoT and build your own IoT cloud platform, then you will need a messaging layer which can actually handle this. Not only handle the sheer load of messages, the number of connections. Even more important may be ability to integrate your custom bits and pieces and be able to make changes to every layer of that installation, in a controlled, yet simple way.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;an-overview&quot;&gt;An overview&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&#x2F;&quot;&gt;Eclipse Hono&lt;&#x2F;a&gt; is an open source project under umbrella of the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;iot.eclipse.org&#x2F;&quot;&gt;Eclipse IoT&lt;&#x2F;a&gt; top level project. It provides a set of components and services used for building up your own IoT cloud platform:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;hono_s2i_overview.png&quot; alt=&quot;Overview of Eclipse Hono IoT cloud platform&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In a nutshell, Hono does provide a framework to create protocol adapters, and also delivers two “standard” protocol adapters, one for HTTP and one for MQTT. Both options are equally important to the project, because there will always be a special case for which you might want a custom solution.&lt;&#x2F;p&gt;
&lt;p&gt;Aside from the standard components, Hono also defines at set of APIs based on AMQP 1.0 in order to mesh in other services. Using the same ideas from adding custom protocol adapters, Hono allows to hook up your custom device registry and your existing authentication&#x2F;authorization system (read more about &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&#x2F;api&#x2F;&quot;&gt;Eclipse Hono APIs&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;The final direct or store-and-forward message delivery is offloaded to an existing messaging layer. The scope of Hono is to create an IoT messaging infrastructure by re-using an existing, use case agnostic messaging layer and not to create another one. In this post we will assume that &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;enmasse.io&quot;&gt;EnMasse&lt;&#x2F;a&gt; is being used for that purpose. Simply because EnMasse is the best choice for AMQP 1.0 when it comes to Kubernetes&#x2F;OpenShift. It is a combination of Apache Qpid, Apache Artemis, Keycloak and some EnMasse native components.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to that, you will of course need to plug in your actual custom business logic. Which leaves you with a zoo of containers. Don’t get me wrong, containers are awesome, simply imagine you would need to deploy all of this on a single machine.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;container-freshness&quot;&gt;Container freshness&lt;&#x2F;h3&gt;
&lt;p&gt;But this also means that you need to take care of containers freshness at some point. Most likely making changes to your custom logic and maybe even to Hono itself. What is “container freshness”?! – Containers are great to use, and easy to build in the beginning. Simply create a &lt;code&gt;Dockerfile&lt;&#x2F;code&gt;, run &lt;code&gt;docker build&lt;&#x2F;code&gt; and you are good to go. You can also do this during your Maven release and have one (or more) final output containers(s) for your release, like Hono does it for example. The big flaw here is, that a container is a stack of layers, making up your final (application) image. Starting with a basic operating system layer, adding additional tools, adding Java and maybe more. And finally your local bits and pieces (like the Hono services).&lt;&#x2F;p&gt;
&lt;p&gt;All those layers link to exactly one parent layer. And this link cannot be updated. So Hono 0.5 points to a specific version of the “openjdk” layer, which again points to a specific version of “debian”. But you want your IoT cloud platform to stay fresh and up-to-date. Now assume that there is some issue in any of the Java or Debian base layers, like a security issue in the “glibc”. Unless Hono releases a new set of images, you are unable to get rid of this issue. In most cases you want to upgrade your base layers more frequently than you actual application layer.&lt;&#x2F;p&gt;
&lt;p&gt;Or consider the idea of using a different base layer than the Hono project had in mind. What if you don’t want to use Debian as a base layer? Or want to use Eclipse J9 instead of the OpenJDK JVM?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-with-openshift&quot;&gt;Building with OpenShift&lt;&#x2F;h3&gt;
&lt;p&gt;When you are using OpenShift as a container platform (and Kubernetes supports the same approach) you can make use of image streams and builds. An image stream simply is a way to store images and maintaining versions. When an image stream is created, it normally is empty. You can start to populate it with images, either by importing them from existing repositories, like DockerHub or your internal ones. Or by creating images yourself with a build running inside of OpenShift. Of course you are in charge of all operations, including tagging versions. This means that you can easily replace an image version, but in a controlled way. So no automatic update of a container will break your complete system.&lt;&#x2F;p&gt;
&lt;p&gt;There are different types of builds. A rather simple one is the well known “Dockerfile” approach. You define a base image and add a few commands which will make up the new container layer. Then there is the “source-to-image” (S2I) build, which we will have a look at in a second.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-image-streams&quot;&gt;Building &amp;amp; Image Streams&lt;&#x2F;h3&gt;
&lt;p&gt;Now with that functionality you can define a setup like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;hono_s2i_image_streams.png&quot; alt=&quot;Diagram of example image streams&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The base image gets pulled in from an external registry. And during that process you map versions to your internal versioning schema. What a move from “v1” to “v2” means in your setup is completely up to you.&lt;&#x2F;p&gt;
&lt;p&gt;The pulled in image gets fed into a build step, which will produce a new image based on the defined parent, e.g. your custom base image. Maybe this means simply adding a few command line utilities to the existing base image. Or some policy file, … The custom base image can then be used by the next build process to create an application specific container, hosting your custom application. Again, what a versioning schema you use, is completely up to you.&lt;&#x2F;p&gt;
&lt;p&gt;If you like you can also define triggers between these steps. So that when OpenShift pulls in a new image from the external source or the source code of the git repository changes, all required builds get executed and finally the new application versions gets deployed automatically. Old image versions may be kept so that you can easily switch back to an older version.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;source-to-image-s2i&quot;&gt;Source-to-Image (S2I)&lt;&#x2F;h3&gt;
&lt;p&gt;Hono uses a plain Maven build and is based on Vert.x and Spring Boot. The default way of building new container images is to check out the sources from git and run a local maven build. During the build Maven wants to talk to some Docker Daemon in order to assemble new images and storing it into its registry.&lt;&#x2F;p&gt;
&lt;p&gt;Now that approach may be fine for developers. But first of all this is a quite complex, manual job. And second, in the context described above, it doesn’t really fit.&lt;&#x2F;p&gt;
&lt;p&gt;As already described, OpenShift supports different build types to create new images. One of those build types is “S2I”. The basic idea behind S2I is that you define a build container image, which adheres to a set of entry and exit points. Processing the provided source, creating a new container image which can be used to actually run this source. For Java, Spring Boot and Maven there is an S2I image from “fabric8”, which can be tweaked with a few arguments. It will run a maven build, find the Spring Boot entry point, take care of container heap management for Java, inject a JMX agent, …&lt;&#x2F;p&gt;
&lt;p&gt;That way, for Hono you can simply reuse this existing S2I image in a build template like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;Git
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;hono&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;0.5.x&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;strategy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;source
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sourceStrategy&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;kind&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;ImageStreamTag
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;fabric8-s2i-java:2.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;MAVEN_ARGS_APPEND
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;-B -pl org.eclipse.hono:hono-service-messaging --also-make&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;ARTIFACT_DIR
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;services&#x2F;messaging&#x2F;target&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;ARTIFACT_COPY_ARGS
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;*-exec.jar&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This simple template allows you to reuse the complete existing Hono source code repository and build system. And yet you can start making modifications using custom base images or changes in Git right away.&lt;&#x2F;p&gt;
&lt;p&gt;Of course you can reuse this for your custom protocol adapters as well. And for your custom application parts. In your development process you can still use plain Maven, Spring Boot or whatever your prefer. When it comes to deploying your stack in the cloud, you hand over the same build scripts to OpenShift and S2I and let your application be built in the same way.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;choose-your-stack&quot;&gt;Choose your stack&lt;&#x2F;h3&gt;
&lt;p&gt;The beauty of S2I is, that it is not tied to any specific language or toolset. In this case, for Hono, we used the “fabric8” S2I image for Java. But if you would prefer to write your custom protocol adaptor in something else, like Python, Go, .NET, … you still could use S2I and the same patterns to go with this language and toolset.&lt;&#x2F;p&gt;
&lt;p&gt;Also, Hono supports creating protocol adapters and services in different (non-JVM based) languages. Hono components get meshed up using Hono’s AMQP 1.0 APIs, which allow to use the same flow control mechanism for services as they are used for IoT data, building your IoT cloud platform using a stack you prefer most.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;and-beyond-the-infinite&quot;&gt;… and beyond the infinite&lt;&#x2F;h3&gt;
&lt;p&gt;OpenShift has a lot more to offer when it comes to building your platform. It is possible to use build pipelines, which allow workflows publishing to some staging setup before going to production. Re-using the same generated images. Or things like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic key and certificate generation for the inter-service communication of Hono.&lt;&#x2F;li&gt;
&lt;li&gt;Easy management of Hono configuration files, logging configuration using “ConfigMaps”.&lt;&#x2F;li&gt;
&lt;li&gt;Application specific metrics generation to get some insights of application performance and throughput.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That would have been a bit too much for a single blog post. But I do encourage you to have a look at the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;hono&#x2F;tree&#x2F;feature&#x2F;support_s2i_05x&#x2F;openshift#deploy-hono-template&quot;&gt;OpenShift Hono setup&lt;&#x2F;a&gt; at my forked Hono repository on GitHub, which makes use of some of this. This setup tries to provide a more production ready deployment setup for using Hono. However it can only be seen as a reference, as any production grade setup would definitely require replacements for the example device registry, a better tuned logging configuration and definitely a few other tweaks of your personal preference ;-)&lt;&#x2F;p&gt;
&lt;p&gt;Hono also offers a lot more than this blog post can cover when building your own IoT cloud platform. One important aspect definitely is data privacy, yet supporting multiple tenants on the same instance. Hono already supports full mulit-tenancy, down to the messaging infrastructure. This makes it a perfect solution for honoring data privacy in the public and private cloud. Read more about &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.bosch-si.com&#x2F;developer&#x2F;using-multi-tenancy-in-eclipse-hono&#x2F;&quot;&gt;new multi-tenant features of the next Hono version&lt;&#x2F;a&gt; in Kai Hudalla’s blog post.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;take-a-look-eclipsecon-france-2018&quot;&gt;Take a look – EclipseCon France 2018&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;sensatic.net&#x2F;about&quot;&gt;Dejan&lt;&#x2F;a&gt; and I will have a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipsecon.org&#x2F;france2018&#x2F;session&#x2F;cloud-scale-iot-messaging&quot;&gt;talk about Hono at the EclipseCon France&lt;&#x2F;a&gt; in Toulouse (June 13-14). We will present Hono in combination with EnMasse as an IoT cloud platform. We will also bring the setup described above with us and would be happy to you show everything in action. See you in Toulouse.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>CEP &amp; Machine learning for IoT – Drools on Kura</title>
        <published>2018-03-15T18:05:13+01:00</published>
        <updated>2018-03-15T18:05:13+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2018/03/15/complex-event-processing-machine-learning-iot/" type="text/html"/>
        <id>dentrassi.de/blog/2018/03/15/complex-event-processing-machine-learning-iot/</id>
        <content type="html">&lt;p&gt;Machine learning and predicate maintenance we are the role models of IoT use cases. Having an IoT gateway allows you to pre-process data before you send it upstream to your cloud. It also allows you to do local decisions, without the actual need for a cloud upload. But as you know from sitting at your favorite restaurant, staring at the menu, making decisions can be quite hard ;-) Complex event process and machine learning models can help you with IoT use cases though.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;kura&quot;&gt;Eclipse Kura&lt;&#x2F;a&gt; is an open source IoT gateway with a focus on industrial use cases. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;drools.org&#x2F;&quot;&gt;Drools&lt;&#x2F;a&gt; is an open source rule engine and, with Drools Fusion, provides complex event processing. It also supports making decisions based on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Predictive_Model_Markup_Language&quot;&gt;Predictive Model Markup Language&lt;&#x2F;a&gt; (PMML) based models. So why not bring both components together?! PMML’s can be used for all kind of scenarios. But the classic IoT use case would probably be to do predicate maintenance, based on a PMML generated by your machine learning solution on the cloud. Sending back the “learned” knowledge to the edge gateway for local processing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;kura-addons&#x2F;#drools&quot;&gt;Drools addon for Kura&lt;&#x2F;a&gt; provide two DPs (the package type used by Kura) which can be deployed in order to extend Kura with Drools.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_455.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_455.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; If you don’t have a Raspberry Pi at hand, or don’t want to install Kura on some “real” device. You can always use the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;ctron&#x2F;kura-emulator&#x2F;&quot;&gt;Kura Emulator docker image&lt;&#x2F;a&gt; (see also &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2017&#x2F;03&#x2F;21&#x2F;developing-for-eclipse-kura-on-windows&#x2F;&quot;&gt;Developing for Eclipse Kura in Windows&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;&#x2F;h3&gt;
&lt;p&gt;Once the components are installed, it is possible to create a new Drools instance by clicking in the blue “+” on the left side of the Kura services area. Create a new component of the type &lt;code&gt;de.dentrassi.kura.addons.drools.component.DroolsInstance&lt;&#x2F;code&gt;. Choose any unused ID and click “Apply”. It might be necessary to reload the Web UI of Kura at this point as the refresh doesn’t properly work. When the service is listed in the left hand side “services” list, select it in order to configure:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_456.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_456.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The actual rules document comes from the file &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mpbravo&#x2F;brms-pmml-example&#x2F;blob&#x2F;master&#x2F;src&#x2F;main&#x2F;resources&#x2F;SimpleScorecard.pmml&quot;&gt;SimpleScorecard.pmml&lt;&#x2F;a&gt; of the PMML drools example &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mpbravo&#x2F;brms-pmml-example&quot;&gt;mpbravo&#x2F;brms-pmml-example&lt;&#x2F;a&gt;. Also be sure to set the file type to “Predictive Model Markup Language”. Save the changes by clicking on “Apply”.&lt;&#x2F;p&gt;
&lt;p&gt;Next we will use Kura Wires in order to mesh up the model with some “data”. A need to use a timer as input source, as Kura currently doesn’t offer any kind of value creating like a function or sine curve. So create a new “timer”, you can leave the default of 10 seconds. Add a new logger, which we simply use for testing, you should set the “verbosity” to “VERBOSE”. And then create a new “DroolsProcess” component with the following configuration:&lt;&#x2F;p&gt;
&lt;dl&gt;
&lt;dt&gt;ID&lt;&#x2F;dt&gt;
&lt;dd&gt;&lt;code&gt;pmml1&lt;&#x2F;code&gt; – The ID of the drools session&lt;&#x2F;dd&gt;
&lt;dt&gt;Fire all rules&lt;&#x2F;dt&gt;
&lt;dd&gt;&lt;code&gt;true&lt;&#x2F;code&gt; – After the fact has been injected, rules have to fired&lt;&#x2F;dd&gt;
&lt;dt&gt;Delete after fire&lt;&#x2F;dt&gt;
&lt;dd&gt;&lt;code&gt;true&lt;&#x2F;code&gt; – After the rules have been fired, we can remove the fact from the session&lt;&#x2F;dd&gt;
&lt;dt&gt;Fact Package&lt;&#x2F;dt&gt;
&lt;dd&gt;&lt;code&gt;org.drools.scorecards.example&lt;&#x2F;code&gt; – The package name, from the rules model&lt;&#x2F;dd&gt;
&lt;dt&gt;Fact Type&lt;&#x2F;dt&gt;
&lt;dd&gt;&lt;code&gt;SampleScore&lt;&#x2F;code&gt; – The type name, from the rules model&lt;&#x2F;dd&gt;
&lt;dt&gt;Inputs&lt;&#x2F;dt&gt;
&lt;dd&gt;&lt;code&gt;age=TIMER&lt;&#x2F;code&gt; – comma separated list for Wire record names to fact object properties&lt;&#x2F;dd&gt;
&lt;dt&gt;Outputs&lt;&#x2F;dt&gt;
&lt;dd&gt;&lt;code&gt;result=scorecard_calculatedScore&lt;&#x2F;code&gt; – comma separated list for Wire record names to fact object properties&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;
&lt;p&gt;Finally wire that all up:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_457.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_457.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;results&quot;&gt;Results&lt;&#x2F;h3&gt;
&lt;p&gt;Looking at the Kura log file &lt;code&gt;&#x2F;var&#x2F;log&#x2F;kura.log&lt;&#x2F;code&gt; should show you something like (where &lt;code&gt;result&lt;&#x2F;code&gt; is coming from the PMML model):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;2018-03-15 16:07:12,165 [DefaultQuartzScheduler_Worker-6] INFO  d.d.k.a.d.c.w.DroolsProcess - Result - type: class java.lang.Double, value: 24.0
&lt;&#x2F;span&gt;&lt;span&gt;2018-03-15 16:07:12,165 [DefaultQuartzScheduler_Worker-6] INFO  o.e.k.i.w.l.Logger - Received WireEnvelope from de.dentrassi.kura.addons.drools.component.wires.DroolsProcess-1521129031885-7
&lt;&#x2F;span&gt;&lt;span&gt;2018-03-15 16:07:12,165 [DefaultQuartzScheduler_Worker-6] INFO  o.e.k.i.w.l.Logger - Record List content: 
&lt;&#x2F;span&gt;&lt;span&gt;2018-03-15 16:07:12,165 [DefaultQuartzScheduler_Worker-6] INFO  o.e.k.i.w.l.Logger -   Record content: 
&lt;&#x2F;span&gt;&lt;span&gt;2018-03-15 16:07:12,165 [DefaultQuartzScheduler_Worker-6] INFO  o.e.k.i.w.l.Logger -     result : 24.0
&lt;&#x2F;span&gt;&lt;span&gt;2018-03-15 16:07:12,165 [DefaultQuartzScheduler_Worker-6] INFO  o.e.k.i.w.l.Logger - 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;Of course the example is rather trivial. And the actual model and the way we wired it up is just an example. But of course you will bring your own model, based on your machine learning solutions, and have your own data to wire up. So go ahead and explore.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>🔗 Varlink for Java – What wonderful world it could be</title>
        <published>2017-12-17T13:23:08+01:00</published>
        <updated>2017-12-17T13:23:08+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/12/17/varlink-for-java-what-wonderful-world-it-could-be/" type="text/html"/>
        <id>dentrassi.de/blog/2017/12/17/varlink-for-java-what-wonderful-world-it-could-be/</id>
        <content type="html">&lt;p&gt;Varlink for Java is a Java based implementation of the Varlink interface. This blog post shows how varlink can be used in the Java world to solve the problem of accessing operating system functionality.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Consuming operating system functionality from Java, when running on Linux, has always been a problem. There are numerous examples where people fork processes and parse the result in ways which tend to break the next time you upgrade your CLI tools. Not even thinking about switching to a different version of your favorite Linux distribution or switching to another distribution at all. Of course there have been all kinds of approaches to solve this like JNI, DBus, … Then again, the operating system is way more than the kernel and the desktop. Configuring a network time server, installing additional packages, reading the system log, … And of course in a polyglot world, all this is not necessarily exposed using a C based API.&lt;&#x2F;p&gt;
&lt;p&gt;Over the time, and thanks to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;harald.hoyer.xyz&#x2F;&quot;&gt;Harald&lt;&#x2F;a&gt;, I have been following the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;varlink.org&quot;&gt;Varlink&lt;&#x2F;a&gt; project. You can also read more about this in his recent &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;harald.hoyer.xyz&#x2F;2017&#x2F;12&#x2F;18&#x2F;varlink&#x2F;&quot;&gt;blog post about varlink&lt;&#x2F;a&gt;. Varlink defines itself as:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;… is an interface description format and protocol that aims to make services accessible to both humans and machines in the simplest feasible way.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So let’s put that claim to a test. :-)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;quick-overview&quot;&gt;Quick overview&lt;&#x2F;h3&gt;
&lt;p&gt;Varlink uses a socket based, client&#x2F;server based approach to communicate. It support TCP but also Unix domain sockets (UDS). Although the latter is still not officially supported in Java, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;netty.io&#x2F;&quot;&gt;Netty&lt;&#x2F;a&gt; offers a neat solution and also allows you to use the same networking API with TCP and UDS. Still, let’s go the extra mile and use UDS for this.&lt;&#x2F;p&gt;
&lt;p&gt;The protocol for communicating between client and server is rather simple. The client issues a call and waits for the result. All communication is zero-byte terminated strings, which happen to be JSON. I won’t dive into the protocol any further, it really is that simple and you can read about it at the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;varlink&#x2F;documentation&#x2F;wiki#protocol&quot;&gt;Varlink protocol documentation&lt;&#x2F;a&gt; anyway.&lt;&#x2F;p&gt;
&lt;p&gt;As Netty does most of the networking, GSON takes care of the JSON processing, so we can focus on the actual API we want to have. For this let’s have a closer looks at how Varlink works.&lt;&#x2F;p&gt;
&lt;p&gt;Varlink offers services aka “interfaces” to expose their functionality. Every interface does also export information about itself. Varlink interfaces actually run in different processes (or even in the Linux kernel) and do expose their functionality over different addresses (e.g. unix domain sockets or TCP addresses). Therefore a default (well known) service of Varlink is the “resolver”, which allows to you to register your service with, so that others will be able to find you. As a first step I decided to focus on the client side, consuming APIs rather then publishing them. So the steps required are simply:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Contact the resolver&lt;&#x2F;li&gt;
&lt;li&gt;Ask for the address of the required service&lt;&#x2F;li&gt;
&lt;li&gt;Contact the resolved address&lt;&#x2F;li&gt;
&lt;li&gt;Perform the actual operation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Of course talking to the resolver is using the same functionality as talking to other interfaces, as the resolver is a varlink interface itself.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-simple-test&quot;&gt;A simple test&lt;&#x2F;h3&gt;
&lt;p&gt;After around two to three hours I came up with the following API, contacting the varlink interface &lt;code&gt;io.systemd.network&lt;&#x2F;code&gt;, querying all the existing network interfaces of the system:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Varlink&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;varlink&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; shorter &amp;amp; sync way
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Netdev&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; devices1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; v
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resolveSync&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Network&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dump&lt;&#x2F;span&gt;&lt;span&gt;(devices1);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; more explicit &amp;amp; async way
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Netdev&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; devices2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; v
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resolver&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;async&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;resolve&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Network&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;thenCompose&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;network &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; network.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;async&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dump&lt;&#x2F;span&gt;&lt;span&gt;(devices2);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To be honest, for this specific task, I could have also used the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;net&#x2F;NetworkInterface.html&quot;&gt;Java NetworkInterface API&lt;&#x2F;a&gt;. But the same way I am querying the network interfaces with varlink, I could also access the &lt;code&gt;io.systemd.journal&lt;&#x2F;code&gt; interface or &lt;code&gt;org.kernel.kmod&lt;&#x2F;code&gt; and interface with the system log or the kernel module system.&lt;&#x2F;p&gt;
&lt;p&gt;Just for comparison you can have a look at the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;kura&#x2F;tree&#x2F;f3efdd91ab3fba1026bedc7a75f5ad3d02306c52&#x2F;kura&#x2F;org.eclipse.kura.linux.net&#x2F;src&#x2F;main&#x2F;java&#x2F;org&#x2F;eclipse&#x2F;kura&#x2F;linux&#x2F;net&#x2F;modem&quot;&gt;Eclipse Kura USB modem functionality&lt;&#x2F;a&gt;, which needs to call a bunch of command line utilities, access lock files, call into JNI code, …&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-idl-xtext-awesomeness&quot;&gt;The IDL – Xtext awesomeness&lt;&#x2F;h3&gt;
&lt;p&gt;If you don’t know &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;Xtext&#x2F;&quot;&gt;Xtext&lt;&#x2F;a&gt;, it is a toolchain for creating your own DSL. Living in the Eclipse modeling ecosystem, it allows you to define your DSL grammar and it will take care of creating a parser, a complete editor with code completion, syntax highlighting, support for the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Microsoft&#x2F;language-server-protocol&quot;&gt;language server protocol&lt;&#x2F;a&gt; and much more. It does support the Eclipse IDE, IntelliJ and plain web. And of course you can create an Xtext grammar for the Varlink IDL quite easily. After around one hour of fighting with grammars, I came up with the following editor:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_409.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Selection_409.png&quot; alt=&quot;Varlink IDL editor&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Varlink IDL editor&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;As you can see, the Varlink IDL has been parsed. I am pretty sure there are still some issues with grammar, but it is quite a good start. Now everything is available in a parsed ECore model and can be visualized or transformed with any of the Eclipse Modeling tools&#x2F;libraries. Creating a quick diagram editor with Eclipse Sirius is only a few more minutes away.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-next-what-is-missing&quot;&gt;What is next, what is missing&lt;&#x2F;h3&gt;
&lt;p&gt;Altogether this was quite easy. Varlink indeed offers a solution for accessing system services in a &lt;q&gt;simplest feasible way. So, what is next?&lt;&#x2F;q&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;varlink-java&quot;&gt;varlink-java&lt;&#x2F;a&gt; is already available on GitHub. I would like to clean it up a bit, add a decent build setup and publish it on Maven Central. Adding the Xtext bits in a simple way, if possible. Tycho and plain Maven builds always tend to get in each others way.&lt;&#x2F;p&gt;
&lt;p&gt;Varlink offers something called “monitoring”. Instead of getting a single reply to a call, the call can follow up with additional updates. Like changes in the device list, following on log entries, … This is currently not supported by the &lt;code&gt;varlink-java&lt;&#x2F;code&gt; API, but it is an important feature and I really would like to add it as well.&lt;&#x2F;p&gt;
&lt;p&gt;In the current example the bindings to &lt;code&gt;io.systemd.network&lt;&#x2F;code&gt; where created manually. This is fine for a first example, but combining this with the Xtext based IDL parser it would be a simple task to create a Maven plugin which creates the binding code base on the provided varlink files on the fly.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, there is so much more: creating a graphical System API browser, the whole server&#x2F;interface side and dozens of bindings to create.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;Varlink is an amazing piece of technology. And mostly because it is that simple. It does offer the right functionality to solve so many issues we currently face when accessing operating system APIs. And it definitely is a candidate to get rid of all the ugly wrapper code around command line calls and other things which are currently necessary to talk to operating system functionality. And simply using plain Java functionality (at least if you go with TCP ;-) ).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;links-stuff&quot;&gt;Links &amp;amp; stuff&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;varlink.org&quot;&gt;Varlink&lt;&#x2F;a&gt; Homepage&lt;&#x2F;li&gt;
&lt;li&gt;GitHub repository 
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;varlink-java&quot;&gt;ctron&#x2F;varlink-java&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;varlink-java&#x2F;blob&#x2F;develop&#x2F;varlink-bindings&#x2F;io.systemd&#x2F;src&#x2F;test&#x2F;java&#x2F;io&#x2F;systemd&quot;&gt;Full io.systemd.network example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;harald.hoyer.xyz&#x2F;2017&#x2F;12&#x2F;18&#x2F;varlink&#x2F;&quot;&gt;Harald’s post about varlink&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;How to install varlink (on Fedora 27, for CentOS use “yum”):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; dnf copr enable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;@varlink&#x2F;varlink&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; dnf install fedora-varlink
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; systemctl enable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --now&lt;&#x2F;span&gt;&lt;span&gt; org.varlink.resolver.socket
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;varlink&lt;&#x2F;span&gt;&lt;span&gt; help
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Manually reclaiming a persistent volume in OpenShift</title>
        <published>2017-11-27T11:01:08+01:00</published>
        <updated>2017-11-27T11:01:08+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/11/27/manually-reclaim-persistent-volume-in-openshift/" type="text/html"/>
        <id>dentrassi.de/blog/2017/11/27/manually-reclaim-persistent-volume-in-openshift/</id>
        <content type="html">&lt;p&gt;When you have a persistent volume in OpenShift configured with “Retain”, the volume will switch to “Released” after the claim has been deleted. But what now? How to manually recycle it? This post will give a brief overview on how to manually reclaim the volume.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;deleting-the-claim&quot;&gt;Deleting the claim&lt;&#x2F;h3&gt;
&lt;p&gt;Delete the persistent volume &lt;em&gt;claim&lt;&#x2F;em&gt; in OpenShift is simple, either using the Web UI or by executing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; oc delete pvc&#x2F;my-claim
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you check, then you will see the persistent volume is “Released” but not “Available”:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;$ oc get pv
&lt;&#x2F;span&gt;&lt;span&gt;NAME              CAPACITY   ACCESSMODES   RECLAIMPOLICY   STATUS     CLAIM                         REASON    AGE
&lt;&#x2F;span&gt;&lt;span&gt;my-pv             40Gi       RWO           Retain          Released   my-project&#x2F;my-claim                     2d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;what-the-documentation-tells-us&quot;&gt;What the documentation tells us&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.openshift.org&#x2F;latest&quot;&gt;OpenShift documentation&lt;&#x2F;a&gt; states:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, persistent volumes are set to Retain. NFS volumes which are set to Recycle are scrubbed (i.e., rm -rf is run on the volume) after being released from their claim (i.e, after the user’s PersistentVolumeClaim bound to the volume is deleted). Once recycled, the NFS volume can be bound to a new claim.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;At a different location it simply says:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Retained reclaim policy allows manual reclamation of the resource for those volume plug-ins that support it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;But how to actually do that? How to manually reclaim the volume?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reclaiming-the-volume&quot;&gt;Reclaiming the volume&lt;&#x2F;h3&gt;
&lt;p&gt;First of all ensure that the data is actually deleted. Using NFS you will need to manually delete the content of the share using e.g. &lt;code&gt;rm -Rf &#x2F;exports&#x2F;my-volume&#x2F;*&lt;&#x2F;code&gt;, but the be sure to the keep the actual export directory in place.&lt;&#x2F;p&gt;
&lt;p&gt;Now it is time to actually make the PV available again for being claimed. For this the reference to the previous claim (&lt;code&gt;spec&#x2F;claimRef&lt;&#x2F;code&gt;) has to be removed from the persistent volume. You can manually do this from the Web UI or with short command from the shell (assuming you are using &lt;code&gt;bash&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;$ oc patch pv&#x2F;my-pv --type json -p $&amp;#39;- op: remove\n  path: &#x2F;spec&#x2F;claimRef&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;my-pv&amp;quot; patched
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This should return the volume into state “Available”:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;$ oc get pv
&lt;&#x2F;span&gt;&lt;span&gt;NAME              CAPACITY   ACCESSMODES   RECLAIMPOLICY   STATUS     CLAIM                         REASON    AGE
&lt;&#x2F;span&gt;&lt;span&gt;my-pv             40Gi       RWO           Retain          Available  my-project&#x2F;my-claim                     2d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Flow</title>
        <published>2017-11-14T15:50:01+01:00</published>
        <updated>2017-11-14T15:50:01+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/flow/" type="text/html"/>
        <id>dentrassi.de/pages/attic/flow/</id>
        <content type="html">&lt;p&gt;Also see:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;flow&quot;&gt;https:&#x2F;&#x2F;ctron.github.io&#x2F;flow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;flow&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;flow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>OPC UA solutions with Eclipse Milo</title>
        <published>2017-09-14T09:55:15+02:00</published>
        <updated>2017-09-14T09:55:15+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/09/14/creating-opc-ua-solutions-eclipse-milo/" type="text/html"/>
        <id>dentrassi.de/blog/2017/09/14/creating-opc-ua-solutions-eclipse-milo/</id>
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;eclipse-IoT-light-300x269.png&quot; alt=&quot;Eclipse IoT&quot; &#x2F;&gt;This article walks you through the first steps of creating an OPC UA solution based on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;milo&quot;&gt;Eclipse Milo&lt;&#x2F;a&gt;. OPC UA, also known as IEC 62541, is an IoT solution for connecting industrial automation systems. Eclipse Milo™ is an open-source Java based implementation.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;strong&gt;Please note:&lt;&#x2F;strong&gt; In the recent 0.3.x release of Milo, the APIs have been changed. This blog post still uses the old APIs of Milo 0.2.x. However I wrote a new blog post, which covers the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2019&#x2F;07&#x2F;06&#x2F;eclipse-milo-0-3-updated-examples&#x2F;&quot;&gt;changes in Milo 0.3.x&lt;&#x2F;a&gt;, compared to this blog post. Since the new post only covers the changes, I encourage you to read on, as everything else in this blog post is still valid.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-opc-ua&quot;&gt;What is OPC UA?&lt;&#x2F;h3&gt;
&lt;p&gt;OPC UA is a point-to-point, client&#x2F;server based communication protocol used in industrial automation scenarios. It offers APIs for telemetry data, command and control, historical data, alarming and event logs. And a bit more.&lt;&#x2F;p&gt;
&lt;p&gt;OPC UA is also the successor of OPC DA (AE, HD, …) and puts a lot more emphasis on interoperability than the older, COM&#x2F;DCOM based, variants. It not only offers a platform neutral communication layer, with security built right into it, but also offers a rich set of interfaces for handling telemetry data, alarms and events, historical data and more. OPC clearly has an industrial background as it is coming from an area of process control, PLC, SCADA like systems. It is also known as IEC 62541.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at OPC UA from an MQTT perspective one might ask, why do we need OPC UA? Where MQTT offers a completely undefined topics structure and data types, OPC UA provides a framework for standard and custom datatypes, a defined (hierarchical) namespace and a definition for request&#x2F;response style communication patterns. Especially the type system, even with simple types, is a real improvement over MQTT’s BLOB approach. With MQTT you never know what is inside your message. It may be a numeric value encoded as string, a JSON encoded object or even a picture of a cat. OPC UA on the other side does offer you a type system which holds the information about the types, in combination with the actual values.&lt;&#x2F;p&gt;
&lt;p&gt;OPC UA’s subscription model also provides a really efficient way of transmitting data in a lively manner, but only transmitting data when necessary as defined by client and server. In combination with the binary protocol this can a real resource safer.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-architecture-of-eclipse-milo&quot;&gt;The architecture of Eclipse Milo&lt;&#x2F;h3&gt;
&lt;p&gt;Traditionally OPC UA frameworks are split up in “stack” and “SDK”. The “stack” is the core communication protocol implementation. While the “SDK” is building on top of that, offering a simpler application development model.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;milo_layers_v1.png&quot; alt=&quot;Eclipse Milo Components&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Eclipse Milo offers both “stack” and “SDK” for both “client” and “server”. “core” is the common code shared between client and server. This should explain the module structure of Milo when doing a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cga%7C1%7Corg.eclipse.milo&quot;&gt;search for “org.eclipse.milo” on Maven Central&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;org.eclipse.milo : stack-core
&lt;&#x2F;span&gt;&lt;span&gt;org.eclipse.milo : stack-client
&lt;&#x2F;span&gt;&lt;span&gt;org.eclipse.milo : stack-server
&lt;&#x2F;span&gt;&lt;span&gt;org.eclipse.milo : sdk-core
&lt;&#x2F;span&gt;&lt;span&gt;org.eclipse.milo : sdk-client
&lt;&#x2F;span&gt;&lt;span&gt;org.eclipse.milo : sdk-server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Connecting to an existing OPC UA server would require you to use “sdk-client” only, as all the other modules are transient dependencies of this module. Likewise, creating your own OPC UA server would also only require the “sdk-server” modules.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;making-contact&quot;&gt;Making contact&lt;&#x2F;h3&gt;
&lt;p&gt;Focusing on the most common use case of OPC, data acquisition and command &amp;amp; control, we will now create a simple client which will read out telemetry data from an existing OPC UA server.&lt;&#x2F;p&gt;
&lt;p&gt;The first step is to look up the “endpoint descriptors” from the remote server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EndpointDescription&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; endpoints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UaTcpStackClient&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getEndpoints&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;opc.tcp:&#x2F;&#x2F;localhost:4840&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The trailing &lt;code&gt;.get()&lt;&#x2F;code&gt; might have tipped you off that Milo makes use of Java 8 futures and thus easily allows asynchronous programming. However this example will use the synchronous &lt;code&gt;.get()&lt;&#x2F;code&gt; call in order to wait for a result. This will make the tutorial more readable as we will look at the code step by step.&lt;&#x2F;p&gt;
&lt;p&gt;Normally the next step would be to pick the “best” endpoint descriptor. However “best” is relative and highly depends on your security and connectivity requirements. So we simply pick the first one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OpcUaClientConfigBuilder&lt;&#x2F;span&gt;&lt;span&gt; cfg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OpcUaClientConfigBuilder&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;cfg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setEndpoint&lt;&#x2F;span&gt;&lt;span&gt;(endpoints[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we will create and connect the OPC client instance based on this configuration. Of course the configuration offers a lot more options. Feel free to explore them all.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OpcUaClient&lt;&#x2F;span&gt;&lt;span&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OpcUaClient&lt;&#x2F;span&gt;&lt;span&gt;(cfg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;node-ids-the-namespace&quot;&gt;Node IDs &amp;amp; the namespace&lt;&#x2F;h3&gt;
&lt;p&gt;OPC UA does identify its elements, objects, folders, items by using “Node IDs”. Each server has multiple namespaces and each namespace has a tree of folders, objects and items. There is a browser API which allows you to browse through this tree, but this is mostly for human interaction. If you know the Node ID of the element you would like to access, then you can simply provide the node ID. Node IDs can be string encoded and might look something like &lt;code&gt;ns=1;i=123&lt;&#x2F;code&gt;. This example would reference to a node in namespace #1 identified by the numeric id “123”. Aside from numeric IDs, there as also string IDs (&lt;code&gt;s=&lt;&#x2F;code&gt;), UUID&#x2F;GUID IDs (&lt;code&gt;g=&lt;&#x2F;code&gt;) and even a BLOB type (&lt;code&gt;b=&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;The following examples will assume that a node ID has been parsed into variables like &lt;code&gt;nodeId&lt;&#x2F;code&gt;, which can be done by the following code with Milo:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeId&lt;&#x2F;span&gt;&lt;span&gt; nodeIdNumeric &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeId&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ns=1;i=42&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeId&lt;&#x2F;span&gt;&lt;span&gt; nodeIdString  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeId&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ns=1;s=foo-bar&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course instances of “NodeId” can also be created using the different constructors. This approach is more performant than using the &lt;code&gt;parse&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeId&lt;&#x2F;span&gt;&lt;span&gt; nodeIdNumeric &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeId&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeId&lt;&#x2F;span&gt;&lt;span&gt; nodeIdString  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeId&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;foo-bar&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main reason behind using Node IDs is, that those can be efficiently encoded when they are transmitted. For example is it possible to lookup an item by a larger string based browse path and then only use the numeric Node ID for further interaction. Node IDs can also be efficiently encoded in the OPC UA binary protocol.&lt;&#x2F;p&gt;
&lt;p&gt;Additionally there is a set of “well known” node IDs. For example the root folder always has the node ID &lt;code&gt;ns=0;i=84&lt;&#x2F;code&gt;. So there is no need to look those up, they can be considered constants and be directly used. Milo defines all well known IDs in the &lt;code&gt;Identifiers&lt;&#x2F;code&gt; class.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reading-data&quot;&gt;Reading data&lt;&#x2F;h3&gt;
&lt;p&gt;After the connection has been established we will request a single read of a value. Normally OPC UA is used in an event driven manner, but we will start simple by using a single requested read:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DataValue&lt;&#x2F;span&gt;&lt;span&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;readValue&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TimestampsToReturn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Both&lt;&#x2F;span&gt;&lt;span&gt;, nodeId)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first parameter, max age, lets the server know that we may be ok reading a value which is a bit older. This could reduce traffic to the underlying device&#x2F;system. However using zero as a parameter we request a fresh update from the value source.&lt;&#x2F;p&gt;
&lt;p&gt;The above call is actually a simplified version of a more complex read call. In OPC UA items do have attributes and there is a “main” attribute, the value. This call defaults to reading the “value” attribute. However it is possible to read all kinds of other attributes from the same item. The next snippet shows the more complex read call, which allows to not only read different attributes of the item, but also multiple items at the same time:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadValueId&lt;&#x2F;span&gt;&lt;span&gt; readValueId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadValueId&lt;&#x2F;span&gt;&lt;span&gt;(nodeId, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AttributeId&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;uid&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadResponse&lt;&#x2F;span&gt;&lt;span&gt; response &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;  client
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TimestampsToReturn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Both&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;asList&lt;&#x2F;span&gt;&lt;span&gt;(readValueId))
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Also for this read call we do request both, the server and source timestamp. OPC UA will timestamp values and so you know when the value switched to this reported value. But it is also possible that the device itself does the timestamping. Depending on your device and application, this can be a real benefit to your use case.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;subscriptions&quot;&gt;Subscriptions&lt;&#x2F;h3&gt;
&lt;p&gt;As already explained, OPC UA can do way better than explicit single reads. Using subscriptions it is possible to have fine grained control over what you request and even how you request data.&lt;&#x2F;p&gt;
&lt;p&gt;When coming from MQTT you know that you get updates once they got published. However you have no control over the frequency you get those updates. Imagine your data source is originally some temperate sensor. It probably is capable of supplying data in a sub-microsecond resolution and frequency. But pushing a value update every microsecond, even if no one listens, is a waste of resources.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;in-opc-ua&quot;&gt;In OPC UA&lt;&#x2F;h4&gt;
&lt;p&gt;OPC UA does allow you to take control over the subscription process from both sides. When a client creates a new subscription it will provide information like the number of in-flight events, the rate of updates, … the server has the ability to modify the request, but will try to adhere to it. It will then start serving the request. Also will data only be sent of there are actual changes. Imagine a pressure sensor, the value may stay the same for quite a while, but then suddenly change rather quickly. So re-transmitting the same value over and over again, just to achieve high frequency updates when an actual change occurs is again a waste of resources.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;milo_values_v1.png&quot; alt=&quot;OPC UA Subscriptions Example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In order to achieve this in OPC UA the client will request a subscription from the server, the server will fulfill that subscription and notify the client of both value changes and subscription state changes. So the client knows if the connection to the device is broken or if there are simply no updates in the value. If no value changes occurred nothing will be transmitted. Of course there is a heartbeat on the OPC UA connection level (one for all subscriptions), which ensures detection communication loss as well.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;in-eclipse-milo&quot;&gt;In Eclipse Milo&lt;&#x2F;h4&gt;
&lt;p&gt;The following code snippets will create a new subscription in Milo. The first step is to use the subscription manager and create a new subscription context:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; what to read
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadValueId&lt;&#x2F;span&gt;&lt;span&gt; readValueId &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ReadValueId&lt;&#x2F;span&gt;&lt;span&gt;(nodeId, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AttributeId&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;uid&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; monitoring parameters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; clientHandle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;123456789&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MonitoringParameters&lt;&#x2F;span&gt;&lt;span&gt; parameters &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MonitoringParameters&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;uint&lt;&#x2F;span&gt;&lt;span&gt;(clientHandle), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;uint&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; creation request
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MonitoredItemCreateRequest&lt;&#x2F;span&gt;&lt;span&gt; request &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MonitoredItemCreateRequest&lt;&#x2F;span&gt;&lt;span&gt;(readValueId, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MonitoringMode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Reporting&lt;&#x2F;span&gt;&lt;span&gt;, parameters);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The “client handle” is a client assigned identifier which allows the client to reference the subscribed item later on. If you don’t need to reference by client handle, simply set it so some random or incrementing number.&lt;&#x2F;p&gt;
&lt;p&gt;The next step will define an initial setup callback and add the items to the subscription. The setup callback will ensure that the newly created subscription will be able to hook up listeners before the first values are received from the server side, without any race condition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; The actual consumer
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BiConsumer&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UaMonitoredItem&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DataValue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; consumer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;%s -&amp;gt; %s%n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, item, value);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; setting the consumer after the subscription creation
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BiConsumer&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UaMonitoredItem&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; onItemCreated &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;monitoredItem&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    monitoredItem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setValueConsumer&lt;&#x2F;span&gt;&lt;span&gt;(consumer);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; creating the subscription
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UaSubscription&lt;&#x2F;span&gt;&lt;span&gt; subscription &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getSubscriptionManager&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;createSubscription&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000.0&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;UaMonitoredItem&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; items &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; subscription.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;createMonitoredItems&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TimestampsToReturn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Both&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;asList&lt;&#x2F;span&gt;&lt;span&gt;(request),
&lt;&#x2F;span&gt;&lt;span&gt;    onItemCreated)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;taking-control&quot;&gt;Taking Control&lt;&#x2F;h3&gt;
&lt;p&gt;Of course consuming telemetry data is fun, but sometimes it is necessary to issue control commands as well. Issuing a command or setting a value on the target device is as easy as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;client
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;writeValue&lt;&#x2F;span&gt;&lt;span&gt;(nodeId, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DataValue&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;valueOnly&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This snippet will send the value &lt;code&gt;TRUE&lt;&#x2F;code&gt; to the object identified by &lt;code&gt;nodeId&lt;&#x2F;code&gt;. Of course, like for the read, there are more options when writing values&#x2F;attributes of an object.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;but-wait-there-is-more&quot;&gt;But wait … there is more!&lt;&#x2F;h3&gt;
&lt;p&gt;This article only scratched the complex topic of OPC UA. But it should have given you a brief introduction in OPC UA and Eclipse Milo. And it should get you started into OPC UA from a client perspective.&lt;&#x2F;p&gt;
&lt;p&gt;Watch out for the repository &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;milo-ece2017&quot;&gt;ctron&#x2F;milo-ece2017&lt;&#x2F;a&gt; which will receive some more content getting into OPC UA and Eclipse Milo and which will be accompanying repository for my talk &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipsecon.org&#x2F;europe2017&#x2F;session&#x2F;developing-opc-ua-eclipse-milo&quot;&gt;Developing OPC UA with Eclipse Milo™&lt;&#x2F;a&gt; at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipsecon.org&#x2F;europe2017&#x2F;&quot;&gt;EclipseCon Europe 2017&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I would like to thank &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kevinherron&quot;&gt;Kevin Herron&lt;&#x2F;a&gt; for not only helping me with this article, but for helping me so many times understanding Milo and OPC UA.&lt;&#x2F;p&gt;
&lt;p&gt;Also see:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;milo&quot;&gt;eclipse&#x2F;milo&lt;&#x2F;a&gt; at GitHub&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;iot.eclipse.org&#x2F;&quot;&gt;Eclipse IoT&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;milo&quot;&gt;Milo project page&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Maven RPM builder</title>
        <published>2017-08-22T09:38:41+02:00</published>
        <updated>2017-08-22T09:38:41+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/unsorted/maven-rpm-builder/" type="text/html"/>
        <id>dentrassi.de/pages/unsorted/maven-rpm-builder/</id>
        <content type="html">&lt;p&gt;The Maven RPM builder is a small &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;maven.apache.org&quot;&gt;Apache Maven&lt;&#x2F;a&gt; plugin which I wrote. It allows you to create an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;rpm.org&#x2F;&quot;&gt;RPM&lt;&#x2F;a&gt; file during a Maven build in plain Java. There already is a Maven RPM plugin available, however it does make use of the &lt;code&gt;rpm&lt;&#x2F;code&gt; binary. So it does require you to have a running version of RPM on your local build system. The Maven RPM builder however uses an RPM implementation in pure Java and thus allows you to create RPM files without the need to have the &lt;code&gt;rpm&lt;&#x2F;code&gt; binary. This makes it easier to build on platforms like Mac OS, Windows or Linux distributions which don’t use RPM.&lt;&#x2F;p&gt;
&lt;p&gt;Currently the plugins allows to create RPM files with content coming from the Maven build and allows provides support for creating a simple YUM repository. There is support for Unix file system permissions, directories, large files, dependencies. RPM metadata is by default taken from the Maven metadata, bit it can of course also be overridden&lt;br &#x2F;&gt;
using the Maven POM file.&lt;&#x2F;p&gt;
&lt;p&gt;Be sure to check out the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;rpm-builder&quot;&gt;documentation page&lt;&#x2F;a&gt;, as it provides much more information including a few examples on how to assembly your RPM files properly.&lt;&#x2F;p&gt;
&lt;p&gt;This plugin is open source and you are welcome to make comments or provide bug fixes and feature enhancements. This work is based on my other project &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;package-drone&quot;&gt;Eclipse Package Drone&lt;&#x2F;a&gt;. It provides the core functionality of reading and writing RPM files in plain Java. If you are interested in a programmatic way of creating or reading RPM files in Java, check this out as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;maven-coordinates&quot;&gt;Maven coordinates&lt;&#x2F;h3&gt;
&lt;p&gt;Here are the Maven coordinates to the plugin, be sure to replace the version with the most recent (or version of your choice).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;pre class=&amp;quot;lang:xhtml decode:true &amp;quot;&amp;gt;&amp;lt;plugin&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;groupId&amp;gt;de.dentrassi.maven&amp;lt;&#x2F;groupId&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;artifactId&amp;gt;rpm&amp;lt;&#x2F;artifactId&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;version&amp;gt;&amp;lt;!-- version --&amp;gt;&amp;lt;&#x2F;version&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;plugin&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;see-also&quot;&gt;See also&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;rpm-builder&quot;&gt;Documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;rpm-builder&quot;&gt;GitHub repository – ctron&#x2F;rpm-builder&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cgav%7C1%7Cg%3A%22de.dentrassi.maven%22%20AND%20a%3A%22rpm%22&quot;&gt;Search Maven Central&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>AsyncAPI Java Tools 0.0.4 released</title>
        <published>2017-08-21T16:35:16+02:00</published>
        <updated>2017-08-21T16:35:16+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/08/21/asyncapi-java-tools-0-0-4-released/" type="text/html"/>
        <id>dentrassi.de/blog/2017/08/21/asyncapi-java-tools-0-0-4-released/</id>
        <content type="html">&lt;p&gt;It started a as proof-of-concept, checking out AsyncAPI and learning something about it. Actually that topic came to me from two different angles. We where looking into solutions for RPC over messaging (namely AMQP 1.0) instead of HTTP&#x2F;REST. The second angle was a discussion with a very good friend of mine of “how do you define today an API about messages from the server to the client”. Everyone is talking about Swagger and OpenAPI, but this seems to be all request&#x2F;response for HTTP based APIs.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;And then someone mentioned AsyncAPI, I had to look into this. And this is what I came up with so far.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;asyncapi-tools&quot;&gt;AsyncAPI tools&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;asyncapi&quot;&gt;ctron&#x2F;asyncapi&lt;&#x2F;a&gt; is a set of tools, written in Java, around AsyncAPI in general. Reading the specification file into a Java model, a code generator for client and server side code, a few base classes which the generate code makes use of.&lt;&#x2F;p&gt;
&lt;p&gt;The definition file parser still is not optimal. The idea is that the definition is based on JSON schema, but I couldn’t find any good support for JSON schema in Java at the moment. So right now it all home-brew and although it does get the job done, I don’t think it is pretty.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;code-generation&quot;&gt;Code generation&lt;&#x2F;h4&gt;
&lt;p&gt;The code generation is a bit more sophisticated. The idea of taking this out of the Maven plugin came pretty early. I guess it would be cool to have a gradle plugin at some time in the future and the Maven plugin really is just a small wrapper around the code generator. So that should easily be possible.&lt;&#x2F;p&gt;
&lt;p&gt;The code generation is backed by Eclipse JDT, which allows you to create and parse Java code in a DOM style way. I am constantly torn apart between liking and hating this at the same time. I did work with generic model-to-text tools in the past, and tools like &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;acceleo&#x2F;&quot;&gt;Acceleo&lt;&#x2F;a&gt; or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;Xpand&quot;&gt;Xpand&lt;&#x2F;a&gt; are way easier to read than Java code generating Java code in that way. On the other side you would need a full blown Ecore model before and then wrap this again by a Maven plugin. I am not sure this is fun either. Also, using the DOM approach, it is quite simple to write extension modules for the code generation, which allow to actually process the generated Java DOM and extend it, without the requirement to write an awfully complex code generation template. So let’s see where this is going in the future.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;what-works&quot;&gt;What works?&lt;&#x2F;h4&gt;
&lt;p&gt;Don’t expect productive code … yet ;-) Currently the code generator will create the defined types&#x2F;schemas, the messages and their payload. Topics will be parsed into services, versions and actions and generate Client and Server interfaces. Also is there a client and server implementation using AMQP and Qpid JMS. This already allows you to communicate between client and server. Right now GSON will be used for creating JSON payload serialization. But I think that it should be pretty simple to swap this with e.g. Jackson.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;what-does-not-work&quot;&gt;What does not work?&lt;&#x2F;h4&gt;
&lt;p&gt;The AsyncAPI specification actually defines a bit more than the tooling can currently handle. The server section is missing, various meta data like license and descriptions are not supported. But the most important thing which is currently missing IMHO is some implementation backed on MQTT. Not that I am a big fan on MQTT, I would prefer AMQP over that in this case. But I would like to see two different AsyncAPI partners communicate via MQTT&#x2F;JSON. One of them being generated by this tool-set and the other one based on something completely different.&lt;&#x2F;p&gt;
&lt;p&gt;Also is JSON schema more powerful than what the parser can currently handle. I am not sure if JSON schema and Java is a very good fit, but if you want to go AsyncAPI, then you need to work with JSON schema. And this toolset needs to do a better job here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;asyncapi-maven-plugin&quot;&gt;AsyncAPI Maven Plugin&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;asyncapi-maven&quot;&gt;AsyncAPI Maven plugin&lt;&#x2F;a&gt; takes the code generator from the main tools project and wraps in into a Maven plugin. The idea is to simply drop in you AsyncAPI YAML file and let the Maven plugin generate the code for it. Of course this is Eclipse M2E aware, so that you can simply safe your YAML file and Eclipse will on the fly generate new code for you.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h3&gt;
&lt;p&gt;Interested in how this would look like in the form of source code? Well, here are some examples. Also be sure to check out &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;asyncapi-examples&quot;&gt;my examples repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First we need to create a builder for either the server or the client implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Builder&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JmsClient&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; builder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JmsClient&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newBuilder&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;localhost&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;profile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AmqpProfile&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DEFAULT_PROFILE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;payloadFormat&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next create an instance from it, the following is a client instance which will listen to some server-side event:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JmsClient&lt;&#x2F;span&gt;&lt;span&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ListenerHandle&lt;&#x2F;span&gt;&lt;span&gt; listener &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;accounts&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;          .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;eventUserSignup&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Waiting for messages…&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MAX_VALUE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The of course we need a server to publish messages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JmsServer&lt;&#x2F;span&gt;&lt;span&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;accounts&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;eventUserSignup&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newUserMessage&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;toCompletableFuture&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course there is no need to actively wait for the message to be sent with &lt;code&gt;get()&lt;&#x2F;code&gt; if you don’t need to. But you can use the AsyncAPI in sync way if you like to ;-)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-next&quot;&gt;What is next?&lt;&#x2F;h3&gt;
&lt;p&gt;There is a lot to do. Really, a lot! I would like to make an interop test with MQTT. There are several fields from the specification which are currently not supported. The server side JMS API isn’t really suitable for JEE style programming, especially when it comes to container managed JMS.&lt;&#x2F;p&gt;
&lt;p&gt;So I hope I will find some time to work on the MQTT backed implementation, because that would validate that two different AsyncAPI tools could work together. And I think this is what it is all about.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;before-i-forget&quot;&gt;Before I forget…&lt;&#x2F;h3&gt;
&lt;p&gt;The initial idea of why I looked into AsyncAPI was to get message based request&#x2F;response. Well, that is something which AsyncAPI doesn’t really provide. But, to be fair, it would only require a few changes to add this to the specification.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;see-also&quot;&gt;See also&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;asyncapi&quot;&gt;AsycAPI tools&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.asyncapi.com&#x2F;&quot;&gt;AsycAPI&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;asyncapi-examples&quot;&gt;ctron&#x2F;asyncapi-examples&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Kapua micro client SDK, running on a microcontroller</title>
        <published>2017-08-12T20:23:41+02:00</published>
        <updated>2017-08-12T20:23:41+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/08/12/kapua-micro-client-sdk-running-on-a-microcontroller/" type="text/html"/>
        <id>dentrassi.de/blog/2017/08/12/kapua-micro-client-sdk-running-on-a-microcontroller/</id>
        <content type="html">&lt;p&gt;A few weeks back, while being at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipsecon.org&#x2F;france2017&#x2F;&quot;&gt;EclipseCon France&lt;&#x2F;a&gt;, I did stumble over a nice little gadget. There was talk from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;developer.microej.com&#x2F;getting-started.html#top_anchor&quot;&gt;MicroEJ&lt;&#x2F;a&gt; around Java on microcontrollers. And they where showing an IoT related demo based on their development environment. And it seemed they did have &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;paho&#x2F;&quot;&gt;Eclipse Paho&lt;&#x2F;a&gt; (including TLS) and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;protocol-buffers&#x2F;&quot;&gt;Google Protobuf&lt;&#x2F;a&gt; running on their JVM without too much troubles.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;figure&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;20170802_113849_small.jpg&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;20170802_113849_small-1024x768.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot; id=&quot;caption-attachment-3642&quot;&gt;ST Board with Thermocloud&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;My first idea was to simply drop the Kapua Gateway Client SDK on top of it, implementing the cloud facing API of MicroEJ and let their IoT demo publish data towards Kapua.&lt;br &#x2F;&gt;
After a few days I was able to order such a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.st.com&#x2F;en&#x2F;evaluation-tools&#x2F;32f746gdiscovery.html&quot;&gt;STM32F746G-DISCO&lt;&#x2F;a&gt; board myself and play a little bit around with it. It quickly turned out that is was pretty easy to drop some Java code on the device, using the gateway client SDK was not an option. The MicroEJ JVM is based on Java CDLC 8. Sounds like Java 8, right? Well, it is more like Java 7. Aside from a few classes which are missing, the core features missing where Java 8’s lambdas and enhancements to interfaces (like static methods and default methods).&lt;&#x2F;p&gt;
&lt;p&gt;Rewriting the gateway client SDK in Java 7, dropping the shiny API which we currently have, didn’t sound very appealing. But then again, implementing the Kapua communication stack actually isn’t that complicated and such an embedded device wouldn’t really need the extensibility and modularity of the Java 8 based gateway client SDK. So in a few hours there was the Kapua micro client SDK, which doesn’t consume any dependencies other than Paho and Protobuf and also only uses a minimal set of Java 7 functionality.&lt;&#x2F;p&gt;
&lt;p&gt;The second step was to implement the MicroEJ specific APIs and map the calls to the Kapua micro SDK, which wasn’t too difficult either. So now it is possible to simply install the “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;communitystore.microej.com&#x2F;applications&#x2F;5971f311bd78b04800bb0f08&quot;&gt;Kapua Data Channel Provider&lt;&#x2F;a&gt;” from the MicroEJ Community Store. Alternatively you can compile the sources yourself as the code for this adapter is also on GitHub. Once the data channel provider is installed you can fire up any application consuming the DataChannel API, like the “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;communitystore.microej.com&#x2F;applications&#x2F;5943d714c38b7a4200d2e74d&quot;&gt;Thermocloud&lt;&#x2F;a&gt;” application, and publish data to Kapua. Please be sure to follow the installation instructions on the Kapua data channel provider for configuring the connection to your Kapua instance.&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;20170802_131244_small.jpg&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;20170802_131244_small-1024x702.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figcaption &gt;Kapua Data Channel Provider&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kapua-micro.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kapua-micro-1024x621.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Data from Thermocloud in Kapua&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;As the micro client is capable of running on Java 7, it might also be a choice for people wanting to connect from Android to Kapua without the need to go for Java 8. As Java 8 on Android still seems to be rather painful, this could be an option.&lt;&#x2F;p&gt;
&lt;p&gt;Also see:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kapua-micro-client&quot;&gt;ctron&#x2F;kapua-micro-client&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;kapua-micro-client&quot;&gt;Kapua Micro Client&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;kapua&#x2F;tree&#x2F;develop&#x2F;client&#x2F;gateway&quot;&gt;Kapua Gateway Client SDK&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kapua-ej-data-channel&quot;&gt;ctron&#x2F;kapua-ej-data-channel&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I would like to thank Laurent and Frédéric from MicroEJ, who did help me fix all the noob-issues I had.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>AsyncAPI</title>
        <published>2017-08-08T09:12:13+02:00</published>
        <updated>2017-08-08T09:12:13+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/asyncapi/" type="text/html"/>
        <id>dentrassi.de/pages/attic/asyncapi/</id>
        <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.asyncapi.com&#x2F;&quot;&gt;AsyncAPI&lt;&#x2F;a&gt; is a way to specify messaging oriented interfaces and APIs.&lt;&#x2F;p&gt;
&lt;p&gt;This page contains a few links to Java based tools which help in using AsyncAPI.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;asyncapi&quot;&gt;ctron&#x2F;asyncapi&lt;&#x2F;a&gt; – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;asyncapi&quot;&gt;Documentation&lt;&#x2F;a&gt; – AsyncAPI model parser and source generator&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;asyncapi-maven&quot;&gt;ctron&#x2F;asyncapi-maven&lt;&#x2F;a&gt; – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;asyncapi-maven&quot;&gt;Documentation&lt;&#x2F;a&gt; – Maven Plugin&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>GSoC with Kapua – Just peeking</title>
        <published>2017-07-27T13:12:45+02:00</published>
        <updated>2017-07-27T13:12:45+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/07/27/gsoc-with-kapua-just-peeking/" type="text/html"/>
        <id>dentrassi.de/blog/2017/07/27/gsoc-with-kapua-just-peeking/</id>
        <content type="html">&lt;p&gt;The deadline for the evaluations of phase for Google Summer of Code are pretty close. So it was time to take another look at what &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arthurdeschamps&quot;&gt;Arthur&lt;&#x2F;a&gt; did with the logistics simulation for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;kapua&#x2F;&quot;&gt;Eclipse Kapua&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The first phase was focused on creating a simple logistic network simulation and pushing telemetry data to Eclipse Kapua. The data isn’t realistic and that is ok, since this never was a requirement for the simulation. The second phase was focused around creating a simple dashboard for visualizing the data generated by the simulator.&lt;&#x2F;p&gt;
&lt;p&gt;So let’s have a quick look:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kapua_sim_1-1.png&quot; alt=&quot;Kapua logistics simulator – world overview&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Kapua logistics simulator – world overview&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kapua_sim_2.png&quot; alt=&quot;Kapua logistics simulator – economic overview&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Kapua logistics simulator – economic overview&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;Now, as you can see, trains driving through oceans isn’t that realistic ;-) But we agreed on not taking things like this under consideration. Companies and locations are&lt;br &#x2F;&gt;
randomly generated and figuring out which vehicles could drive on which roads between locations would simple be too much for this project.&lt;&#x2F;p&gt;
&lt;p&gt;The dashboard component is implemented using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.dartlang.org&#x2F;&quot;&gt;Dart&lt;&#x2F;a&gt; and simply because it was considered cool ;-)&lt;&#x2F;p&gt;
&lt;p&gt;There are still a few rough edges and the next phase will be focused on cleaning things up and making it consumable by people to play around with it.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse Kapua micro client SDK</title>
        <published>2017-07-21T09:15:12+02:00</published>
        <updated>2017-07-21T09:15:12+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/kapua-micro-client/" type="text/html"/>
        <id>dentrassi.de/pages/attic/kapua-micro-client/</id>
        <content type="html">&lt;p&gt;This is a bit of information about the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;kapua&quot;&gt;Eclipse Kapua&lt;&#x2F;a&gt; micro client SDK.&lt;&#x2F;p&gt;
&lt;p&gt;The main goal of this project is to provide a client SDK for Kapua which can run with a minimal set of dependencies, even towards the JVM and JDK. It should be possible to use this SDK on something like the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;docs.oracle.com&#x2F;javame&#x2F;config&#x2F;cldc&#x2F;opt-pkgs&#x2F;api&#x2F;cldc&#x2F;api&#x2F;index.html&quot;&gt;Java CDLC 8&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;GitHub – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kapua-micro-client&quot;&gt;ctron&#x2F;kapua-micro-client&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;kapua-micro-client&#x2F;&quot;&gt;Documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Just a bit of Apache Camel</title>
        <published>2017-07-03T15:25:45+02:00</published>
        <updated>2017-07-03T15:25:45+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/07/03/just-a-bit-of-apache-camel/" type="text/html"/>
        <id>dentrassi.de/blog/2017/07/03/just-a-bit-of-apache-camel/</id>
        <content type="html">&lt;p&gt;Sometimes you write something and then you nearly forget that you did it … although it is quite handy sometimes, here are a few lines of Apache Camel XML running in Eclipse Kura:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I just wanted to publish some random data from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;kura&quot;&gt;Kura&lt;&#x2F;a&gt; to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;kapua&quot;&gt;Kapua&lt;&#x2F;a&gt;, without the need to code, deploy or build anything. Camel came to the rescue:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;camel.apache.org&#x2F;schema&#x2F;spring&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;route1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;timer:1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setBody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${bean:payloadFactory.create(&amp;quot;value&amp;quot;, ${random(100)})}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setBody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;kura-cloud:myapp&#x2F;topic&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Dropping this snippet into the default XML Camel router:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Registers a Kura application named &lt;code&gt;myapp&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Creates a random number between 0 and 100 every second&lt;&#x2F;li&gt;
&lt;li&gt;Converts this to the Kura Payload structure&lt;&#x2F;li&gt;
&lt;li&gt;And publishes it on the topic &lt;code&gt;topic&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Talking to the cloud</title>
        <published>2017-05-24T17:49:18+02:00</published>
        <updated>2017-05-24T17:49:18+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/05/24/talking-to-the-cloud/" type="text/html"/>
        <id>dentrassi.de/blog/2017/05/24/talking-to-the-cloud/</id>
        <content type="html">&lt;p&gt;While working on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;kapua&#x2F;&quot;&gt;Eclipse Kapua&lt;&#x2F;a&gt;, I wanted to do different tests, pushing telemetry data into the system. So I started to work on the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;kapua&#x2F;tree&#x2F;develop&#x2F;simulator-kura&quot;&gt;Kura simulator&lt;&#x2F;a&gt;, which can used to simulator an Eclipse Kura IoT gateway in a plain Java project, no special setup required. Now that helped a lot for unit testing and scale testing. Even &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;download.eclipse.org&#x2F;kapua&#x2F;docs&#x2F;develop&#x2F;user-manual&#x2F;en&#x2F;simulator.html&quot;&gt;generating a few simple telemetry data streams&lt;&#x2F;a&gt; for simulating data works out of the box.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;But then again I wanted to have something more lightweight and controllable. With the simulator you actually derive some a simple class and get fully controlled by the simulator framework. That may work well in some cases, but in others you may want to turn over the control to the actual application. Assume you already have a component which is “in charge” of your data, and now you want to push this into the cloud. Of course you can do this somehow, working around that. But creating a nice API for that, which is simple and easy to understand is way more fun ;-)&lt;&#x2F;p&gt;
&lt;p&gt;So here is my take on a Gateway Client API, sending IoT data to the cloud, consuming command &amp;amp; control from it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;intentions&quot;&gt;Intentions&lt;&#x2F;h3&gt;
&lt;p&gt;I wanted to have a simple API, easy to understand, readable. Preventing you from making mistakes in the first place. And if something goes wrong, it should go wrong right away. Currently we go with MQTT, but there would be an option to go with HTTP as well, or AMQP in the future. And also for MQTT we have Eclipse Paho and FUSE MQTT. Both should be available, both may have special properties, but share some common ground. So implementing new providers should be possible, while sharing code should be easy as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;example&quot;&gt;Example&lt;&#x2F;h3&gt;
&lt;p&gt;Now here is with what I came up with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Client&lt;&#x2F;span&gt;&lt;span&gt; client &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;KuraMqttProfile&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newProfile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;FuseClient&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Builder&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;accountName&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;kapua-sys&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;clientId&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;foo-bar-1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;brokerUrl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;tcp:&#x2F;&#x2F;localhost:1883&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;credentials&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;userAndPassword&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;kapua-broker&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;kapua-password&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Application&lt;&#x2F;span&gt;&lt;span&gt; application &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;buildApplication&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;app1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; subscribe to a topic
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    application.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;my&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;receiver&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Received: %s%n&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, message);
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; cache sender instance
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Sender&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;runtimeexception&amp;gt; sender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; application
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Topic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;my&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sender&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;      .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ignore&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; send
&lt;&#x2F;span&gt;&lt;span&gt;      sender.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Payload&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;counter&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looks pretty simple right? On the background the MQTT connection is managed, payload gets encoded, birth certificates get exchanges and subscriptions get managed. But still the main application is in control of the data flow.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-to-do-this-at-home&quot;&gt;How to do this at home&lt;&#x2F;h3&gt;
&lt;p&gt;If you want to have a look at the code, it is available on GitHub (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kapua-gateway-client&quot;&gt;ctron&#x2F;kapua-gateway-client&lt;&#x2F;a&gt;) and ready to consume on Maven Central (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cga%7C1%7Cg%3A%22de.dentrassi.kapua%22&quot;&gt;de.dentrassi.kapua&lt;&#x2F;a&gt;). But please be aware of the fact that this is a proof-of-concept, and may never become more than that.&lt;&#x2F;p&gt;
&lt;p&gt;Simply adding the following dependency to your project should be enough:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;de.dentrassi.kapua&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;kapua-gateway-client-provider-mqtt-fuse&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;0.2.0&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&amp;lt;!-- check for a more recent version --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this dependency you can use the example above. If you want to got for Paho instead of FUSE use &lt;code&gt;kapua-gateway-client-provider-mqtt-paho&lt;&#x2F;code&gt; instead.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;taking-for-a-test-drive&quot;&gt;Taking for a test drive&lt;&#x2F;h3&gt;
&lt;p&gt;Now taking this for a test drive as even more fun. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;smarthome&quot;&gt;Eclipse SmartHome&lt;&#x2F;a&gt; has the concept of a persistence system, where telemetry data gets stored in a time series like database. There exists a default implementation for rrdb4j. So re-implementing this interface for Kapua was quite easy and resulted in an example module which can be installed into the Karaf based OpenHAB 2 distribution with just a few commands:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;openhab&amp;gt; repo-add mvn:de.dentrassi.kapua&#x2F;karaf&#x2F;0.2.0&#x2F;xml&#x2F;features
&lt;&#x2F;span&gt;&lt;span&gt;openhab&amp;gt; feature:install eclipse-smarthome-kapua-persistence
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then you need to re-configure the component over the “Paper UI” and point it towards your Kapua setup. Maybe you will need to tweak the “kapua.persist” file in order to define what gets persisted and when. And if everything goes well, your temperate readings will get pushed from SmartHome to Kapua.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;more-information&quot;&gt;More information&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;GitHub repository – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kapua-gateway-client&quot;&gt;ctron&#x2F;kapua-gateway-client&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Search Maven Central – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cga%7C1%7Cg%3A%22de.dentrassi.kapua%22&quot;&gt;de.dentrassi.kapua&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;kapua-gateway-client&#x2F;&quot;&gt;Documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Google Summer of Code 2017 with Eclipse Kapua</title>
        <published>2017-05-08T10:18:31+02:00</published>
        <updated>2017-05-08T10:18:31+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/05/08/google-summer-of-code-2017-with-eclipse-kapua/" type="text/html"/>
        <id>dentrassi.de/blog/2017/05/08/google-summer-of-code-2017-with-eclipse-kapua/</id>
        <content type="html">&lt;p&gt;I am happy to announce that Eclipse Kapua got two slots in this year’s &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;summerofcode.withgoogle.com&#x2F;&quot;&gt;Google Summer of Code&lt;&#x2F;a&gt;. Yes, two projects got accepted, and both are for the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;kapua&#x2F;&quot;&gt;Eclipse Kapua&lt;&#x2F;a&gt; project.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.facebook.com&#x2F;AnastasiLa97&quot;&gt;Anastasiya Lazarenko&lt;&#x2F;a&gt; will provide a simulation of a fish tank and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;arthurdeschamps.github.io&#x2F;&quot;&gt;Arthur Deschamps&lt;&#x2F;a&gt; will go for a supply chain simulation. Both simulations are planned to feed in their data into &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;kapua&#x2F;&quot;&gt;Eclipse Kapua&lt;&#x2F;a&gt; using the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;kapua&#x2F;tree&#x2F;develop&#x2F;simulator-kura&quot;&gt;Kura simulator framework&lt;&#x2F;a&gt;. Although both projects seem to be quite similar from a high level perspective, I think they are quite different when it comes to the details.&lt;&#x2F;p&gt;
&lt;p&gt;The basic idea is not to provide something like a statistically&#x2F;physically&#x2F;… valid simulation, but something to play around and interact with. Spinning up a few virtual instances of both models and hooking them up to our cloud based IoT solution and interact a bit with them, getting some reasonable feedback values.&lt;&#x2F;p&gt;
&lt;p&gt;For Kapua this will definitely mean evolving the simulator framework based on the feedback from both students, making it (hopefully) easier to use for other tasks. And maybe, just maybe, we can also got for the extra mile and make the same simulations available for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;hono&#x2F;&quot;&gt;Eclipse Hono&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to read more about Anastasiya and Arthur just read through their introductions on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dev.eclipse.org&#x2F;mailman&#x2F;listinfo&#x2F;kapua-dev&quot;&gt;kapua-dev@eclipse.org&lt;&#x2F;a&gt; and give them a warm welcome:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dev.eclipse.org&#x2F;mhonarc&#x2F;lists&#x2F;kapua-dev&#x2F;msg00272.html&quot;&gt;read Anastasiya’s introduction&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dev.eclipse.org&#x2F;mhonarc&#x2F;lists&#x2F;kapua-dev&#x2F;msg00271.html&quot;&gt;read Arthur’s introduction&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Best of luck to you!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>OPC UA with Apache Camel</title>
        <published>2017-04-27T14:44:42+02:00</published>
        <updated>2017-04-27T14:44:42+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/04/27/opc-ua-with-apache-camel/" type="text/html"/>
        <id>dentrassi.de/blog/2017/04/27/opc-ua-with-apache-camel/</id>
        <content type="html">&lt;p&gt;Apache Camel 2.19.0 is close to is release and the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;OPC_Unified_Architecture&quot;&gt;OPC UA&lt;&#x2F;a&gt; component called “camel-milo” will be part of it. This is my &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;milo&quot;&gt;Eclipse Milo&lt;&#x2F;a&gt; backed component which was previously hosted in my personal GitHub repository &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.milo&quot;&gt;ctron&#x2F;de.dentrassi.camel.milo&lt;&#x2F;a&gt;. It now got accepted into Apache Camel and will be part of the 2.19.0 release. As there are already a release candidates available, I think it is a great time to give a short introduction.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;In a nutshell OPC UA is an industrial IoT communication protocol for acquiring telemetry data and command and control of industrial grade automation systems. It is also known as IEC 62541.&lt;&#x2F;p&gt;
&lt;p&gt;The Camel Milo component offers both an OPC UA client (&lt;code&gt;milo-client&lt;&#x2F;code&gt;) and server (&lt;code&gt;milo-server&lt;&#x2F;code&gt;) endpoint.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;running-an-opc-ua-server&quot;&gt;Running an OPC UA server&lt;&#x2F;h3&gt;
&lt;p&gt;The following Camel example is based on Camel Blueprint and provides some random data over OPC UA, acting as a server:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;camel_milo_ex_prj_1.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;camel_milo_ex_prj_1.png&quot; alt=&quot;Example project layout&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figcaption class=&quot;wp-caption-text&quot; id=&quot;caption-attachment-3598&quot;&gt;Example project layout&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;The blueprint configuration would be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blueprint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;www.osgi.org&#x2F;xmlns&#x2F;blueprint&#x2F;v1.0.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns:xsi&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xsi:schemaLocation&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;	http:&#x2F;&#x2F;www.osgi.org&#x2F;xmlns&#x2F;blueprint&#x2F;v1.0.0 https:&#x2F;&#x2F;osgi.org&#x2F;xmlns&#x2F;blueprint&#x2F;v1.0.0&#x2F;blueprint.xsd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;	http:&#x2F;&#x2F;camel.apache.org&#x2F;schema&#x2F;blueprint https:&#x2F;&#x2F;camel.apache.org&#x2F;schema&#x2F;blueprint&#x2F;camel-blueprint.xsd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;	&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;milo-server&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;org.apache.camel.component.milo.server.MiloServerComponent&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;property &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;enableAnonymousAuthentication&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;true&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bean&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;camelContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;camel.apache.org&#x2F;schema&#x2F;blueprint&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;timer:test&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setBody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;random(0,100)&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setBody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;milo-server:test-item&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;camelContext&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blueprint&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And adding the following Maven build configuration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns:xsi&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xsi:schemaLocation&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modelVersion&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;4.0.0&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;modelVersion&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;de.dentrassi.camel.milo&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;example1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;0.0.1-SNAPSHOT&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;packaging&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;bundle&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;packaging&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project.build.sourceEncoding&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;UTF-8&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project.build.sourceEncoding&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;camel.version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;2.19.0&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;camel.version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;ch.qos.logback&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;logback-classic&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.2.1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.apache.camel&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;camel-core-osgi&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${camel.version}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.apache.camel&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;camel-milo&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${camel.version}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugins&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.apache.felix&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;maven-bundle-plugin&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;3.3.0&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;extensions&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;true&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;extensions&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.apache.camel&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;camel-maven-plugin&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;				&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${camel.version}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugins&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows you to simply run the OPC UA server with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mvn&lt;&#x2F;span&gt;&lt;span&gt; package camel:run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Afterwards you can connect with the OPC UA client of your choice and subscribe to the item &lt;code&gt;test-item&lt;&#x2F;code&gt;, receiving that random number.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;release-candidate&quot;&gt;Release candidate&lt;&#x2F;h3&gt;
&lt;p&gt;As this is currently the release candidate of Camel 2.19.0, it is necessary to add the release candidate Maven repository to the &lt;code&gt;pom.xml&lt;&#x2F;code&gt;. I did omit&lt;br &#x2F;&gt;
this in the example above, as this will no longer be necessary when Camel 2.19.0 is released:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;repositories&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;repository&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;camel&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;https:&#x2F;&#x2F;repository.apache.org&#x2F;content&#x2F;repositories&#x2F;orgapachecamel-1073&#x2F;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;repository&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;repositories&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pluginRepositories&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pluginRepository&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;camel&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;https:&#x2F;&#x2F;repository.apache.org&#x2F;content&#x2F;repositories&#x2F;orgapachecamel-1073&#x2F;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pluginRepository&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;pluginRepositories&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It may also be that the URLs (marked above) will change as a new release candidate gets built. In this case it is necessary that you update the URLs to the appropriate&lt;br &#x2F;&gt;
repository URL.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-s-next&quot;&gt;What’s next?&lt;&#x2F;h3&gt;
&lt;p&gt;Once Camel 2.19.0 is released, I will also mark my old, personal GitHub repository as deprecated and point people towards this new component.&lt;&#x2F;p&gt;
&lt;p&gt;And of course I am happy to get some feedback and suggestions.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Simulating telemetry streams with Kapua and OpenShift</title>
        <published>2017-04-05T16:30:44+02:00</published>
        <updated>2017-04-05T16:30:44+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/04/05/simulating-telemetry-streams-with-kapua-and-openshift/" type="text/html"/>
        <id>dentrassi.de/blog/2017/04/05/simulating-telemetry-streams-with-kapua-and-openshift/</id>
        <content type="html">&lt;p&gt;Sometimes it is necessary to have some simulated data instead of fancy sensors attached to your IoT setup. As Eclipse Kapua starts to adopt Elasticsearch, it started to seem necessary to actually unit test the inbound telemetry stream of Kapua. Data coming from the gateway, being processed by Kapua, then stored into Elasticsearch and then retrieved back from Elasticsearch over the Kapua REST API. A lot can go wrong here ;-)&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;kapua&#x2F;tree&#x2F;develop&#x2F;simulator-kura&quot;&gt;The Kura simulator&lt;&#x2F;a&gt;, which is now hosted in the Kapua repository, seemed to be right place to do this. That way we can not only test this inside Kapua, but we can also allow different use cases for simulating data streams outside of unit tests and we can leverage the existing &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;kapua&#x2F;tree&#x2F;develop&#x2F;simulator-kura&#x2F;openshift&quot;&gt;OpenShift integration of the Kura Simulator&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The Kura simulator has the ability now to also send telemetry data. In addition to that there is a rather simple simulation model which can use existing value generators and map those to a more complex metric setup.&lt;&#x2F;p&gt;
&lt;p&gt;From a programmatic perspective creating a simple telemetry stream would look this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GatewayConfiguration&lt;&#x2F;span&gt;&lt;span&gt; configuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GatewayConfiguration&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;tcp:&#x2F;&#x2F;kapua-broker:kapua-password@localhost:1883&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;kapua-sys&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sim-1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GeneratorScheduler&lt;&#x2F;span&gt;&lt;span&gt; scheduler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GeneratorScheduler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Duration&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ofSeconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; apps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  apps.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simpleDataApplication&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;data-1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, scheduler, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sine&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sine&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ofSeconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)));
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MqttAsyncTransport&lt;&#x2F;span&gt;&lt;span&gt; transport &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MqttAsyncTransport&lt;&#x2F;span&gt;&lt;span&gt;(configuration);
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Simulator&lt;&#x2F;span&gt;&lt;span&gt; simulator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Simulator&lt;&#x2F;span&gt;&lt;span&gt;(configuration, transport, apps);) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MAX_VALUE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Generators.simpleDataApplication&lt;&#x2F;code&gt; creates a new &lt;code&gt;Application&lt;&#x2F;code&gt; from the provided map of functions (&lt;code&gt;Map&amp;lt;String,Function&amp;lt;Instant,?&amp;gt;&amp;gt;&lt;&#x2F;code&gt;). This is a very simple application, which reports a single metric on a single topic. The &lt;code&gt;Generators.sine&lt;&#x2F;code&gt; function returns a function which creates a sine curve using the provided parameters.&lt;&#x2F;p&gt;
&lt;p&gt;Now one might ask, why is this a &lt;code&gt;Function&amp;lt;Instant,?&amp;gt;&lt;&#x2F;code&gt;, wouldn’t a simple &lt;code&gt;Supplier&lt;&#x2F;code&gt; be enough? There is a good reason for that. The expectation of the data simulator is actually that the telemetry data is derived from the provided timestamp. This is done in order to generate predictable timestamp and values along the communication path. In this example we only have a single metric in a single instance. But it is possible to scale up the simulation to run 100 instances on 100 pods in OpenShift. In this case each simulation step in one JVM would receive the same timestamp and this each of those 100 instances should generate the same values. Sending the same timestamps upwards to Kapua. Now validating this information later on because quite easy, as you not only can measure the time delay of the transmission, but also check if there are inconsistencies in the data, gaps or other issues.&lt;&#x2F;p&gt;
&lt;p&gt;When using the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;download.eclipse.org&#x2F;kapua&#x2F;docs&#x2F;develop&#x2F;user-manual&#x2F;en&#x2F;simulator.html&quot;&gt;SimulationRunner&lt;&#x2F;a&gt;, it is possible to configure data generators instead of coding:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;applications&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;example1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;scheduler&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;period&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1000 &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;topics&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;t1&#x2F;data&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;positionGenerator&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;spos&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;metrics&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;temp1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generator&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sine1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;value&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;temp2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generator&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sine2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;value&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;t2&#x2F;data&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;metrics&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;temp1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generator&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sine1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;value&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;temp2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generator&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sine2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;value&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;   },
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;generators&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sine1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sine&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;period&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;60000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;offset&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;amplitude&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sine2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sine&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;period&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;120000&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;shift&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;45.5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;offset&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;amplitude&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;100
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;spos&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;spos&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more details about this model see: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;download.eclipse.org&#x2F;kapua&#x2F;docs&#x2F;develop&#x2F;user-manual&#x2F;en&#x2F;simulator.html#simple-simulation-model&quot;&gt;Simple simulation model&lt;&#x2F;a&gt; in the Kapua User Manual.&lt;&#x2F;p&gt;
&lt;p&gt;And of course this can also be managed with the OpenShift setup. Loading a JSON file works like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;oc&lt;&#x2F;span&gt;&lt;span&gt; create configmap data-simulator-config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --from-file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;KSIM_SIMULATION_CONFIGURATION=..&#x2F;src&#x2F;test&#x2F;resources&#x2F;example1.json
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;oc&lt;&#x2F;span&gt;&lt;span&gt; set env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;configmap&#x2F;data-simulator-config dc&#x2F;simulator
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally it is now possible to visually inspect this data with Grafana, directly accessing the Elasticsearch storage:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;grafana1.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;grafana1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Developing for Eclipse Kura on Windows</title>
        <published>2017-03-21T16:54:58+01:00</published>
        <updated>2017-03-21T16:54:58+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/03/21/developing-for-eclipse-kura-on-windows/" type="text/html"/>
        <id>dentrassi.de/blog/2017/03/21/developing-for-eclipse-kura-on-windows/</id>
        <content type="html">&lt;p&gt;Every now and then it is fun to leave the environment you are used to and do something completely different. So this journey take me to IntelliJ and Windows 10. And yes, I am glad to be back in Linux&#x2F;Eclipse-land. But still, I think something rather interesting came out of this.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;It all started when I helped my colleague &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.linkedin.com&#x2F;in&#x2F;aurelienpupier&#x2F;&quot;&gt;Aurélien Pupier&lt;&#x2F;a&gt; to get his environment ready for his talk at the Eclipse IoT day Grenoble. If you missed this talk, you can &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gricad.univ-grenoble-alpes.fr&#x2F;video&#x2F;integration-apache-camel-eclipse-kura&quot;&gt;watch a recording of it&lt;&#x2F;a&gt;. He wanted to present the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tools.jboss.org&#x2F;features&#x2F;apachecamel.html&quot;&gt;Camel Developer Tools&lt;&#x2F;a&gt;. The &lt;q&gt;problem&lt;&#x2F;q&gt; was the he was working on a Windows laptop. And he wanted to demonstrate &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;kura&quot;&gt;Eclipse Kura&lt;&#x2F;a&gt; in combination JBoss Tools IDE. However Kura can only run on Linux and he wanted to run the JBoss Tools native on his Windows machine.&lt;&#x2F;p&gt;
&lt;p&gt;Of course you could come up with some sort of Virtual Machine setup, but we wanted something which was easier to re-produce in the case there would be some issue with the laptop for the presentation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;creating-a-docker-image-of-kura&quot;&gt;Creating a docker image of Kura&lt;&#x2F;h3&gt;
&lt;p&gt;The first step was to create a docker image of Kura. Currently Kura doesn’t offer any support for Docker. So that had to be created from scratch. As there is even no &lt;tt&gt;x86_64&lt;&#x2F;tt&gt; distribution of Kura and no emulator distribution, it was necessary to do some rather unusual hacks. The background is, that Kura has a rather crude build system which assembles a few distributions in the end of the build. Kura also requires some hardware interfaces in order to work properly. For those hardware interfaces there exist &lt;q&gt;emulator&lt;&#x2F;q&gt; replacements for using in a local developer setup. However there is neither a distribution assembly for &lt;tt&gt;x86_64&lt;&#x2F;tt&gt; nor one using the emulator replacements. The whole build system in the end is focused around creating Linux-only images. The solution was to simply rip out all functionality which was &lt;q&gt;in the way&lt;&#x2F;q&gt; and create a patch file.&lt;&#x2F;p&gt;
&lt;p&gt;This patch file and the docker build instructions are now located at a different repository where I can easily modify those and hook it up to the DockerHub build system: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura-emulator&quot;&gt;ctron&#x2F;kura-emulator&lt;&#x2F;a&gt;. Currently there are three tags for docker images in the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;ctron&#x2F;kura-emulator&#x2F;tags&#x2F;&quot;&gt;Kura Emulator DockerHub repository&lt;&#x2F;a&gt;: latest (which is the most recent, but stable release), 3.0.0-RC1 and develop (most recent, less stable). As there is currently no released version of Kura 3.0.0, the latest tag is also using the &lt;tt&gt;develop&lt;&#x2F;tt&gt; branch of Kura. The &lt;tt&gt;3.0.0-RC1&lt;&#x2F;tt&gt; tag is a stable version of the emulator which is known to work and won’t be updated in the future.&lt;&#x2F;p&gt;
&lt;p&gt;There is a more detailed &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura-emulator&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;README file&lt;&#x2F;a&gt; in the GitHub repository which explains how to use and build the emulator yourself. In a nutshell you can start it with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -ti -p&lt;&#x2F;span&gt;&lt;span&gt; 8080:8080 ctron&#x2F;kura-emulator
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And afterwards you can navigate with your browser to http:&#x2F;&#x2F;localhost:8080 and use the Kura Web UI.&lt;&#x2F;p&gt;
&lt;p&gt;As Docker is also available for Windows, this will work the same way on either Linux or Windows, and although I didn’t test it, it should also work on Mac OS X.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jmx-debugging&quot;&gt;JMX &amp;amp; Debugging&lt;&#x2F;h3&gt;
&lt;p&gt;As the Camel tooling makes use of JMX, it was necessary to also enable JMX support for Kura, which normally is not available with Kura. By setting the &lt;code&gt;JAVA_OPTS&lt;&#x2F;code&gt; environment variable it is not only possible to enable JMX, but also to enable plain Java debugging for the docker image. Of course you will need to publish the selected ports with &lt;code&gt;-p&lt;&#x2F;code&gt; when running the docker image. And for Windows you cannot simply use &lt;tt&gt;localhost&lt;&#x2F;tt&gt; but you will need to use the IP addresses created by docker for windows: also see &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura-emulator&#x2F;blob&#x2F;master&#x2F;README.md#running-with-jmx-enabled&quot;&gt;README.md&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;drop-in-activate&quot;&gt;Drop in &amp;amp; activate&lt;&#x2F;h3&gt;
&lt;p&gt;After the conference was over, I started to think about what we actually had achieved by doing all this. We had a read-to-run Kura image, dockerized, capable of running of Windows (with docker), debuggable. The only part which was still missing was the ability to add a new, custom bundle to the emulator.&lt;&#x2F;p&gt;
&lt;p&gt;Apache Felix File Install to the rescue! In the past I created an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;kura-addons&#x2F;#apache-file-install&quot;&gt;Apache Felix File Install DP&lt;&#x2F;a&gt; for Kura (DP = deployment package for Kura). File Install works in a way that it monitors a directory and automatically loads, unloads and updates an OSGi JAR file which you drop into this directory. The DP can simply be dropped into Kura, which extends Kura with this File Install functionality.&lt;&#x2F;p&gt;
&lt;p&gt;So I pre-seeded the Kura docker image with the File Install DP and declared a volume mount, so that you can simply mount a path of the docker image onto your host system. Dropping a file into the directory on the host system will make it available to the docker container and File Install will automatically pick it up and start it, but inside the docker container.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -ti -p&lt;&#x2F;span&gt;&lt;span&gt; 8080:8080&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -v&lt;&#x2F;span&gt;&lt;span&gt; c:&#x2F;path&#x2F;to&#x2F;bundles:&#x2F;opt&#x2F;eclipse&#x2F;kura&#x2F;load ctron&#x2F;kura-emulator
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And this even works with Docker for Windows, if you share your drive first:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_docker_win_1.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_docker_win_1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Share drive with Docker&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;h3 id=&quot;choose-your-tools&quot;&gt;Choose your tools&lt;&#x2F;h3&gt;
&lt;p&gt;Currently Kura requires you to use a rather complicated setup for developing applications for Kura. You will need to learn about Eclipse PDE, target platforms, Tycho for Maven and bunch of other things to get your Kura application developed, built and packaged.&lt;&#x2F;p&gt;
&lt;p&gt;I already created a GitHub repository for showing a different way to develop Kura applications: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura-examples&quot;&gt;ctron&#x2F;kura-examples&lt;&#x2F;a&gt;. Those project use plain maven, the &lt;code&gt;maven-bundle-plugin&lt;&#x2F;code&gt; and my &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;osgi-dp&#x2F;&quot;&gt;osgi-dp&lt;&#x2F;a&gt; plugin to create the final DP. Those examples also make use of the newer OSGi annotations instead of requiring your to craft all OSGi metadata by hand.&lt;&#x2F;p&gt;
&lt;p&gt;So if you wanted, you could already use your favorite IDE and start developing Kura application with style. But in order to run them, you still needed a Kura device. But with this docker image you can now simply let the emulator run and let File Install pick up the compiled results:&lt;&#x2F;p&gt;
&lt;style&gt;
			#gallery-3 {
				margin: auto;
			}
			#gallery-3 .gallery-item {
				float: left;
				margin-top: 10px;
				text-align: center;
				width: 33%;
			}
			#gallery-3 img {
				border: 2px solid #cfcfcf;
			}
			#gallery-3 .gallery-caption {
				margin-left: 0;
			}
			&#x2F;* see gallery_shortcode() in wp-includes&#x2F;media.php *&#x2F;
		&lt;&#x2F;style&gt;&lt;div class=&quot;gallery galleryid-3555 gallery-columns-3 gallery-size-thumbnail&quot; id=&quot;gallery-3&quot;&gt;&lt;dl class=&quot;gallery-item&quot;&gt; &lt;dt class=&quot;gallery-icon landscape&quot;&gt; [![](https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_docker_win_2-150x150.png)](https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_docker_win_2.png) &lt;&#x2F;dt&gt; &lt;dd class=&quot;wp-caption-text gallery-caption&quot; id=&quot;gallery-3-3566&quot;&gt; Start docker container &lt;&#x2F;dd&gt;&lt;&#x2F;dl&gt;&lt;dl class=&quot;gallery-item&quot;&gt; &lt;dt class=&quot;gallery-icon landscape&quot;&gt; [![](https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_docker_win_3-150x150.png)](https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_docker_win_3.png) &lt;&#x2F;dt&gt; &lt;dd class=&quot;wp-caption-text gallery-caption&quot; id=&quot;gallery-3-3567&quot;&gt; Deploy application &lt;&#x2F;dd&gt;&lt;&#x2F;dl&gt;&lt;dl class=&quot;gallery-item&quot;&gt; &lt;dt class=&quot;gallery-icon landscape&quot;&gt; [![](https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_docker_win_4-150x150.png)](https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_docker_win_4.png) &lt;&#x2F;dt&gt; &lt;dd class=&quot;wp-caption-text gallery-caption&quot; id=&quot;gallery-3-3568&quot;&gt; Application is activated &lt;&#x2F;dd&gt;&lt;&#x2F;dl&gt;  
&lt;&#x2F;div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_docker_win_2.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Start docker container&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_docker_win_3.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Deploy application&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_docker_win_4.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Application is activated&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h3&gt;
&lt;p&gt;So yes, it is possible to use IntelliJ on Windows to develop and debug your Kura application, in a stylish fashion. Or you can simply do the same, just using an excellent IDE like Eclipse and an awesome operating system like Linux, with the same stylish approach ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>IEC 60870-5-104 with Apache Camel</title>
        <published>2017-02-17T10:10:23+01:00</published>
        <updated>2017-02-17T10:10:23+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/02/17/iec-60870-5-104-with-apache-camel/" type="text/html"/>
        <id>dentrassi.de/blog/2017/02/17/iec-60870-5-104-with-apache-camel/</id>
        <content type="html">&lt;p&gt;Yesterday the release 0.4.0 of Eclipse NeoSCADA™ was made available. This release features a cool new feature, an IEC 60870-5-104 stack, written in Java, licensed under the EPL and available on Maven Central. See also the Eclipse Wiki: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;EclipseNeoSCADA&#x2F;Components&#x2F;IEC60870&quot;&gt;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;EclipseNeoSCADA&#x2F;Components&#x2F;IEC60870&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;So it was time to update my Apache Camel component for IEC 60870 and finally release it to Maven Central with proper dependencies on Eclipse NeoSCADA 0.4.0.&lt;&#x2F;p&gt;
&lt;p&gt;For more information about the see my page about the &lt;a href=&quot;&#x2F;camel-iec60870&quot;&gt;IEC 60870 Apache Camel component&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In a nutshell you can install it with the following commands into a running Karaf container and start using it with Apache Camel:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;feature:repo-add mvn:org.apache.camel.karaf&#x2F;apache-camel&#x2F;2.18.0&#x2F;xml&#x2F;features
&lt;&#x2F;span&gt;&lt;span&gt;feature:repo-add mvn:de.dentrassi.camel.iec60870&#x2F;feature&#x2F;0.1.1&#x2F;xml&#x2F;features
&lt;&#x2F;span&gt;&lt;span&gt;feature:install camel-iec60870
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But of course it can also be used outside of OSGi. In a standalone Java application or in the various other ways you can use Apache Camel.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Apache Camel component for IEC 60870</title>
        <published>2017-02-17T08:40:23+01:00</published>
        <updated>2017-02-17T08:40:23+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/camel-iec60870/" type="text/html"/>
        <id>dentrassi.de/pages/attic/camel-iec60870/</id>
        <content type="html">&lt;p&gt;&lt;strong&gt;GitHub:&lt;&#x2F;strong&gt; &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.iec60870&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.iec60870&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h4 id=&quot;documentation&quot;&gt;Documentation&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.iec60870&#x2F;blob&#x2F;master&#x2F;camel-iec60870&#x2F;src&#x2F;main&#x2F;docs&#x2F;iec60870-client.adoc&quot;&gt;Client endpoint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.iec60870&#x2F;blob&#x2F;master&#x2F;camel-iec60870&#x2F;src&#x2F;main&#x2F;docs&#x2F;iec60870-server.adoc&quot;&gt;Server endpoint&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also see the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;EclipseNeoSCADA&#x2F;Components&#x2F;IEC60870&quot;&gt;Eclipse NeoSCADA wiki&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;maven-coordinates&quot;&gt;Maven coordinates&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;pre class=&amp;quot;lang:xhtml&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dependency&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;groupid&amp;gt;de.dentrassi.camel&amp;lt;&#x2F;groupid&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;artifactid&amp;gt;de.dentrassi.camel.iec60870&amp;lt;&#x2F;artifactid&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;version&amp;gt;&amp;lt;&#x2F;version&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;dependency&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Testing Kapua with simulated Kura gateways</title>
        <published>2017-02-14T15:01:12+01:00</published>
        <updated>2017-02-14T15:01:12+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/02/14/testing-kapua-with-simulated-kura-gateways/" type="text/html"/>
        <id>dentrassi.de/blog/2017/02/14/testing-kapua-with-simulated-kura-gateways/</id>
        <content type="html">&lt;p&gt;Now you got your pretty new OpenShift setup of Eclipse Kapua and want to give your IoT cloud a test run?! Testing it out with 100 devices, just for fun? Or even more? But you are too lazy to flash 1000 SD cards for your Raspberry Pi cluster? Here comes the Kura simulator framework. ;-)&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;In order to provide some automatic testing for Kapua I started working on a simulator framework which does simulate Kura instances completely in Java. No backend needed, no hardware needed, able to run multiple instances in a single JVM. And all hosted on GitHub at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura-simulator&quot;&gt;ctron&#x2F;kura-simulator&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kapua_sim_1.png&quot; alt=&quot;A screenshot of Kura simulator instances in Kapua&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption &gt;Kura simulator instances in Kapua&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;The basic idea was to create a set of classes which can be used in automated unit tests in order to simulate a Kura gateway, but allow for a finer grained control over it for testing the good, the bad and the ugly. A real Kura instance would of course be a more realistic test partner, but then again this would have quite a few drawbacks. First of all, Kura cannot be embedded into a unit or integration test. It has far too many dependencies to directory structures, command line utilities, native libraries and it would also require an OSGi container to be started. Second, Kura would always behave like Kura. Now for some tests this may be fine, but if you want to test corner cases where the gateway responds in a way which is not expected by Kapua, then this cannot be done with Kura.&lt;&#x2F;p&gt;
&lt;p&gt;So running a single Kura simulator can be as easy as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ScheduledExecutorService&lt;&#x2F;span&gt;&lt;span&gt; downloadExecutor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= 
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Executors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newSingleThreadScheduledExecutor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NameThreadFactory&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;DownloadSimulator&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GatewayConfiguration&lt;&#x2F;span&gt;&lt;span&gt; configuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GatewayConfiguration&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;tcp:&#x2F;&#x2F;kapua-broker:kapua-password@localhost:1883&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;kapua-sys&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;sim-1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Application&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; apps &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;apps.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SimpleCommandApplication&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Command &amp;#39;%s&amp;#39; not found&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, s)));
&lt;&#x2F;span&gt;&lt;span&gt;apps.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AnnotatedApplication&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SimpleDeployApplication&lt;&#x2F;span&gt;&lt;span&gt;(downloadExecutor)));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MqttSimulatorTransport&lt;&#x2F;span&gt;&lt;span&gt; transport &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MqttSimulatorTransport&lt;&#x2F;span&gt;&lt;span&gt;(configuration);
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Simulator&lt;&#x2F;span&gt;&lt;span&gt; simulator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Simulator&lt;&#x2F;span&gt;&lt;span&gt;(configuration, transport, apps);) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Long&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MAX_VALUE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Bye bye...&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;finally &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  downloadExecutor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shutdown&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course, scaling this up and running a few more instances of this isn’t a big deal either. Running this in a docker container and scaling this up even more with OpenShift works fine as well. So testing any number of Gateways just became a lot easier.&lt;&#x2F;p&gt;
&lt;p&gt;Currently the simulator can emulate the command service (V1) and most of the deploy service (V2). The configuration service is still missing, but should get implemented in the next few days. Of course it is also possible to register a custom application and provide some metrics yourself.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Camel and IEC 60870-5-104</title>
        <published>2017-01-24T00:07:20+01:00</published>
        <updated>2017-01-24T00:07:20+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/01/24/camel-and-iec-60870-5-104/" type="text/html"/>
        <id>dentrassi.de/blog/2017/01/24/camel-and-iec-60870-5-104/</id>
        <content type="html">&lt;p&gt;With the upcoming release 0.4.0 of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;eclipsescada&quot;&gt;Eclipse NeoSCADA™&lt;&#x2F;a&gt;, the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;IEC_60870-5&quot;&gt;IEC 60870-5-105&lt;&#x2F;a&gt; implementation will finally make its way back into NeoSCADA. This will allow me to finally release the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.iec60870&quot;&gt;IEC 60870 component Apache Camel&lt;&#x2F;a&gt; to Maven Central.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The Camel components for IEC 60870 are based on the NeoSCADA implementation and provide both client and server side of the protocol. Although the implementation of IEC 60870 does not implement all message types defined, all relevant types for data transmission and control are implementation and other modules can be added by an extensible mechanism, using the core layers of the protocol.&lt;&#x2F;p&gt;
&lt;p&gt;For Camel there are two endpoint types &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.iec60870&#x2F;blob&#x2F;master&#x2F;camel-iec60870&#x2F;src&#x2F;main&#x2F;docs&#x2F;iec60870-server.adoc&quot;&gt;iec60870-server&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.iec60870&#x2F;blob&#x2F;master&#x2F;camel-iec60870&#x2F;src&#x2F;main&#x2F;docs&#x2F;iec60870-client.adoc&quot;&gt;iec60870-client&lt;&#x2F;a&gt;. These allow either to offer data as IEC 60870 or to actively request data from another 60870 server.&lt;&#x2F;p&gt;
&lt;p&gt;The client component will open a connection to the remote station and initiate the data transmission. 60780 will then send updates for all addresses but the Camel component will only forward events to connected endpoints. When the connection breaks, it will be periodically tried to re-establish the connection. All event coming from the IEC connection can of course be processed with Camel.&lt;&#x2F;p&gt;
&lt;p&gt;For the server side the Camel component will hold an intern data model which can be filled using the Camel routes. In internal state will then be published to IEC clients connecting to the server instance. It also allows the use of background transmission or batching of events when required.&lt;&#x2F;p&gt;
&lt;p&gt;Now what can you actually do with IEC 60870 and Apache Camel? Well, to be honest, if you never have heard about IEC 60870 and don’t have a proper use case or specific requirement for it, then you should probably look for something different to play with ;-) IEC 60870 is used to remotely control and monitor electrical systems and power control systems (see &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;IEC_60870-5&quot;&gt;Wikipedia page about IEC 60870-5&lt;&#x2F;a&gt;). On the other hand, if you do want to use 60870, then the Apache Camel component can make it pretty easy to provide a data over the IEC protocol or get data out of an 60870 based system.&lt;&#x2F;p&gt;
&lt;p&gt;As routing data with Camel is easy, you can for example create a very simple Mock device in a Raspberry Pi for testing your system with an IEC component. And you can do all of this with pure open source (EPL licensed) software. You can also extract data out of your application and offer it towards another system, which explicitly requires a transmission based on IEC 60870.&lt;&#x2F;p&gt;
&lt;p&gt;When the component will be released on the next few weeks I will hopefully find the time to provide some example, showing what you can do with IEC 60870 and Apache Camel.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Released version 0.1.0 of OPC UA component for Camel</title>
        <published>2017-01-11T15:55:03+01:00</published>
        <updated>2017-01-11T15:55:03+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2017/01/11/released-version-0-1-0-of-opc-ua-component-for-camel/" type="text/html"/>
        <id>dentrassi.de/blog/2017/01/11/released-version-0-1-0-of-opc-ua-component-for-camel/</id>
        <content type="html">&lt;p&gt;After &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eclipse.org&#x2F;milo&quot;&gt;Eclipse Milo™&lt;&#x2F;a&gt; 0.1.0 was released a few days back and is available on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cga%7C1%7Cg%3A%22org.eclipse.milo%22&quot;&gt;Maven Central&lt;&#x2F;a&gt; since this week it was time to update my &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;camel-milo&#x2F;&quot;&gt;OPC UA component for Apache Camel&lt;&#x2F;a&gt; to use the release version of Milo:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;blockquote&gt;
&lt;p&gt;Finally! :-) &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;eclipse&quot;&gt;@Eclipse&lt;&#x2F;a&gt; &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;Milo?src=hash&quot;&gt;#Milo&lt;&#x2F;a&gt; 0.1.0 is released and on Maven Central! Super Awesome!! &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;kevinherron&quot;&gt;@kevinherron&lt;&#x2F;a&gt; &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;EclipseIoT&quot;&gt;@EclipseIoT&lt;&#x2F;a&gt; &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;t.co&#x2F;nRdSx66B34&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;nRdSx66B34&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;cite&gt;Jens Reimann (@ctron) &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ctron&#x2F;status&#x2F;818863065630384128&quot;&gt;January 10, 2017&lt;&#x2F;a&gt;&lt;&#x2F;cite&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;script async=&quot;&quot; charset=&quot;utf-8&quot; src=&quot;&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;This means that there is now a released version of, available on Maven Central as well, of the Apache Camel Milo component which can either be used standalone or dropped in directly to some OSGi container like &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;Apache%20Karaf&quot;&gt;Apache Karaf&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;the-basics&quot;&gt;The basics&lt;&#x2F;h4&gt;
&lt;p&gt;The component is available from Maven Central under the group ID &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cga%7C1%7Cg%3A%22de.dentrassi.camel.milo%22&quot;&gt;de.dentrassi.camel.milo&lt;&#x2F;a&gt; and the source code is available on GitHub: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.milo&quot;&gt;ctron&#x2F;de.dentrassi.camel.milo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For more details also see: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;camel-milo&#x2F;&quot;&gt;Apache Camel component for OPC UA&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you want to use is as a dependency use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupid&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;de.dentrassi.camel.milo&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupid&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactid&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;camel-milo&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactid&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;0.1.0&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or for the Apache Karaf feature:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;mvn:de.dentrassi.camel.milo&#x2F;feature&#x2F;0.1.0&#x2F;xml&#x2F;features
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;plain-java&quot;&gt;Plain Java&lt;&#x2F;h4&gt;
&lt;p&gt;If you want to have a quick example you can clone the GitHub repository and simply compile and run an example using the following commands:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.milo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; de.dentrassi.camel.milo&#x2F;examples&#x2F;milo-example1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mvn&lt;&#x2F;span&gt;&lt;span&gt; camel:run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will compile and run a simple example which transfers all temperate measurements from the &lt;code&gt;iot.eclipse.org&lt;&#x2F;code&gt; MQTT server from the topic &lt;code&gt;javaonedemo&#x2F;eclipse-greenhouse-9home&#x2F;sensors&#x2F;temperature&lt;&#x2F;code&gt; to the OPC UA tag &lt;code&gt;item-GreenHouse.Temperature&lt;&#x2F;code&gt;, namespace &lt;code&gt;urn:org:apache:camel&lt;&#x2F;code&gt; on the connection &lt;code&gt;opc.tcp:&#x2F;&#x2F;localhost:12685&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The project is a simple OSGi Blueprint bundle which can be also be run by Apache Camel directly. The only configuration is the blueprint file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blueprint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;www.osgi.org&#x2F;xmlns&#x2F;blueprint&#x2F;v1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;milo-server&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;org.apache.camel.component.milo.server.MiloServerComponent&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;property &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;enableAnonymousAuthentication&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;true&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bean&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;camelContext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;camel.apache.org&#x2F;schema&#x2F;blueprint&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;milo1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;paho:javaonedemo&#x2F;eclipse-greenhouse-9home&#x2F;sensors&#x2F;temperature?brokerUrl=tcp:&#x2F;&#x2F;iot.eclipse.org:1883&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;convertBodyTo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;java.lang.String&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;iot.eclipse.org - temperature: ${body}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;milo-server:GreenHouse.Temperature&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;camelContext&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;blueprint&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This configures a Camel Milo server component and routes the data from MQTT to OPC UA.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;apache-karaf&quot;&gt;Apache Karaf&lt;&#x2F;h4&gt;
&lt;p&gt;If you compile the previous example using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mvn&lt;&#x2F;span&gt;&lt;span&gt; package
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can download and start an Apache Karaf instance, add the Camel Milo component as a feature and deploy the bundle:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;feature:repo-add mvn:de.dentrassi.camel.milo&#x2F;feature&#x2F;0.1.0&#x2F;xml&#x2F;features
&lt;&#x2F;span&gt;&lt;span&gt;feature:repo-add mvn:org.apache.camel.karaf&#x2F;apache-camel&#x2F;2.18.0&#x2F;xml&#x2F;features
&lt;&#x2F;span&gt;&lt;span&gt;feature:install aries-blueprint shell-compat camel camel-blueprint camel-paho camel-milo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next step will download and install the example bundle. If you did compile this yourself, then use the&lt;br &#x2F;&gt;
path of your locally compiled JAR. Otherwise you can also use a pre-compiled example bundle:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;bundle:install -s https:&#x2F;&#x2F;dentrassi.de&#x2F;download&#x2F;camel-milo&#x2F;milo-example1-0.1.0-SNAPSHOT.jar
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To check if it works you can cannot using an OPC UA client or peek into the log file of Karaf:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;karaf&amp;gt; log:tail
&lt;&#x2F;span&gt;&lt;span&gt;2017-01-11 15:11:45,348 | INFO  | -930541343163004 | milo1  | 146 - org.apache.camel.camel-core - 2.18.0 | iot.eclipse.org - temperature: 21.19
&lt;&#x2F;span&gt;&lt;span&gt;2017-01-11 15:11:45,958 | INFO  | -930541343163004 | milo1  | 146 - org.apache.camel.camel-core - 2.18.0 | iot.eclipse.org - temperature: 21.09
&lt;&#x2F;span&gt;&lt;span&gt;2017-01-11 15:11:49,648 | INFO  | -930541343163004 | milo1  | 146 - org.apache.camel.camel-core - 2.18.0 | iot.eclipse.org - temperature: 21.19
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;fuse-tooling&quot;&gt;FUSE tooling&lt;&#x2F;h4&gt;
&lt;p&gt;If you want some more IDE integration you can quickly install the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developers.redhat.com&#x2F;products&#x2F;fuse&#x2F;get-started&#x2F;&quot;&gt;JBoss FUSE tooling&lt;&#x2F;a&gt; and connect via JMX to either the Maven controlled instance (&lt;code&gt;mvn camel:run&lt;&#x2F;code&gt;) or the Karaf instance and monitor, debug and trace the active Camel routes:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;milo_fuse.png&quot; alt=&quot;FUSE tooling with Milo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;FUSE tooling with Milo&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;h4 id=&quot;what-is-next&quot;&gt;What is next?&lt;&#x2F;h4&gt;
&lt;p&gt;For one this component will hopefully become part of Apache Camel itself. And of course there is always something to improve ;-)&lt;&#x2F;p&gt;
&lt;p&gt;I also did update the Kura Addon for Milo, which provides the Milo Camel component for Eclipse Kura 2.1.0 which was recently released. This component is now also available on Maven Central and can easily be deployed into Kura. See the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;kura-addons&#x2F;&quot;&gt;Kura Addons page&lt;&#x2F;a&gt; for more information.&lt;&#x2F;p&gt;
&lt;p&gt;Then there are a few location where I used SNAPSHOT versions of Milo and for some I did promise an update. So I will try to update as many locations as I can with links to the released version of those components.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Apache Camel component for OPC UA</title>
        <published>2017-01-11T15:35:19+01:00</published>
        <updated>2017-01-11T15:35:19+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/camel-milo/" type="text/html"/>
        <id>dentrassi.de/pages/attic/camel-milo/</id>
        <content type="html">&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; The component is part of Apache Camel since version 2.19.x. Also see: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;camel.apache.org&#x2F;components&#x2F;latest&#x2F;milo-client-component.html&quot;&gt;https:&#x2F;&#x2F;camel.apache.org&#x2F;components&#x2F;latest&#x2F;milo-client-component.html&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;camel.apache.org&#x2F;components&#x2F;latest&#x2F;milo-server-component.html&quot;&gt;https:&#x2F;&#x2F;camel.apache.org&#x2F;components&#x2F;latest&#x2F;milo-server-component.html&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Maven Group Id: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cga%7C1%7Cg%3A%22de.dentrassi.camel.milo%22&quot;&gt;de.dentrassi.camel.milo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;pre class=&amp;quot;wp-block-code&amp;quot;&amp;gt;```
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;dependency&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;groupId&amp;gt;de.dentrassi.camel.milo&amp;lt;&#x2F;groupId&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;artifactId&amp;gt;camel-milo&amp;lt;&#x2F;artifactId&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;version&amp;gt;0.1.0&amp;lt;&#x2F;version&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;dependency&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Remote managing Eclipse Kura on Apache Karaf with ECF</title>
        <published>2016-12-16T11:39:36+01:00</published>
        <updated>2016-12-16T11:39:36+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/12/16/remote-managing-eclipse-kura-on-apache-karaf-with-ecf/" type="text/html"/>
        <id>dentrassi.de/blog/2016/12/16/remote-managing-eclipse-kura-on-apache-karaf-with-ecf/</id>
        <content type="html">&lt;p&gt;To be honest, I had my troubles in the past with the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;ecf&#x2F;&quot;&gt;Eclipse Communication Framework&lt;&#x2F;a&gt; (ECF), not that it is a bad framework, but whatever I started it was complicated and never really worked for me. This story is different!&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;A few months back the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eclipse.org&#x2F;kura&quot;&gt;Eclipse Kura&lt;&#x2F;a&gt; project ran into an issue that the plugin which was being used for remote managing a Kura instance (mToolkit) from an IDE just kind of went away (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;kura&#x2F;issues&#x2F;496&quot;&gt;issue #496&lt;&#x2F;a&gt;). There is some workaround for that now, but still the problems around mToolkit still exists. Beside the fact that it is no longer maintained, it is also rather buggy. Deploying a single bundle takes about a minute for me. Of course using the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;kura-addons&#x2F;#apache-file-install&quot;&gt;Apache File Install package for Kura&lt;&#x2F;a&gt; would also help here ;-)&lt;&#x2F;p&gt;
&lt;p&gt;But having a decent IDE integration would also be awesome. So when &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.composent.com&#x2F;&quot;&gt;Scott Lewis&lt;&#x2F;a&gt; from the ECF project contacted me about that, I was ready to give it a try. Unfortunately the whole setup required more than Kura could handle at that time. But now we do have support for Java 8 in Kura and there also is some basic support for running Kura on Karaf, including a docker image with the Kura emulator running on Karaf.&lt;&#x2F;p&gt;
&lt;p&gt;So I asked Scott for some help in getting this up and running and the set of instructions was rather short. In the following examples I am assuming your are running RHEL 7, forgive me if you are not ;-)&lt;&#x2F;p&gt;
&lt;p&gt;First we need to spin up a new Kura emulator instance:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -ti --net&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;host ctron&#x2F;kura:karaf-stable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are mapping all network to the host instance, since we are using another port, which is not configured in the upstream Dockerfile. There is probably another way, but this is just a quick example.&lt;&#x2F;p&gt;
&lt;p&gt;Then, inside the Karaf instance install ECF. We configure it first to use “ecftcp” instead of MQTT. But of course you can also got with MQTT or some other adapter ECF provides:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;property -p service.exported.configs ecf.generic.server
&lt;&#x2F;span&gt;&lt;span&gt;property -p ecf.generic.server.id ecftcp:&#x2F;&#x2F;localhost:3289&#x2F;server
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;feature:repo-add http:&#x2F;&#x2F;download.eclipse.org&#x2F;rt&#x2F;ecf&#x2F;kura.20161206&#x2F;karaf4-features.xml
&lt;&#x2F;span&gt;&lt;span&gt;feature:install -v ecf-kura-karaf-bundlemgr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now Kura is read to go. Following up in the Eclipse IDE, you will need Neon running on Java 8:&lt;&#x2F;p&gt;
&lt;p&gt;Add the ECF 3.13.3 P2 repository using &lt;code&gt;http:&#x2F;&#x2F;download.eclipse.org&#x2F;rt&#x2F;ecf&#x2F;3.13.3&#x2F;site.p2&lt;&#x2F;code&gt; and install the following components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ECF Remote Services SDK&lt;&#x2F;li&gt;
&lt;li&gt;ECF SDK for Eclipse&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Next install the preview components for managing Karaf with ECF. Please note, those components are previews and may or may not be release at some point in the future. Add the following P2 repository: &lt;code&gt;http:&#x2F;&#x2F;download.eclipse.org&#x2F;rt&#x2F;ecf&#x2F;kura.20161206&#x2F;eclipseui&lt;&#x2F;code&gt; and install the following components (disable &lt;q&gt;Group Items by Category&lt;&#x2F;q&gt;):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Remote Management API&lt;&#x2F;li&gt;
&lt;li&gt;Remote Management Eclipse Consumer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now comes the fiddly part, this UI is a work in progress, and you have been warned, but it works:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Switch to the &lt;q&gt;Remote Services&lt;&#x2F;q&gt; perspective&lt;&#x2F;li&gt;
&lt;li&gt;Open a new view: Window -&amp;gt; Show View -&amp;gt; Other… – Select &lt;q&gt;Remote OSGi Bundles&lt;&#x2F;q&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Click one of the green + symbols (choose either MQTT or ECFTCP) and enter the address of your Karaf instance (&lt;code&gt;localhost&lt;&#x2F;code&gt; and &lt;code&gt;3289&lt;&#x2F;code&gt; for me)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You should already see some information about that target device now. But when you open a new view (as before) named &lt;q&gt;Karaf Features&lt;&#x2F;q&gt; you will also have the ability to tinker around with the Karaf installation.&lt;&#x2F;p&gt;
&lt;p&gt;If you just want to have a quick look, here it is:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_karaf_ecf_1.png&quot; alt=&quot;ECF connecting to Kura on Karaf&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;ECF connecting to Kura on Karaf&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;Of course you don’t need to use an IDE for managing Karaf. But having such an integration as an option, is a nice addition. And it shows how powerful a great OSGi setup can be ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Providing telemetry data with OPC UA on Eclipse Kura</title>
        <published>2016-11-24T16:00:31+01:00</published>
        <updated>2016-11-24T16:00:31+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/11/24/providing-telemetry-data-with-opc-ua-on-eclipse-kura/" type="text/html"/>
        <id>dentrassi.de/blog/2016/11/24/providing-telemetry-data-with-opc-ua-on-eclipse-kura/</id>
        <content type="html">&lt;p&gt;The upcoming version 2.1.0 of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;kura&#x2F;&quot;&gt;Eclipse Kura™&lt;&#x2F;a&gt; will feature an enhanced version of the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;camel.apache.org&#x2F;&quot;&gt;Apache Camel™&lt;&#x2F;a&gt; integration which was introduced in Kura 2.0.0. There are various new ways on how to run Camel routes, configured either by XML routes or using the Java DSL. Apache Camel can act as a Kura application but, new in this release, there is also a way to simply configure Camel as a “cloud service”. In past releases of Kura, applications could only push data to one cloud target. The new 2.1.0 release will add the functionality of adding multiple cloud targets and one of those targets can be Apache Camel router instances.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;With Camel you can have different ways of achieving this goal, but in this post I would like to focus on the “out of the box” way, by simply configuring (not developing) a set of Camel routes, which act as cloud service. Traditional instances of cloud services in Kura are only capable of delivering data to one cloud target or subscribing to one cloud infrastructure. But using Apache Camel as a technology it is possible to connect to a bunch of technologies at the same time.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;the-setup&quot;&gt;The setup&lt;&#x2F;h4&gt;
&lt;p&gt;The setup will be a Kura instance, running a pre-release version of Kura 2.1.0. The final version should be out in a few weeks and won’t differ much from the current version. We will be configuring a new cloud service instance which takes Kura application payload data and provide it as OPC UA, using the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.milo&quot;&gt;Camel OPC UA adapter&lt;&#x2F;a&gt;. As payload provider (aka Kura application) we will be using the “Example publisher” from my &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;kura-addons&#x2F;&quot;&gt;Kura addons&lt;&#x2F;a&gt; project.&lt;&#x2F;p&gt;
&lt;p&gt;Open up the Kura Web UI, navigate to “Packages” and select “Install&#x2F;Update”. Switch to “URL” and provide the following URL:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;https:&#x2F;&#x2F;dentrassi.de&#x2F;download&#x2F;kura&#x2F;de.dentrassi.kura.addons.example.publisher_0.1.0-SNAPSHOT.dp&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt;  As an alternative you can also download the “dp” package with your desktop browser and deploy the file using the “file” upload instead of “URL”.&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_add_package.png&quot; alt=&quot;Adding packages to Kura&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Adding packages to Kura&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;The installation may take a bit and it may be necessary to press the “Refresh” button in order to see the installed package. After the packages was installed you should be able to see the service “Camel example publisher” on the left side.&lt;&#x2F;p&gt;
&lt;p&gt;Now we need to install the “Milo component for Camel”. Press “Install&#x2F;Update” again and enter the following URL:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;http:&#x2F;&#x2F;central.maven.org&#x2F;maven2&#x2F;de&#x2F;dentrassi&#x2F;kura&#x2F;addons&#x2F;de.dentrassi.kura.addons.milo&#x2F;0.2.2&#x2F;de.dentrassi.kura.addons.milo-0.2.2.dp&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This installation will take a lot longer and you will need to check again by pressing the “Refresh” button in the Web UI.&lt;&#x2F;p&gt;
&lt;p&gt;We will also need to allow TCP access to port 12685. If you have the network managed version of Kura installed switch to the UI section “Firewall” and open a new port “12685” allowing access from “0.0.0.0&#x2F;0” (Permitted Network) and press “Apply”.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;a-new-cloud-service&quot;&gt;A new cloud service&lt;&#x2F;h4&gt;
&lt;p&gt;By default the “example publisher” will publish to the default Kura cloud service instance. We will now create a new Cloud service instance and then redirect the data to OPC UA. The data will be available as an OPC UA server. OPC UA differs between client and server. And while the Camel component does provide both ways, in this case we want others to consume our data, so offering data as an OPC UA server is the way to go.&lt;&#x2F;p&gt;
&lt;p&gt;Navigate to “Cloud Services” and press the “New” button. From the list of possible providers select &lt;code&gt;org.eclipse.kura.camel.cloud.factory.CamelFactory&lt;&#x2F;code&gt;, enter a cloud service PID (e.g. &lt;code&gt;camel-opcua&lt;&#x2F;code&gt;) and press “Create”.&lt;&#x2F;p&gt;
&lt;p&gt;After the instance has been created select it and configure it with the following options:&lt;&#x2F;p&gt;
&lt;p&gt;Router XML:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;http:&#x2F;&#x2F;camel.apache.org&#x2F;schema&#x2F;spring&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;opc-ua-example&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;vm:camel:example&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${body.metrics().entrySet()}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setHeader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;headerName&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;item&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;               &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${body.key()}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setHeader&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setBody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;               &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${body.value()}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setBody&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;           &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;toD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;my-milo:${header.item}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;routes&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Initialzation Code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;var milo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span&gt;org.apache.camel.component.milo.server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MiloServerComponent&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;milo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setEnableAnonymousAuthentication&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;camelContext.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addComponent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;my-milo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, milo);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_opcua_cs.png&quot; alt=&quot;Screenshot of cloud service configuration&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;OPC UA configuration&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;h4 id=&quot;assigning-the-cloud-service&quot;&gt;Assigning the cloud service&lt;&#x2F;h4&gt;
&lt;p&gt;Now we need to configure the example publisher to actually use our new cloud service instance. Select “Camel example publisher” from the left navigation bar and enter “opcua” (or whatever PID you used before) as “Cloud Service PID”. Apply the changes.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;testing-the-result&quot;&gt;Testing the result&lt;&#x2F;h4&gt;
&lt;p&gt;First of all, if you log in into your device using SSH, you should be able to see that port 12685 is opened:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;root@raspberrypi:&#x2F;home&#x2F;pi# ss -nlt | grep 12685
&lt;&#x2F;span&gt;&lt;span&gt;LISTEN     0      128                      :::12685                   :::*     
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can connect to your device using any OPC UA explorer to the URI: &lt;code&gt;opc.tcp:&#x2F;&#x2F;&amp;lt;my-ip&amp;gt;:12685&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I am using Android and the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;play.google.com&#x2F;store&#x2F;apps&#x2F;details?id=com.prosysopc.ua.android2&quot;&gt;“ProSYS OPC UA Client”&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;d-flex&quot;&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_milo_browse.png&quot; alt=&quot;Screenshot of OPC UA client&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Screenshot of OPC UA client browsing&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;kura_milo_monitor.png&quot; alt=&quot;Screenshot of OPC UA client&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Screenshot of OPC UA client browsing&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;
&lt;h4 id=&quot;summing-it-up&quot;&gt;Summing it up&lt;&#x2F;h4&gt;
&lt;p&gt;This tutorial uses a SNAPSHOT version of Eclipse Milo. Simply due to the fact that no version of Milo is released just yet. This should change in the following weeks and my play is to update the blog post once it is available. However the functionality of Milo will not change and using the Camel component, most internals of Milo are hidden anyway.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;&#x2F;strong&gt; As Milo and the Camel Milo component are released now I did update the links.&lt;&#x2F;p&gt;
&lt;p&gt;Apache Camel on Eclipse Kura can provide a complete new way of communication. This example was a rather simple one, Camel can do a lot more when it comes to processing data. And not all real-life applications may be as easy as that. But of course the intention of this blog post was to give a quick introduction into Camel and Kura in combination. Using the Camel Java DSL or the Kura Camel programmatic API can give greater flexibility. And yet, the example shows that even with a few lines of Camel XML, amazing things can be achieved.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Dropping Apache File Install into Eclipse Kura</title>
        <published>2016-11-14T16:48:59+01:00</published>
        <updated>2016-11-14T16:48:59+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/11/14/dropping-apache-file-install-into-eclipse-kura/" type="text/html"/>
        <id>dentrassi.de/blog/2016/11/14/dropping-apache-file-install-into-eclipse-kura/</id>
        <content type="html">&lt;p&gt;Sometimes the simple things may be the most valuable. Testing with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;kura&#x2F;&quot;&gt;Eclipse Kura™&lt;&#x2F;a&gt; on a Raspberry Pi (or any other Eclipse Kura device) may be a bit tricky. Of course can use the Eclipse UI in combination with mToolkit. But if you want to edit, compile, deploy from a local desktop machine, to a Kura device, then you either need to click through the Web UI for uploading your application. But for this to work you also need to assembly a DP (distribution package).&lt;&#x2F;p&gt;
&lt;p&gt;But what if you could simply drop an OSGi bundle into a directory and let it get picked up by Kura automatically. Thanks to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;felix.apache.org&#x2F;documentation&#x2F;subprojects&#x2F;apache-felix-file-install.html&quot;&gt;Apache File Install&lt;&#x2F;a&gt;, there already is such a solution. File Install scans a folder and loads every OSGi bundle located in this folder. If a bundle is started and it gets overwritten in the file system, then File Install will reload and restart the bundle.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;So deploying and re-deploying to a Kura device is as easy a copying a file to your target with SCP (or the remote copy tool of your choice).&lt;&#x2F;p&gt;
&lt;p&gt;And installing Apache File Install into Eclipe Kura now just got a bit simpler.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;using-maven-central&quot;&gt;Using Maven Central&lt;&#x2F;h3&gt;
&lt;p&gt;Simply navigate to the &lt;q&gt;Packages&lt;&#x2F;q&gt; section of the Eclipse Kura Web UI. Press the “Install” button and choose “URL” and enter the following URL:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;de&#x2F;dentrassi&#x2F;kura&#x2F;addons&#x2F;de.dentrassi.kura.addons.utils.fileinstall&#x2F;0.1.0&#x2F;de.dentrassi.kura.addons.utils.fileinstall-0.1.0.dp&quot;&gt;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;de&#x2F;dentrassi&#x2F;kura&#x2F;addons&#x2F;de.dentrassi.kura.addons.utils.fileinstall&#x2F;0.1.0&#x2F;de.dentrassi.kura.addons.utils.fileinstall-0.1.0.dp&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After confirming using the &lt;q&gt;Submit&lt;&#x2F;q&gt; button it will take a bit and then File Install will be installed into your Kura installation. Sometimes it takes as bit longer than Kura expects and you need to reload the Web UI (Ctrl-R) until Kura has performed the installation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;using-the-eclipse-marketplace&quot;&gt;Using the Eclipse Marketplace&lt;&#x2F;h3&gt;
&lt;p&gt;Currently the Eclipse Marketplace is focused on hosting plugins for the Eclipse IDE, but this should change rather soon. But still it is possible right now to drag and drop Apache File Install into Eclipse Kura with the use of the following install button:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Drag to your running Eclipse workspace to install Apache File Install for Eclipse Kura&quot; href=&quot;http:&#x2F;&#x2F;marketplace.eclipse.org&#x2F;marketplace-client-intro?mpc_install=3160594&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;marketplace.eclipse.org&#x2F;sites&#x2F;all&#x2F;themes&#x2F;solstice&#x2F;public&#x2F;images&#x2F;marketplace&#x2F;btn-install.png&quot; alt=&quot;Drag to your running Eclipse workspace to install Apache File Install for Eclipse Kura&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Dragging this button into the Kura Web UI will bring up a confirmation dialog if you want to install the addon. After confirming it will go and fetch the DP and install Apache File Install into the running Kura instance.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;deploying-bundles&quot;&gt;Deploying bundles&lt;&#x2F;h3&gt;
&lt;p&gt;Now it is time to deploy some bundles. By default the directory where Apache File Install looks for bundles is &lt;code&gt;&#x2F;opt&#x2F;eclipse&#x2F;kura&#x2F;load&lt;&#x2F;code&gt;. At first this directory will not exist, so it has to be created. Next we simply fetch and example bundle using &lt;code&gt;wget&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;opt&#x2F;eclipse&#x2F;kura
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; load
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;wget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;download&#x2F;kura&#x2F;org.eclipse.kura.example.camel.publisher-1.0.0.jar&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is an example publisher bundle from the upcoming Kura 2.1.0 release. So if you are still using Kura 2.0, then you can either try a different OSGi bundle, or maybe give Kura 2.1 a try ;-)&lt;&#x2F;p&gt;
&lt;p&gt;Due to a regression in Kura (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;kura&#x2F;issues&#x2F;757&quot;&gt;eclipse&#x2F;kura#123&lt;&#x2F;a&gt;) there is currently no way to manually start OSGi bundles. So you need to stop Kura and start the local command console (&lt;code&gt;&#x2F;opt&#x2F;eclipse&#x2F;kura&#x2F;bin&#x2F;start_kura.sh&lt;&#x2F;code&gt;). On the OSGi shell you can then:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;osgi&amp;gt; ss example
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Framework is launched.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;id	State       Bundle
&lt;&#x2F;span&gt;&lt;span&gt;116	RESOLVED    org.eclipse.kura.example.camel.publisher_1.0.0
&lt;&#x2F;span&gt;&lt;span&gt;osgi&amp;gt; start 116
&lt;&#x2F;span&gt;&lt;span&gt;osgi&amp;gt; ss example
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Framework is launched.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;id	State       Bundle
&lt;&#x2F;span&gt;&lt;span&gt;116	ACTIVE      org.eclipse.kura.example.camel.publisher_1.0.0
&lt;&#x2F;span&gt;&lt;span&gt;osgi&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now once this initial activate has been performed, File Install and OSGi will keep the bundle active. You can re-deploy this OSGi bundle by simply copying a new version over the old one. File Install will detect the change and refresh the bundle.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;there-is-more&quot;&gt;There is more…&lt;&#x2F;h3&gt;
&lt;p&gt;Apache File Install can also update OSGi configurations and it can be configured using a set of system properties. For the full set of options check out the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;felix.apache.org&#x2F;documentation&#x2F;subprojects&#x2F;apache-felix-file-install.html&quot;&gt;Apache File Install documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse Kura™ addons</title>
        <published>2016-11-11T13:37:59+01:00</published>
        <updated>2016-11-11T13:37:59+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/kura-addons/" type="text/html"/>
        <id>dentrassi.de/pages/attic/kura-addons/</id>
        <content type="html">&lt;p&gt;This page lists a few addons I created for Eclipse Kura. Be sure to check out the GitHub repository &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura-addons&quot;&gt;ctron&#x2F;kura-addons&lt;&#x2F;a&gt; as well.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Most addons are directly available on Maven Central and&#x2F;or through the Eclipse Marketplace. For using Eclipse Marketplace just drag and drop the “Install” button onto the Eclipse Kura Web UI.&lt;&#x2F;p&gt;
&lt;p&gt;For using the Maven Central installation link, just follow click on the Maven shield, select the version to install and either download the &lt;code&gt;.dp&lt;&#x2F;code&gt; file manually and upload it to Kura, or copy the URL to the &lt;code&gt;.dp&lt;&#x2F;code&gt; artifact and past the URL in the package install dialog in the Kura Web UI.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt;  As Kura does use the DP system for deploying functionality into Kura there is no isolation between different addons. And addition DP prevents two different packages to provide the same OSGi bundle. Such an installation will simply fail. So if you drop in two conflicting DPs, then this may simply fail. The proper solution would be to create a combined DP which then does not have a duplicate bundle. But providing all combinations of the available addons is just not possible. Also this is not a fault of OSGi, it could handle this situation, it just is a limitation of the DP system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extensions&quot;&gt;Extensions&lt;&#x2F;h2&gt;
&lt;p&gt;This sections lists addons which extend the Kura base platform.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;apache-file-install&quot;&gt;Apache File Install &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cgav%7C1%7Cg%3A%22de.dentrassi.kura.addons%22%20AND%20a%3A%22de.dentrassi.kura.addons.utils.fileinstall%22&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;maven-central&#x2F;v&#x2F;de.dentrassi.kura.addons&#x2F;de.dentrassi.kura.addons.utils.fileinstall.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;This addon provides &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;felix.apache.org&#x2F;documentation&#x2F;subprojects&#x2F;apache-felix-file-install.html&quot;&gt;Apache File Install&lt;&#x2F;a&gt; for Eclipse Kura. It allows one to drop an OSGi bundle into &lt;code&gt;&#x2F;opt&#x2F;eclipse&#x2F;kura&#x2F;load&lt;&#x2F;code&gt; and it will get loaded. The bundle has to be started manually for the first time. Updating a bundle is as easy as overwriting the bundle file. Once the bundle was started manually for the first time, it will be restarted later on.&lt;br &#x2F;&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Drag to your running Eclipse Kura Web UI to install Apache File Install for Eclipse Kura&quot; href=&quot;http:&#x2F;&#x2F;marketplace.eclipse.org&#x2F;marketplace-client-intro?mpc_install=3280897&quot;&gt;&lt;br &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;marketplace.eclipse.org&#x2F;sites&#x2F;all&#x2F;themes&#x2F;solstice&#x2F;public&#x2F;images&#x2F;marketplace&#x2F;btn-install.png&quot; alt=&quot;Drag to your running Eclipse workspace to install Apache File Install for Eclipse Kura&quot; &#x2F;&gt;  &lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;jolokia-jmx-api&quot;&gt;Jolokia JMX API &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;search?q=g:de.dentrassi.kura.addons%20AND%20a:de.dentrassi.kura.addons.utils.jolokia&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;maven-central&#x2F;v&#x2F;de.dentrassi.kura.addons&#x2F;de.dentrassi.kura.addons.utils.jolokia.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The Jolokia package provides the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jolokia.org&#x2F;&quot;&gt;Jolokia JMX API&lt;&#x2F;a&gt;, and integrates with the Kura configuration mechanism in order to allow configuration of the Jolokia endpoint. The Jolokia endpoint is registered with the default HTTP server of Kura at &lt;code&gt;&#x2F;jolokia&lt;&#x2F;code&gt;. It will not allow anonymous access, so it will disable the endpoint if either user or password is empty. Also see &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;hawt.io&#x2F;&quot;&gt;hawtio&lt;&#x2F;a&gt; for a remote management console, which uses Jolokia.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;osgi-jmx-management-model-specification&quot;&gt;OSGi JMX Management Model Specification &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;search?q=g:de.dentrassi.kura.addons%20AND%20a:de.dentrassi.kura.addons.utils.jmx&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;maven-central&#x2F;v&#x2F;de.dentrassi.kura.addons&#x2F;de.dentrassi.kura.addons.utils.jmx.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The OSGi JMX Management Model Specification allows access to the OSGi framework via JMX. This may be interesting in combination with the Jolokia package, as it allows full visibility of OSGi specific information via the Jolokia remote API, and also support the hawtio OSGi extension. This way most aspects of the OSGi runtime can be monitored and managed via the hawtio console.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;activemq-artemis-broker&quot;&gt;ActiveMQ Artemis Broker&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; This addon is now an official part of Kura.&lt;&#x2F;p&gt;
&lt;p&gt;The Artemis addon provides an embedded Artemis broker instance for Kura. It can offer AMQP or MQTT at the moment.&lt;&#x2F;p&gt;
&lt;p&gt;For more information see: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura-addons&#x2F;blob&#x2F;master&#x2F;artemis&#x2F;README.md&quot;&gt;artemis&#x2F;README.md&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;camel-components&quot;&gt;Camel Components&lt;&#x2F;h2&gt;
&lt;p&gt;This section lists Apache Camel components. Please note, most bundles also bring their dependencies. So for example it is possible to use only the AMQP functionality of the AMQP addon, without using the Camel AMQP component.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;eclipse-milotm-opc-ua&quot;&gt;Eclipse Milo™ – OPC UA&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cgav%7C1%7Cg%3A%22de.dentrassi.kura.addons%22%20AND%20a%3A%22de.dentrassi.kura.addons.milo%22&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;maven-central&#x2F;v&#x2F;de.dentrassi.kura.addons&#x2F;de.dentrassi.kura.addons.milo.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;This addon provides OPC UA based on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;milo&quot;&gt;Eclipse Milo™&lt;&#x2F;a&gt;, an OPC UA stack written in Java.&lt;&#x2F;p&gt;
&lt;p&gt;It contains the core Milo components and dependencies and includes the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.milo&quot;&gt;Apache Camel Milo component&lt;&#x2F;a&gt;.&lt;br &#x2F;&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Drag to your running Eclipse Kura Web UI to install OPC UA component for Apache Camel&quot; href=&quot;http:&#x2F;&#x2F;marketplace.eclipse.org&#x2F;marketplace-client-intro?mpc_install=3276130&quot;&gt;&lt;br &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;marketplace.eclipse.org&#x2F;sites&#x2F;all&#x2F;themes&#x2F;solstice&#x2F;public&#x2F;images&#x2F;marketplace&#x2F;btn-install.png&quot; alt=&quot;Drag to your running Eclipse workspace to install OPC UA component for Apache Camel&quot; &#x2F;&gt;  &lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;amqp&quot;&gt;AMQP&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cgav%7C1%7Cg%3A%22de.dentrassi.kura.addons%22%20AND%20a%3A%22de.dentrassi.kura.addons.amqp%22&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;maven-central&#x2F;v&#x2F;de.dentrassi.kura.addons&#x2F;de.dentrassi.kura.addons.amqp.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;This addon provides AMQP by using Qpid and the accompanying Camel component &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;camel.apache.org&#x2F;amqp.html&quot;&gt;camel-amqp&lt;&#x2F;a&gt;.&lt;br &#x2F;&gt;
&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Drag to your running Eclipse Kura Web UI to install AMQP component for Apache Camel&quot; href=&quot;http:&#x2F;&#x2F;marketplace.eclipse.org&#x2F;marketplace-client-intro?mpc_install=3276138&quot;&gt;&lt;br &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;marketplace.eclipse.org&#x2F;sites&#x2F;all&#x2F;themes&#x2F;solstice&#x2F;public&#x2F;images&#x2F;marketplace&#x2F;btn-install.png&quot; alt=&quot;Drag to your running Eclipse workspace to install AMQP component for Apache Camel&quot; &#x2F;&gt;  &lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;eclipse-neoscadatm&quot;&gt;Eclipse NeoSCADA™&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cgav%7C1%7Cg%3A%22de.dentrassi.kura.addons%22%20AND%20a%3A%22de.dentrassi.kura.addons.neoscada%22&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;maven-central&#x2F;v&#x2F;de.dentrassi.kura.addons&#x2F;de.dentrassi.kura.addons.neoscada.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The NeoSCADA addon provides a Camel component for hosting a NeoSCADA server, providing data over the NeoSCADA NGP protocol. This way telemetry data can be served over the NeoSCADA APIs and for example the administrative UI based client can be used for testing and developing.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;snmp&quot;&gt;SNMP&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cgav%7C1%7Cg%3A%22de.dentrassi.kura.addons%22%20AND%20a%3A%22de.dentrassi.kura.addons.snmp%22&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;maven-central&#x2F;v&#x2F;de.dentrassi.kura.addons&#x2F;de.dentrassi.kura.addons.snmp.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;An addon which provides &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;camel.apache.org&#x2F;snmp.html&quot;&gt;camel-snmp&lt;&#x2F;a&gt; and its dependencies.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;eclipse-pahotm-mqtt&quot;&gt;Eclipse Paho™ – MQTT&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cgav%7C1%7Cg%3A%22de.dentrassi.kura.addons%22%20AND%20a%3A%22de.dentrassi.kura.addons.paho%22&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;maven-central&#x2F;v&#x2F;de.dentrassi.kura.addons&#x2F;de.dentrassi.kura.addons.paho.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;As Kura currently does not provide a usable version of Paho, this bundle provides Eclipse Paho and the accompanying Camel component &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;camel.apache.org&#x2F;paho.html&quot;&gt;camel-paho&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;drools&quot;&gt;Drools&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cgav%7C1%7Cg%3A%22de.dentrassi.kura.addons%22%20AND%20a%3A%22de.dentrassi.kura.addons.drools.core%22&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;maven-central&#x2F;v&#x2F;de.dentrassi.kura.addons&#x2F;de.dentrassi.kura.addons.drools.core.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt; &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cgav%7C1%7Cg%3A%22de.dentrassi.kura.addons%22%20AND%20a%3A%22de.dentrassi.kura.addons.drools.components%22&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;maven-central&#x2F;v&#x2F;de.dentrassi.kura.addons&#x2F;de.dentrassi.kura.addons.drools.components.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Drools is a Business Rules Management System which can do complex event processing, execute predicate models (PMML) and way more. The Kura addons offer two layers of integration for Drools. “core”, which bundles the Drools runtime ready to run inside the Kura OSGi runtime. This allows you to bake your own Drools solutions based on Kura and Drools. And then the “components”, which depend on the “core” package, but offer out of the box functionality and integration with Kura Wires and other Kura APIs.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Apache Camel component for Eclipse NeoSCADA</title>
        <published>2016-11-10T15:21:50+01:00</published>
        <updated>2016-11-10T15:21:50+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/camel-neoscada/" type="text/html"/>
        <id>dentrassi.de/pages/attic/camel-neoscada/</id>
        <content type="html">&lt;p&gt;Come back later ;-)&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse Kura on Apache Karaf</title>
        <published>2016-10-20T16:13:39+02:00</published>
        <updated>2016-10-20T16:13:39+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/10/20/eclipse-kura-on-apache-karaf/" type="text/html"/>
        <id>dentrassi.de/blog/2016/10/20/eclipse-kura-on-apache-karaf/</id>
        <content type="html">&lt;p&gt;It took quite a while and triggered a bunch of pull request upstream, but finally I do have &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;kura&#x2F;&quot;&gt;Eclipse Kura™&lt;&#x2F;a&gt; running with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;karaf.apache.org&#x2F;&quot;&gt;Apache Karaf™&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now of course I immediately got the question: Why is that good? After all the recent setup still uses Equinox underneath in Karaf. Now what? … isn’t Equinox and Karaf something different? Read on …&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;what-is-karaf&quot;&gt;What is Karaf?&lt;&#x2F;h2&gt;
&lt;p&gt;Ok, back to the basics. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;equinox&#x2F;&quot;&gt;Eclipse Equinox™&lt;&#x2F;a&gt; is an implementation of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.osgi.org&#x2F;&quot;&gt;OSGi&lt;&#x2F;a&gt;. As is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;felix.apache.org&#x2F;&quot;&gt;Apache Felix™&lt;&#x2F;a&gt;. OSGi is a highly modular Java framework for creating modular applications. And it eats its own dogfood. So there is a thin layer of OSGi (the framework) and a bunch of “add-on” functionality (services) which is part of OSGi, but at the same time running on top of that thin OSGi layer. Now Equinox and Felix both provide this thin OSGi layer as well a set of “standard” OSGi services. But it is possible to interchange service implementations from Equinox to Felix, since both use OSGi. For example in &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;packagedrone.org&#x2F;&quot;&gt;Package Drone&lt;&#x2F;a&gt; I started to use Equinox as OSGi container, but in some release switched to the Apache Felix ConfigurationAdmin since it didn’t have the bugs of the Equinox implementation. So the final target is a plain Equinox installation with some parts from Apache Felix.&lt;&#x2F;p&gt;
&lt;p&gt;Apache Karaf can be seen as a distribution of OSGi framework and services. Like you have a Linux distribution starting with a kernel and a set of packages which work well together, Karaf is a combination of an OSGi framework (either Felix or Equinox or one of others) and a set of add-on functionality which is tested against each other.&lt;&#x2F;p&gt;
&lt;p&gt;And those add-on services are the salt in the OSGi soup. You can have a command line shell with completion support, JMX support, OSGi blueprint, webserver and websocket suport, JAAS, SSH, JPA and way more. Installing bundles, features or complete archives directly from local sources, HTTP or Maven central. It wraps some non-OSGi dependencies automatically into OSGi bundles. And many 3rd party components are already taking advantage of this. So for example installing &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;camel.apache.org&#x2F;&quot;&gt;Apache Camel™&lt;&#x2F;a&gt; into an Karaf contain is done with two lines on the Karaf shell.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-kura-currently-does&quot;&gt;What Kura currently does&lt;&#x2F;h2&gt;
&lt;p&gt;Eclipse Kura currently assembles its own distribution based on pure and simple Equinox components using a big Ant file. While this has an advantage when it comes to distribution size and the fact that you can control each an every aspect of that distribution, it also comes at a prize that you need to do exactly that. That Ant file needs to create each startup configuration file, knowing about each and every bundle version.&lt;&#x2F;p&gt;
&lt;p&gt;Karaf on the other hand already has a ready to run distribution in various flavors. And has some tooling to create new ones.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-different-now&quot;&gt;What is different now&lt;&#x2F;h2&gt;
&lt;p&gt;In order to bring Kura to Karaf there were a few changes necessary in Kura. In addition to that a new set of Maven projects assembly a target distribution. Right now it is not possible to simply drop Kura into Karaf as a Karaf feature. A special Karaf assembly has to be prepared which can then be uploaded and installed at a specific location. This is mostly necessary due to the fact that Kura expects files at a specific location in the file system. Karaf on the other hand can simple be downloaded, unzipped and started at any location.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to that a few bugs in Kura had to be fixed. Kura did make a few assumption on how Equinox and its service implementations handle things which may no longer be true in other OSGi environments. these fixes will probably make it into Kura 2.1.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-i-test-it-today&quot;&gt;Can I test it today?&lt;&#x2F;h2&gt;
&lt;p&gt;If you just want to start up a stable build (not a release) you can easily do this with Docker:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -ti&lt;&#x2F;span&gt;&lt;span&gt; ctron&#x2F;kura:karaf-stable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# stable milestone  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; docker run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; -ti&lt;&#x2F;span&gt;&lt;span&gt; ctron&#x2F;kura:karaf-develop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;# latest develop build  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will drop you in a Karaf shell of Kura running inside docker. You can play around with the console, install some additional functionality or try out an example like &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.milo&#x2F;tree&#x2F;master&#x2F;examples&#x2F;milo-example1&quot;&gt;OPC UA with Apache Camel&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can also check out the branch &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;kura&#x2F;tree&#x2F;feature&#x2F;karaf&quot;&gt;feature&#x2F;karaf&lt;&#x2F;a&gt; in my fork of Kura which contains all the upstream patches and the Karaf distribution projects in one branch. This branch is also used to generate the docker images.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-next&quot;&gt;What is next?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Clean up the target assembly:&lt;&#x2F;strong&gt; Right now assembling the target platform for Karaf is not as simple as I had hoped. This is mostly due to the complexity of such a setup (mixing different variants of Linux, processors and devices) and the way Maven works. With a bit of work this can made even simpler by adding a specific Maven plugin and make one or two fixes in the Karaf Maven plugin.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Enable Network management:&lt;&#x2F;strong&gt; Right now I disabled network management for the two bare-metal Linux targets. Simply because I did have a few issues getting this running on RHEL 7 and Fedora. Things like ethernet devices which are no longer named “eth0” and stuff like that.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Bring Kura to Maven Central&#x2F;More Kura bundles:&lt;&#x2F;strong&gt; These two things go hand in hand. Of course I could simply create more Karaf features, packaging more Kura bundles. But it would be much better to have Kura artifacts available on Maven Central, being able to consume them directly with Karaf. That way it would be possible to either just drop in new functionality or to create a custom Kura+Karaf distribution based on existing modules.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;will-it-become-the-default-for-kura&quot;&gt;Will it become the default for Kura?&lt;&#x2F;h2&gt;
&lt;p&gt;Hard to say. Hopefully in the future. My plan is to bring it into Kura in the 2.2 release cycle. But this also means that quite a set of dependencies has to go through the Eclipse CQ process I we want to provide Karaf ready distributions for download. A first step could be to just provide the recipes for creating your own Karaf distribution of Kura.&lt;&#x2F;p&gt;
&lt;p&gt;So the next step is to bring support for Karaf into Kura upstream.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Collecting data to OpenTSDB with Apache Camel</title>
        <published>2016-09-09T15:12:35+02:00</published>
        <updated>2016-09-09T15:12:35+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/09/09/collecting-data-to-opentsdb-with-apache-camel/" type="text/html"/>
        <id>dentrassi.de/blog/2016/09/09/collecting-data-to-opentsdb-with-apache-camel/</id>
        <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;opentsdb.net&#x2F;&quot;&gt;OpenTSDB&lt;&#x2F;a&gt; is an open source, scalable, &amp;lt;buzzword&amp;gt;big data&amp;lt;&#x2F;buzzword&amp;gt; solution for storing time series data. Well, that what the name of the project actually says ;-) In combination with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;grafana.org&#x2F;&quot;&gt;Grafana&lt;&#x2F;a&gt; you can pretty easy build a few nice dashboards for visualizing that data. The only question is of course, how do you get your data into that system.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;My intention was to provide a simple way to stream metrics into OpenTSDB using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;camel.apache.org&#x2F;&quot;&gt;Apache Camel&lt;&#x2F;a&gt;. A quick search did not bring up any existing solutions for pushing data from Apache Camel to OpenTSDB, so I decided to write a small Camel component which can pick up data and send this to OpenTSDB using the HTTP API. Of course having a plain OpenTSDB HTTP Collector API for that would be fine as well. So I did split up the component into three different modules. A generic OpenTSDB collector API, an HTTP implementation of that and finally the Apache Camel component.&lt;&#x2F;p&gt;
&lt;p&gt;All components are already available in Maven Central, and although they have the version number 0.0.3, they are working quite well ;-)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;de.dentrassi.iot&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;de.dentrassi.iot.opentsdb.collector&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;0.0.3&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;de.dentrassi.iot&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;de.dentrassi.iot.opentsdb.collector.http&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;0.0.3&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;de.dentrassi.iot&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;de.dentrassi.iot.opentsdb.collector.camel&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;0.0.3&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Dropping those dependencies into your classpath, or into your OSGi container ;-), you can use the following code to easily push data coming from MQTT directly into OpenTSDB:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CamelContext&lt;&#x2F;span&gt;&lt;span&gt; context &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DefaultCamelContext&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; add routes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addRoutes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RouteBuilder&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Override  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;configure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Exception {  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;paho:sensors&#x2F;test2&#x2F;temperature?brokerUrl=tcp:&#x2F;&#x2F;iot.eclipse.org&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;${body}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;convertBodyTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(String.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;convertBodyTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(Float.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;open-tsdb:http:&#x2F;&#x2F;localhost:4242#test2&#x2F;value=temp&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;paho:tele&#x2F;devices&#x2F;TEMP?brokerUrl=tcp:&#x2F;&#x2F;iot.eclipse.org&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;${body}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;convertBodyTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(String.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;convertBodyTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(Float.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;open-tsdb:http:&#x2F;&#x2F;localhost:4242#test3&#x2F;value=temp&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;);  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; }  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; start the context  
&lt;&#x2F;span&gt;&lt;span&gt;context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;();  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can directly push Floats or Integers into OpenTSDB. The example above shows a “to” component which does directly address a metric. Using &lt;code&gt;#test3&#x2F;value=temp&lt;&#x2F;code&gt; If you need more tags, then those can be added using &lt;code&gt;#test3&#x2F;value=temp&#x2F;foo=bar&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But it is also possible to have a generic endpoint and provide the metric information in the actual payload. In this case you have to use the type &lt;code&gt;&amp;lt;a href=&amp;quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;iot&#x2F;de.dentrassi.iot.opentsdb.collector&#x2F;apidocs&#x2F;de&#x2F;dentrassi&#x2F;iot&#x2F;opentsdb&#x2F;collector&#x2F;Data.html&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;de.dentrassi.iot.opentsdb.collector.Data&amp;lt;&#x2F;a&amp;gt;&lt;&#x2F;code&gt; and fill in the necessary information. It is also possible to publish an array of &lt;code&gt;Data[]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Camel, Kura and OSGi, struggling with `sun.misc.Unsafe`</title>
        <published>2016-07-25T13:23:44+02:00</published>
        <updated>2016-07-25T13:23:44+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/07/25/camel-kura-and-osgi-struggling-with-sun-misc-unsafe/" type="text/html"/>
        <id>dentrassi.de/blog/2016/07/25/camel-kura-and-osgi-struggling-with-sun-misc-unsafe/</id>
        <content type="html">&lt;p&gt;So here comes a puzzle for you … You do have Apache Camel (2.17), which internally uses &lt;code&gt;com.googlecode.concurrentlinkedhashmap&lt;&#x2F;code&gt;, which uses &lt;code&gt;sun.misc.Unsafe&lt;&#x2F;code&gt;. Now you can argue a lot about this is necessary or not. I just is that way. So starting up Apache Camel in an OSGi container which does strict processing of classes, using Apache Camel will run into a “java.lang.NoClassDefFoundError” issue due to “sun&#x2F;misc&#x2F;Unsafe”.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;the-cause&quot;&gt;The cause&lt;&#x2F;h2&gt;
&lt;p&gt;The cause is rather simple. Apache Camel makes use of &lt;code&gt;sun.misc&lt;&#x2F;code&gt; and so it should declare that in the OSGi manifest. OSGi R6 (and version before that as well) defines in section “3.9.4” of the core specification that &lt;code&gt;java.*&lt;&#x2F;code&gt; is forwarded to he parent class loader, but the rest is not. So &lt;code&gt;sun.misc&lt;&#x2F;code&gt; will not go the parent class loader (which finally is the JVM) by default.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solutions&quot;&gt;Solutions&lt;&#x2F;h2&gt;
&lt;p&gt;As always, there are a few. There may be a few more possible than I describe here, but I don’t want to list any which require changing Apache Camel itself.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fragments&quot;&gt;Fragments&lt;&#x2F;h3&gt;
&lt;figure&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2016&#x2F;07&#x2F;25&#x2F;camel-kura-and-osgi-struggling-with-sun-misc-unsafe&#x2F;sun_misc_1&#x2F;&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;sun_misc_1.png&quot; alt=&quot;Two Fragments&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Two Fragments&lt;&#x2F;figcaption&gt;&lt;&#x2F;figure&gt;
&lt;p&gt;OSGi fragments are a way to enhance an already existing OSGi bundle. So the kind of merge in into the bundle. So it is possible to create a fragment for Apache Camel which does &lt;code&gt;Import-Package: sun.misc&lt;&#x2F;code&gt;. This should quickly resolve the issue as long as the bundle is installed into you OSGi container at the same time Apache Camel is, so that it is available at the time Apache Camel is started. The host bundle has to be &lt;code&gt;org.apache.camel.camel-core&lt;&#x2F;code&gt;, since this is the bundle requiring &lt;code&gt;sun.misc.Unsafe&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Of course this brings up the next issue, there is nobody who exports &lt;code&gt;sun.misc&lt;&#x2F;code&gt;. But there is again a way to fix this.&lt;&#x2F;p&gt;
&lt;p&gt;The actual provider of &lt;code&gt;sun.misc&lt;&#x2F;code&gt; is the JVM. However the JVM does not know about OSGi. But the OSGi container itself, the framework, can act as a proxy. So if the framework bundle (aka bundle zero) would export &lt;code&gt;sun.misc&lt;&#x2F;code&gt; it would be able to actually resolve the class by using the JVM bootclasspath. The solution therefore is another fragment, which performs an &lt;code&gt;Export-Package: sun.misc&lt;&#x2F;code&gt;. That will bring both bundles with their fragments together, correctly wiring up &lt;code&gt;sun.misc&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But as we have seen before, the fragment requires a “host bundle” and this would be different when e.g. using Apache Felix instead of Eclipse Equinox.&lt;&#x2F;p&gt;
&lt;p&gt;Again, there is a solution. The system bundle is also know as &lt;code&gt;system.bundle&lt;&#x2F;code&gt;. So the fragment can specify &lt;code&gt;system.bundle&lt;&#x2F;code&gt; with the attribute &lt;code&gt;extension:=framework&lt;&#x2F;code&gt; as bundle host:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;Manifest-Version: 1.0
&lt;&#x2F;span&gt;&lt;span&gt;Bundle-ManifestVersion: 2
&lt;&#x2F;span&gt;&lt;span&gt;Bundle-SymbolicName: my.sun.misc.provider
&lt;&#x2F;span&gt;&lt;span&gt;Bundle-Version: 1.0.0
&lt;&#x2F;span&gt;&lt;span&gt;Fragment-Host: system.bundle; extension:=framework
&lt;&#x2F;span&gt;&lt;span&gt;Export-Package: sun.misc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course you can also export other JVM internal packages using that way.&lt;&#x2F;p&gt;
&lt;p&gt;There are only two things to keep in mind. First of all, but is is true to all other solutions as well, if the JVM does not provide &lt;code&gt;sun.misc&lt;&#x2F;code&gt; then this won’t work. Since the class cannot be found. Second, and this is specific to this solution, if you start “camel-core” before those two fragments are installed, then you need to “refresh” the Apache Camel Core bundle in order for the OSGi framework to re-wire your imports&#x2F;exports.&lt;&#x2F;p&gt;
&lt;p&gt;There are also some pre-made extension bundles for this setup. Just &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;search.maven.org&#x2F;#search%7Cga%7C1%7Csun.misc&quot;&gt;search maven central&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;equinox-and-felix&quot;&gt;Equinox and Felix&lt;&#x2F;h3&gt;
&lt;p&gt;Some setups of Felix and Equinox do provide an “out of the box” workaround. Equinox for example does automatically forward all failed class lookups to the boot class loader, as a last resort, in the case the framework is started by using the &lt;code&gt;org.eclipse.equinox.launcher_*.jar&lt;&#x2F;code&gt; instead of the &lt;code&gt;org.eclipse.osgi_*.jar&lt;&#x2F;code&gt; launcher.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bootclasspath-delegation-for-equinox&quot;&gt;Bootclasspath delegation for Equinox&lt;&#x2F;h3&gt;
&lt;p&gt;Eclipse Equinox also allows to set a few system properties in order to allow falling back to the bootclasspath and delegating the lookup of “sun.misc” to the JVM:&lt;&#x2F;p&gt;
&lt;p&gt;Also see: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;Equinox_Boot_Delegation&quot;&gt;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;Equinox_Boot_Delegation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;dl&gt;&lt;dt&gt;osgi.compatibility.bootdelegation=true&lt;&#x2F;dt&gt;&lt;dd&gt;This fill fall back to the bootclassloader like using the launcher `org.eclipse.equinox.launcher`&lt;&#x2F;dd&gt;&lt;&#x2F;dl&gt;
&lt;h3 id=&quot;bootclasspath-delegation-for-all&quot;&gt;Bootclasspath delegation for all&lt;&#x2F;h3&gt;
&lt;p&gt;The OSGi core specification also allows to configure direct delegation of lookups to the boot classloader (Section 3.9.3 of the OSGi core specification):&lt;&#x2F;p&gt;
&lt;dl&gt;&lt;dt&gt;org.osgi.framework.bootdelegation=sun.misc.\*&lt;&#x2F;dt&gt;&lt;dd&gt;This will forward requests for `sun.misc.\*` directly to the boot class loader.&lt;&#x2F;dd&gt;&lt;&#x2F;dl&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Now people may complain “oh how complicates this OSGi-thingy is”. Well, “sun.misc.Unsafe” was never intended to be used outside the JVM. Java 9 will correct this with their module system. OSGi already can do that. But it also provides a way to solve this.&lt;&#x2F;p&gt;
&lt;p&gt;If you prefer to use system properties, a different launcher or the “two fragment” approach, that is up to you and your situation. For me the problem simply was to make it happen without changing either Apache Camel or the launcher configuration of Eclipse Kura. So I went with the “two fragments” approach.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;&#x2F;h2&gt;
&lt;p&gt;I am just writing this down in order to help others. And I got help from others to solve this myself. So thanks to some people who posted this “on the net”, it is a long time, I stumbled over you googling about a solutions some time ago. Sorry I forgot where I initially found this solution.&lt;&#x2F;p&gt;
&lt;p&gt;Also thanks to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;nbartlett&quot;&gt;Neil Bartlett&lt;&#x2F;a&gt; for pointing out the OSGi conform solution with &lt;code&gt;org.osgi.framework.bootdelegation&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Bringing OPC UA to Apache Camel</title>
        <published>2016-07-18T10:22:09+02:00</published>
        <updated>2016-07-18T10:22:09+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/07/18/bringing-opc-ua-to-apache-camel/" type="text/html"/>
        <id>dentrassi.de/blog/2016/07/18/bringing-opc-ua-to-apache-camel/</id>
        <content type="html">&lt;p&gt;My first two weeks at Red Hat have been quite awesome! There is a lot to learn and one the first things I checked out was &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;camel.apache.org&#x2F;&quot;&gt;Apache Camel&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eclipse.org&#x2F;milo&quot;&gt;Eclipse Milo&lt;&#x2F;a&gt;. While Camel is more known open source project, Eclipse Milo is a newcomer project at the Eclipse Foundation. And while it is officially still in the Incubation Phase, it is a tool you can really work with! Eclipse Milo is an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;opcfoundation.org&#x2F;about&#x2F;opc-technologies&#x2F;opc-ua&#x2F;&quot;&gt;OPC UA&lt;&#x2F;a&gt; client and server implementation.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h3 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h3&gt;
&lt;p&gt;Although Apache Camel already has an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;summitsystemsinc&#x2F;camel-opc&quot;&gt;OPC DA connector&lt;&#x2F;a&gt;, based on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;openscada.org&#x2F;projects&#x2F;utgard&#x2F;&quot;&gt;OpenSCADA’s Utgard&lt;&#x2F;a&gt; library (sorry, but I couldn’t resist ;-) ), OPC UA is a complete different thing. OPC DA remote connectivity is based on DCOM and has always been really painful. That’s also the reason for the name: Utgard. But with OPC UA that has been cleared up. It features different communication layers, the most prominent, up until now, is the custom, TCP based binary protocol.&lt;&#x2F;p&gt;
&lt;p&gt;I started by investigating the way Camel works and dug a little bit in the API of Eclipse Milo. From an API perspective, both tools couldn’t be more different. Where Camel does try to focus on simplicity and reducing the full complexity down to a very slim and simple interface, Milo simply unleashes the full complexity of OPC UA into a very nice, but complex, Java 8 style API. Now you can argue night and day what is the better approach, with a little bit of glue code, both sides work perfectly together.&lt;&#x2F;p&gt;
&lt;p&gt;To make it short, the final result is an open source project on GitHub: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.milo&quot;&gt;ctron&#x2F;de.dentrassi.camel.milo&lt;&#x2F;a&gt;, which features two Camel components providing OPC UA client and OPC UA server support. Meaning that it is possible now to consume or publish OPC UA value updates by simply configuring a Camel URI.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h3&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;milo-client:tcp:&#x2F;&#x2F;foo:bar@localhost:12685?nodeId=items-MyItem&amp;amp;namespaceUri=urn:org:apache:camel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Can be used to configure an OPC UA Client connection to “localhost:12685”. Implementing both Camel producer and consumer, it is possible to subscribe&#x2F;monitor this item or write value updates.&lt;&#x2F;p&gt;
&lt;p&gt;The following URI does create a server item named “MyItem”:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;milo-server:MyItem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which can then be accessed using an OPC UA client. For the server component the configuration options like bind address and port are located on the Camel component, not the endpoint. However it is possible with Camel to register the same component type with different configurations.&lt;&#x2F;p&gt;
&lt;p&gt;Also see the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.camel.milo&#x2F;tree&#x2F;master&#x2F;src&#x2F;test&#x2F;java&#x2F;org&#x2F;apache&#x2F;camel&#x2F;component&#x2F;milo&#x2F;testing&quot;&gt;testing classes&lt;&#x2F;a&gt;, which show a few examples.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-next&quot;&gt;What is next?&lt;&#x2F;h3&gt;
&lt;p&gt;With help from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hekonsek&quot;&gt;@hekonsek&lt;&#x2F;a&gt;, who knows a lot more about Camel than I do, we hope to contribute this extension to the Apache Camel project. So once Eclipse Milo has it’s first release, this could become an “out-of-the-box” experience when using Apache Camel, thanks to another wonderful project of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;iot.eclipse.org&#x2F;&quot;&gt;Eclipse IoT&lt;&#x2F;a&gt; of course ;-)&lt;&#x2F;p&gt;
&lt;p&gt;Also, with a little bit of luck, there will be &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipsecon.org&#x2F;europe2016&#x2F;session&#x2F;bringing-opc-ua-apache-camel-and-eclipse-kura&quot;&gt;a talk at EclipseCon Europe 2016&lt;&#x2F;a&gt; about this adventure. It will even go a bit further because I do want to bring this module into Eclipse Kura, so that Eclipse Kura will feature OPC UA support using Apache Camel.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>10 years</title>
        <published>2016-06-30T14:47:23+02:00</published>
        <updated>2016-06-30T14:47:23+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/06/30/10-years/" type="text/html"/>
        <id>dentrassi.de/blog/2016/06/30/10-years/</id>
        <content type="html">&lt;p&gt;Many of my blog posts are actually a “note to self”. Things I write down in order not to forget them. This one even goes a bit further. So save yourself some time and skip it ;-)&lt;&#x2F;p&gt;
&lt;p&gt;10 years ago I started an adventure&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Creating an open source SCADA system and a business with that. Having an open source SCADA system was not the business case back then, it was just a side effect.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;So in those 10 years a lot of things haven happened. Just think back a moment, there was no “smart phone” back then. Although there was Java 5, most of us hesitated and stuck with 1.4, not having generics. 32bit was standard. Raspberry PIs had not been invented yet (though I did have a Lego Mindstorms NXT). There was no Git and you could be lucky if you had Subversion. Not talking about services like GitHub, Travis-CI or other hipster cloud things.&lt;&#x2F;p&gt;
&lt;p&gt;Also in the area that I worked, let’s just label it “SCADA”, a lot has happened. During that time we developed openSCADA, which later became an Eclipse project named “Eclipse SCADA” and now “Eclipse NeoSCADA”. And similar things happened in that industry field. Instead of having closed source, C based, isolated systems, we now have a more open field, where data is transmitted using virtual machine based systems, wrapping up data in XML or JSON structures&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, re-use code from open source projects. And quite many of those things happen in the Eclipse IoT working group and top-level project, which I am glad to be a part of.&lt;&#x2F;p&gt;
&lt;p&gt;Looking back 10 years again, Eclipse was an IDE like Apache was a web server&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. And today both foundations govern a huge set of projects, far away from their original starting points and quite a sum of them has, in some way, to do with IoT.&lt;&#x2F;p&gt;
&lt;p&gt;So I am really looking forward to next Monday, when I will start a new position at the IoT team of RedHat. To me this is a great opportunity and a great adventure into the next 10 years. I am sure that a lot will happen in the area of IoT, communication between devices and services. And I appreciate it that I can be a part of this.&lt;&#x2F;p&gt;
&lt;p&gt;But also will I miss what I am leaving behind. Not only the software that I made and the things I have accomplished, but, more important, colleagues who became friends.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; To be honest, it was 10 years and 3 months ago. Then again the first three months were more preparing than actually doing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; Not sure if this is an improvement, but it is the way it goes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; I know it was more back then already, but not as it is now&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>New version of Maven RPM builder</title>
        <published>2016-06-24T13:03:30+02:00</published>
        <updated>2016-06-24T13:03:30+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/06/24/new-version-of-maven-rpm-builder/" type="text/html"/>
        <id>dentrassi.de/blog/2016/06/24/new-version-of-maven-rpm-builder/</id>
        <content type="html">&lt;p&gt;I just released a new version of the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;rpm-builder&#x2F;&quot;&gt;Maven RPM builder&lt;&#x2F;a&gt;. Version 0.6.0 allows one to influence the way the RPM release information is generated during a SNAPSHOT build (also see &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;rpm-builder&#x2F;issues&#x2F;2&quot;&gt;issue #2&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;While the default behavior is still the same, it is now possible to specify the &lt;code&gt;snapshotBuildId&lt;&#x2F;code&gt;, which will then be added as release suffix instead of the current timestamp. Setting &lt;code&gt;forceRelease&lt;&#x2F;code&gt; can be used to disable the SNAPSHOT specific logic altogether and just use the provided release information.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Mattermost at Eclipse</title>
        <published>2016-06-15T16:24:55+02:00</published>
        <updated>2016-06-15T16:24:55+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/06/15/mattermost-at-eclipse/" type="text/html"/>
        <id>dentrassi.de/blog/2016/06/15/mattermost-at-eclipse/</id>
        <content type="html">&lt;p&gt;About half a year back &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;bruncedric&quot;&gt;Cédric&lt;&#x2F;a&gt; and I did &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2015&#x2F;12&#x2F;16&#x2F;test-driving-mattermost-at-the-eclipse-foundation&#x2F;&quot;&gt;start a test&lt;&#x2F;a&gt; to see if Mattermost is a valuable tool for the Eclipse community. Failure was an option, since a new tool should bring some benefit to the community.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The server this instance was running on was sponsored by my current employer, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ibh-systems.com&quot;&gt;IBH SYSTEMS GmbH&lt;&#x2F;a&gt;. The test was scheduled to be terminate at the end of June. And since I will change to RedHat, starting in July, we were forced to make a decision:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The mattermost instance of Eclipse has been migrated to a new server and has a new url: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;t.co&#x2F;Aa24zyLi69&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;Aa24zyLi69&lt;&#x2F;a&gt; &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;t.co&#x2F;mL9GouQTN2&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;pic.twitter.com&#x2F;mL9GouQTN2&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;cite&gt;Cédric Brun (@bruncedric) &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;bruncedric&#x2F;status&#x2F;741255782885363712&quot;&gt;June 10, 2016&lt;&#x2F;a&gt;&lt;&#x2F;cite&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;:-) Mattermost now is a permanent, community supported service of the Eclipse Foundation. Hosted on the Eclipse Foundation’s infrastructure, but supported by its community. We also dropped the “-test” in the domain name. So please update your links, if you had some. All content was migrated to the new server.&lt;&#x2F;p&gt;
&lt;p&gt;Also did we setup a new IRC bridge, which does bridge the IRC channel #eclipse-dev on freenode to the Mattermost channel &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mattermost.eclipse.org&#x2F;eclipse&#x2F;channels&#x2F;developers-qa&quot;&gt;developers-qa&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Cédric and I proposed a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipsecon.org&#x2F;europe2016&#x2F;session&#x2F;mattermost-eclipse-irc-web&quot;&gt;talk at for EclipseCon Europe 2016&lt;&#x2F;a&gt; to show the community what Mattermost is and how it can be used for engaging users and committers.&lt;&#x2F;p&gt;
&lt;p&gt;Happy chatting ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Writing RPM files … in plain Java … on Maven Central</title>
        <published>2016-06-07T15:05:44+02:00</published>
        <updated>2016-06-07T15:05:44+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/06/07/writing-rpm-files-in-plain-java-on-maven-central/" type="text/html"/>
        <id>dentrassi.de/blog/2016/06/07/writing-rpm-files-in-plain-java-on-maven-central/</id>
        <content type="html">&lt;p&gt;A few weeks back I wrote a blog post about &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2016&#x2F;04&#x2F;15&#x2F;writing-rpm-files-in-plain-java&#x2F;&quot;&gt;writing RPM files in plain Java&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What was left over was the fact that the library was not available outside of Package Drone itself. Although it was created as a stand alone functionality you would need to fetch the JAR and somehow integrate it into your build.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;With the recent &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;packagedrone.org&#x2F;2016&#x2F;06&#x2F;06&#x2F;package-drone-0-13-0-released&#x2F;&quot;&gt;release of Package Drone 0.13.0&lt;&#x2F;a&gt; I was finally able to officially push the module to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;search.maven.org&#x2F;#artifactdetails%7Corg.eclipse.packagedrone%7Corg.eclipse.packagedrone.utils.rpm%7C0.13.0%7Cjar&quot;&gt;Maven Central&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.eclipse.packagedrone&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.eclipse.packagedrone.utils.rpm&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;0.13.0&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the meanwhile I did work on a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2016&#x2F;04&#x2F;26&#x2F;building-rpms-on-any-platform-with-maven&#x2F;&quot;&gt;Maven RPM builder plugin&lt;&#x2F;a&gt;, which allows creating RPM files on any platform. The newest version (0.5.0) has been released today as well, which already uses the new library.&lt;&#x2F;p&gt;
&lt;p&gt;So working with RPM files just got a bit easier ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Maven RPM builder, enhanced</title>
        <published>2016-05-02T12:04:36+02:00</published>
        <updated>2016-05-02T12:04:36+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/05/02/maven-rpm-builder-enhanced/" type="text/html"/>
        <id>dentrassi.de/blog/2016/05/02/maven-rpm-builder-enhanced/</id>
        <content type="html">&lt;p&gt;The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;rpm-builder&#x2F;&quot;&gt;Maven RPM Builder&lt;&#x2F;a&gt; got a few new features. Version 0.3.0 can now:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;rpm-builder&#x2F;entry.html&quot;&gt;symbolic links&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Specify &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;rpm-builder&#x2F;scripts.html&quot;&gt;pre&#x2F;post install&#x2F;remove scripts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Declare all kinds of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;rpm-builder&#x2F;deps.html&quot;&gt;dependencies&lt;&#x2F;a&gt; (requires, provides, conflicts, obsoletes)&lt;&#x2F;li&gt;
&lt;li&gt;And has a much &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;rpm-builder&#x2F;rpm-mojo.html&quot;&gt;better documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;And of course a few bugs got fixed as well ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Building RPMs on any platform with Maven</title>
        <published>2016-04-26T11:52:53+02:00</published>
        <updated>2016-04-26T11:52:53+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/04/26/building-rpms-on-any-platform-with-maven/" type="text/html"/>
        <id>dentrassi.de/blog/2016/04/26/building-rpms-on-any-platform-with-maven/</id>
        <content type="html">&lt;p&gt;In several occasions I had to build RPM packages for installing software. In the past I mostly did it with a Maven build using the &lt;q&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.mojohaus.org&#x2F;rpm-maven-plugin&#x2F;&quot;&gt;RPM Maven Plugin&lt;&#x2F;a&gt;&lt;&#x2F;q&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The process is simple: At the end of your build you gather up all resources, try to understand the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.mojohaus.org&#x2F;rpm-maven-plugin&#x2F;map-params.html&quot;&gt;mapping configuration&lt;&#x2F;a&gt;, bang your head a few times in order to figure out way to work with &lt;code&gt;-SNAPSHOT&lt;&#x2F;code&gt; versions and that’s it. In the end you have a few RPM files.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The only problem is, that the plugin actually creates a &lt;q&gt;spec&lt;&#x2F;q&gt; file and runs the &lt;code&gt;rpmbuild&lt;&#x2F;code&gt; command line tool. Which is, of course, only available on an RPM like system. Fortunately Debian&#x2F;Ubuntu based distributions, although they use something different, provide at least the &lt;code&gt;rpmbuild&lt;&#x2F;code&gt; tool.&lt;&#x2F;p&gt;
&lt;p&gt;On Windows or Mac OS the situation looks different. Adding &lt;code&gt;rpmbuild&lt;&#x2F;code&gt; to Windows can be quite a task. Still the question remains, why this is necessary since Java can run on all platforms.&lt;&#x2F;p&gt;
&lt;p&gt;So time to write a Maven plugin which does not the &lt;code&gt;rpmbuild&lt;&#x2F;code&gt; tool, but create RPM packages native in Java:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;rpm-builder&#x2F;&quot;&gt;&lt;code&gt;de.dentrassi.maven:rpm&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is a Maven Plugin which does create RPM packages using plain Java as a Maven Plugin. The process is simply and fast and does not require additional command line tool. The plugin is open source and the source code is available on GitHub &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;rpm-builder&quot;&gt;ctron&#x2F;rpm-builder&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Writing RPM files … in plain Java</title>
        <published>2016-04-15T11:12:51+02:00</published>
        <updated>2016-04-15T11:12:51+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/04/15/writing-rpm-files-in-plain-java/" type="text/html"/>
        <id>dentrassi.de/blog/2016/04/15/writing-rpm-files-in-plain-java/</id>
        <content type="html">&lt;p&gt;Now creating an RPM file is easy. There are a lot of tutorials &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.google.com&#x2F;#q=create+rpm&quot;&gt;out there&lt;&#x2F;a&gt; on how write a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.rpm.org&#x2F;max-rpm&#x2F;ch-rpm-inside.html&quot;&gt;SPEC file&lt;&#x2F;a&gt; and build your RPM. Even when you are using Maven … with the exception that when you are on Windows or Mac OS X, the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.mojohaus.org&#x2F;rpm-maven-plugin&#x2F;&quot;&gt;Maven RPM plugin&lt;&#x2F;a&gt; will still try to invoke &lt;code&gt;rpmbuild&lt;&#x2F;code&gt; in order to actually build the RPM file. The maven bundle simply creates a SPEC file, layout out the payload data and lets &lt;code&gt;rpmbuild&lt;&#x2F;code&gt; do the processing.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;My task now was to make it possible for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;eclipsescada&#x2F;&quot;&gt;Eclipse NeoSCADA&lt;&#x2F;a&gt; to create configuration RPMs directly from inside the Eclipse IDE (running in Java), without the need to have &lt;code&gt;rpmbuild&lt;&#x2F;code&gt; on a Windows platform. Since I did write an RPM reader for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;packagedrone.org&#x2F;&quot;&gt;Package Drone&lt;&#x2F;a&gt; before, I did know a bit about the RPM file format. So this shouldn’t be a big deal?! … How naive ;-)&lt;&#x2F;p&gt;
&lt;p&gt;Now there is a bit of documentation about the RPM file format (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;RPM File Format&quot; href=&quot;http:&#x2F;&#x2F;www.rpm.org&#x2F;max-rpm&#x2F;s1-rpm-file-format-rpm-file-format.html&quot;&gt;[1]&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.fedoraproject.org&#x2F;ro&#x2F;Fedora_Draft_Documentation&#x2F;0.1&#x2F;html&#x2F;RPM_Guide&#x2F;ch-package-structure.html&quot;&gt;[2]&lt;&#x2F;a&gt;) and there also is an implementation, called &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;jrpm.sourceforge.net&#x2F;&quot;&gt;jRPM&lt;&#x2F;a&gt;, which can read RPM files in Java. But beside the fact that is was not updated for a long, long time, it cannot write RPM files.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reading-rpms&quot;&gt;Reading RPMs&lt;&#x2F;h3&gt;
&lt;p&gt;So why is writing RPM files so complicated? It isn’t. RPM is a binary format, designed in the 90ies using C. It uses structs, which get written out in the file stream. Some areas of the file are (the lead) are only left over for compatibility reasons and are ignored nowadays. The RPM file has two dictionary like structures, which can be used to store variable type data in a &lt;code&gt;integer&lt;&#x2F;code&gt; to &lt;code&gt;data&lt;&#x2F;code&gt; relation (called &lt;q&gt;headers&lt;&#x2F;q&gt;, one signature header, one package header). The end of the file is the actual payload section which holds a CPIO archive, which can be compressed e.g. using GZIP. Nothing fancy, easy to read if you are used to working with binary content. So in the past it was easy for me to write our own &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2015&#x2F;12&#x2F;03&#x2F;parsing-rpms-in-java&#x2F;&quot;&gt;RPM reader for Package Drone&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;writing-rpms&quot;&gt;Writing RPMs&lt;&#x2F;h3&gt;
&lt;p&gt;Now writing RPMs is a completely different story. First of all you can’t simply ignore all those unused areas, you actually have to write them out. Next, the boths headers (which have nearly the same format) do have a fixed length record structure in the beginning and then a variable payload section.&lt;&#x2F;p&gt;
&lt;p&gt;Like this (please not, all &lt;q&gt;diagrams&lt;&#x2F;q&gt; in here are just sketches! For the real binary layout, please see the RPM documentations):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;         -----------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;         | Number Of Entries  | Payload Size           |
&lt;&#x2F;span&gt;&lt;span&gt;         -----------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;Entry #1 | TAG #1 | TYPE | COUNT | OFFSET in payload   |
&lt;&#x2F;span&gt;&lt;span&gt;Entry #2 | TAG #2 | TYPE | COUNT | OFFSET in payload   |
&lt;&#x2F;span&gt;&lt;span&gt;Entry... | TAG... | TYPE | COUNT | OFFSET in payload   |
&lt;&#x2F;span&gt;&lt;span&gt;Entry #n | TAG #n | TYPE | COUNT | OFFSET in payload   |
&lt;&#x2F;span&gt;&lt;span&gt;         -----------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;Payload  |                                             |
&lt;&#x2F;span&gt;&lt;span&gt;         |                                             |
&lt;&#x2F;span&gt;&lt;span&gt;         |                                             |
&lt;&#x2F;span&gt;&lt;span&gt;         |                                             |
&lt;&#x2F;span&gt;&lt;span&gt;         -----------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Reading this structure is easy. You read the tags, look up in the big payload BLOB and interpret the data using the type information. Writing this out the same way caused the official RPM tool to reject my content. I did run this in my own reader which worked fine though. The first error message I ran into was &lt;code&gt;BAD, tag&lt;&#x2F;code&gt;. So what to do?&lt;&#x2F;p&gt;
&lt;p&gt;Searching the internet for “RPM” and “BAD, tag” is not really helpful if you don’t know what you are looking for. So, thanks to open source, I did check out the RPM source and looked into the code what could cause this error message.&lt;&#x2F;p&gt;
&lt;p&gt;My first mistake was I assume the position of the payload header data was irrelevant. But no, it wasn’t. Payload data has to be aligned inside the big payload field. While the payload field itself is aligned to 8 bytes.&lt;&#x2F;p&gt;
&lt;p&gt;But I did learn another thing from my look into the RPM source code. I knew there would be a lot more things coming up until I would be done with this task. The RPM code is full of special cases, legacy handling, weird logic in order to keep work around creating incompatible file formats. I don’t want to complain here, I know how the history of a productive tool can get to you. And the RPM file format is not intended to be a standardized format.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;my-highlight&quot;&gt;My highlight&lt;&#x2F;h3&gt;
&lt;p&gt;I really don’t want to tell you about all the strange things I have seen. But there is one highlight which nearly made me give up until I ran into a helpful &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;rpm-4.0.1 immutable header regions&quot; href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;archives&#x2F;rpm-list&#x2F;2000-December&#x2F;msg00217.html&quot;&gt;mailing list entry from Jeff Johnson&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I did outline the header section above. And I managed to write it correctly. But still the SHA1 header check failed, which prevented RPM to accept the file. The MD5 check however passed. Strange, since the SHA1 header check only checks the package header, while the MD5 check does check the package header plus the payload data.&lt;&#x2F;p&gt;
&lt;p&gt;Turned out, there is one feature in the RPM header which marks a region in the header as &lt;q&gt;immutable&lt;&#x2F;q&gt;. This was added at a later version and was kind of &lt;q&gt;hidden&lt;&#x2F;q&gt; inside the actual data, in order not to break the file format.&lt;&#x2F;p&gt;
&lt;p&gt;In short, a part of this header structure above, should be considered unchangeable, tag entry information and payload data. A marker will draw the line between mutable and immutable region. Like that:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;         -----------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;         | Number Of Entries   | Payload Size          |
&lt;&#x2F;span&gt;&lt;span&gt;         -----------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;Entry #1 | TAG #1 | TYPE | COUNT | OFFSET in payload   |
&lt;&#x2F;span&gt;&lt;span&gt;Entry #2 | TAG #2 | TYPE | COUNT | OFFSET in payload   |
&lt;&#x2F;span&gt;&lt;span&gt;========================================================
&lt;&#x2F;span&gt;&lt;span&gt;Entry... | TAG... | TYPE | COUNT | OFFSET in payload   |
&lt;&#x2F;span&gt;&lt;span&gt;Entry #n | TAG #n | TYPE | COUNT | OFFSET in payload   |
&lt;&#x2F;span&gt;&lt;span&gt;         -----------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;Payload  |                                             |
&lt;&#x2F;span&gt;&lt;span&gt;         |                                             |
&lt;&#x2F;span&gt;&lt;span&gt;========================================================
&lt;&#x2F;span&gt;&lt;span&gt;         |                                             |
&lt;&#x2F;span&gt;&lt;span&gt;         |                                             |
&lt;&#x2F;span&gt;&lt;span&gt;         -----------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, interestingly, all RPM files which I did encounter marked the full header as immutable. So I am still not sure what that means.&lt;&#x2F;p&gt;
&lt;p&gt;The way this is stored is even more interesting, since the immutable region information is stored in the payload section, as a tag entry structure itself, pointing backwards with a negative offset, in bytes, of how many entries are considered immutable.&lt;&#x2F;p&gt;
&lt;p&gt;Look (␣ = padding):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;         ------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;         | Number Of Entries  | Payload Size      |
&lt;&#x2F;span&gt;&lt;span&gt;         ------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;Entry #1 | 62     | BLOB      |   16  |   24      |
&lt;&#x2F;span&gt;&lt;span&gt;Entry #2 | TAG #1 | STRING    |    1  |    0      |
&lt;&#x2F;span&gt;&lt;span&gt;Entry #3 | TAG #2 | INT32     |    1  |   12      |
&lt;&#x2F;span&gt;&lt;span&gt;Entry #4 | TAG #3 | INT16     |    4  |   20      |
&lt;&#x2F;span&gt;&lt;span&gt;         ------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;Payload  |FOO BAR!␀␣␣␣000011223344XXXXXXXXXXXXXXXX|  
&lt;&#x2F;span&gt;&lt;span&gt;         ------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;XXX...X = | 62 | BLOB | 16 | -(5*16) = -80 |
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Although I though I would write it out correctly, I made one mistake. The entry with the special tag 62 (or 63) comes first, but still, its payload data comes last. The data structure would allow for a different position. It would be possible to write out the payload of Entry #1 first, and let the rest follow. But that does not work and will cause a SHA1 failure. Only placing the special marker first in the tag entry list and last in the payload section seems to work.&lt;&#x2F;p&gt;
&lt;p&gt;All this special handling explained a lot of oddities when I looked in the RPM source code at first.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;so-what&quot;&gt;So what?&lt;&#x2F;h3&gt;
&lt;p&gt;First of all I have to say that a lot has been done from RPM version 4.11 to 4.13. I started out testing on Ubuntu, with RPM 4.11 and ended up using Fedora 23 with RPM 4.13. A few generic error messages where fixed into more helpful messages. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rpm-software-management&#x2F;rpm&quot;&gt;source code is on GitHub&lt;&#x2F;a&gt; and has been cleaned up a lot.&lt;&#x2F;p&gt;
&lt;p&gt;While implementing the write support, I also tried to find another solution which is capable of writing RPM files in order to read their source code and get a better understanding. I did find none. Sure there is Python and Perl support for RPM, but this is all backed by native code and the &lt;code&gt;librpm&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Well, now there is the first, independent implementation for reading AND writing RPM files aside the original RPM implementation. It is part of the Eclipse Package Drone project and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;packagedrone&#x2F;tree&#x2F;master&#x2F;bundles&#x2F;org.eclipse.packagedrone.utils.rpm&quot;&gt;hosted on GitHub&lt;&#x2F;a&gt;. You can find first binaries &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;oss.sonatype.org&#x2F;content&#x2F;groups&#x2F;public&#x2F;org&#x2F;eclipse&#x2F;packagedrone&#x2F;org.eclipe.packagedrone.utils.rpm&#x2F;&quot;&gt;on Sonatype’s OSS repository&lt;&#x2F;a&gt;, and when Package Drone 0.13.0 is being released, these will be pushed to Maven Central as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-next&quot;&gt;What is next?&lt;&#x2F;h3&gt;
&lt;p&gt;I do hope that I find some time in the future to write a Maven Plugin which is capable of creating RPMs using plain Java. So it should be easy to use Maven on Windows or Mac OS X to create RPMs during a Maven build.&lt;&#x2F;p&gt;
&lt;p&gt;There are probably also a &lt;del datetime=&quot;2016-04-15T08:27:58+00:00&quot;&gt;few&lt;&#x2F;del&gt; a lot special cases left over which need fixing … contributions are welcome ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>RPM File Format</title>
        <published>2016-04-12T15:56:30+02:00</published>
        <updated>2016-04-12T15:56:30+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/unsorted/rpm-file-format/" type="text/html"/>
        <id>dentrassi.de/pages/unsorted/rpm-file-format/</id>
        <content type="html">&lt;p&gt;This is my cheat sheet for the RPM file format. While there is an article about the RPM file format, it is far from complete. Still, have a look: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;rpm.org&#x2F;wiki&#x2F;DevelDocs&#x2F;FileFormat&quot;&gt;http:&#x2F;&#x2F;rpm.org&#x2F;wiki&#x2F;DevelDocs&#x2F;FileFormat&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lead&quot;&gt;Lead&lt;&#x2F;h2&gt;
&lt;p&gt;The lead section seems to be pretty much dead. (also see &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;rpm.org&#x2F;wiki&#x2F;DevelDocs&#x2F;FileFormat#a2.3.Leadformat&quot;&gt;2.3. Lead format&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;signature-header&quot;&gt;Signature header&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;TAG&lt;&#x2F;th&gt;&lt;th&gt;Type&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;SIZE&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;int32_t&lt;&#x2F;td&gt;&lt;td&gt;The size of the package header and payload section in bytes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;MD5&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;BLOB&lt;&#x2F;td&gt;&lt;td&gt;The MD5 digest of the package header and payload as they are stored on the file system.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;SHA1HEADER&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;STRING&lt;&#x2F;td&gt;&lt;td&gt;The SHA1 digest of the package header only. Stored as lowercase hex string.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;PAYLOAD_SIZE&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;int32_t&lt;&#x2F;td&gt;&lt;td&gt;The uncompressed size in bytes of the CPIO archive in the payload section.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;signature-padding&quot;&gt;Signature padding&lt;&#x2F;h2&gt;
&lt;p&gt;After the signature header has been written the file is aligned to 8 bytes. This makes the following package header start of in a file index dividable by 8.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;package-header&quot;&gt;Package header&lt;&#x2F;h2&gt;
&lt;p&gt;The package header has the same format as the signature header, but does use different tags.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tags&quot;&gt;Tags&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;TAG&lt;&#x2F;th&gt;&lt;th&gt;Type&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;PAYLOAD_FORMAT&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;STRING&lt;&#x2F;td&gt;&lt;td&gt;The type of the archive format, currently only &lt;code&gt;cpio&lt;&#x2F;code&gt; can be used.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;PAYLOAD_CODING&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;STRING&lt;&#x2F;td&gt;&lt;td&gt;The way the file archive is compressed: e.g. &lt;code&gt;gzip&lt;&#x2F;code&gt;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;FILE_SIZES&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;int32_t&lt;&#x2F;td&gt;&lt;td&gt;For each file and directory stored in the archive the size in bytes. Directories do count 4096 each.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;payload-data&quot;&gt;Payload data&lt;&#x2F;h2&gt;
&lt;p&gt;The payload data is the actual file data. It is a CPIO archive, compressed either by GZIP, BZIP2 or XZ. Also see tags PAYLOAD_FORMAT and PAYLOAD_CODING.&lt;&#x2F;p&gt;
&lt;p&gt;Also see:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.redhat.com&#x2F;archives&#x2F;rpm-list&#x2F;2000-December&#x2F;msg00217.html&quot;&gt;https:&#x2F;&#x2F;www.redhat.com&#x2F;archives&#x2F;rpm-list&#x2F;2000-December&#x2F;msg00217.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse Mattermost – What&#x27;s the state?!</title>
        <published>2016-01-29T16:47:40+01:00</published>
        <updated>2016-01-29T16:47:40+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/01/29/eclipse-mattermost-whats-the-state/" type="text/html"/>
        <id>dentrassi.de/blog/2016/01/29/eclipse-mattermost-whats-the-state/</id>
        <content type="html">&lt;p&gt;A few weeks ago we started to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2015&#x2F;12&#x2F;16&#x2F;test-driving-mattermost-at-the-eclipse-foundation&#x2F;&quot;&gt;test Mattermost&lt;&#x2F;a&gt; as a communication channel for Eclipse Foundation projects. So, how is it going?&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;First of all &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;cedric.brun.io&#x2F;about&#x2F;&quot;&gt;Cédric Brun&lt;&#x2F;a&gt; wrote a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cbrun&#x2F;jstuart&quot;&gt;bunch of Java tasks&lt;&#x2F;a&gt; which create Mattermost events based on various other Eclipse systems (like Gerrit, Bugzilla, Twitter, Forum, …) which integrate nicely with the Mattermost channels and allow each project to aggregate all these events in a single location. So you actually can get a notification about a new Forum entry for your Eclipse project in Mattermost now. Cool stuff! Many thanks!&lt;&#x2F;p&gt;
&lt;p&gt;From the usage side we are currently approaching the 100 user mark. At the moment of writing there are 94 registered users, 24 public and 8 private channels. About 150 posts per day and between 10 to 20 active users. You can have a look at the statistics below.&lt;&#x2F;p&gt;
&lt;p&gt;So is it a success? Well I goes into the right direction. Please don’t forget that this is just a test, but on the other hand there are people which are using it on a day by day basis for their Eclipse process. The usage of one big team with many channels (even multiple per project) seem to work fine. Single-sign-on will be a topic, right now Mattermost does have its user management. Also is the setup for projects still a manual process, which could be automated somehow. So there are a few topic left to solve.&lt;&#x2F;p&gt;
&lt;p&gt;But for me it is really amazing to see how quickly a new communication platform was established if all people work together. And it seems that people accept the new system quite well. I really hope we can establish this as a permanent solution.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;mattermost_stats_1.png&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;mattermost_stats_1.png&quot; alt=&quot;Mattermost Statistics 2016-01-29&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Java 8 magic with method references</title>
        <published>2016-01-20T10:49:24+01:00</published>
        <updated>2016-01-20T10:49:24+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2016/01/20/java-8-magic-with-method-references/" type="text/html"/>
        <id>dentrassi.de/blog/2016/01/20/java-8-magic-with-method-references/</id>
        <content type="html">&lt;p&gt;When you start learning a new programming language you often encounter snippets of code which you have no idea why they work. The more you learn about that programming language to more you understand and these moments become rare.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Today, after programming many years in Java, I ran into such a situation with Java 8 and was really fascinated about it.&lt;&#x2F;p&gt;
&lt;p&gt;It all started with the problem of having a &lt;code&gt;Stream&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; and wanting to “for-each” iterate over its content. The for-each construct in Java requires to have an array or &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;. However &lt;code&gt;Stream&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; does only provide an &lt;code&gt;Iterator&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;, which is not the same.&lt;&#x2F;p&gt;
&lt;p&gt;Now there are many solutions (good and bad) out there for this problem. However &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Solution #9242&quot; href=&quot;http:&#x2F;&#x2F;codereview.stackexchange.com&#x2F;questions&#x2F;70469&#x2F;streamiterable-create-an-iterable-from-a-java-8-stream#92424&quot;&gt;one solution&lt;&#x2F;a&gt; really fascinated me:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; …;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) s::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;iterator&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;…
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now wait … &lt;code&gt;Stream&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; does have a method &lt;code&gt;iterator&lt;&#x2F;code&gt; which returns an &lt;code&gt;Iterator&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;. But &lt;code&gt;Iterator&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; cannot be cast to &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;! And also is “&lt;code&gt;s::iterator&lt;&#x2F;code&gt;” not calling the method, but referencing the method.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;eclipse_ide_java_qf_1-e1453282144943.png&quot; alt=&quot;Screenshot of Eclipse Quick Fix for Lambda expressions&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Pasting this code fragment into the Eclipse IDE helps to understand what actually happens. Pressing &lt;kbd&gt;Ctrl+1&lt;&#x2F;kbd&gt; on a code fragment allows to convert method references to lambda expressions and lambda expressions to anonymous classes. Quite fantastic ;-)&lt;&#x2F;p&gt;
&lt;p&gt;So, lets see how this code fragment get expanded to a lambda expression:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;iterator &lt;&#x2F;span&gt;&lt;span&gt;() ) {
&lt;&#x2F;span&gt;&lt;span&gt;…
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And this lambda expression is equivalent to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Iterator&amp;lt;String&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }} &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  …
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last snippet is rather bloated, as inner classes have always been in Java.&lt;&#x2F;p&gt;
&lt;p&gt;The magic which is happening is done by Java 8 new features “method references” and the “functional interfaces”. A functional interface is a java interface which only has one method to implement. “default” methods don’t count. Looking at &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; this is the case. So an &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; can be implemented with a lambda expression and or method reference. But for the for-each loop, Java does not “know” what you have mind. This is where the cast comes into play. By casting the method reference to &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;, Java infers that an &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is requires, which can be provided by the method reference to &lt;code&gt;Iterator&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But looking at &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; there is no &lt;code&gt;@FunctionalInterface&lt;&#x2F;code&gt; present?!&lt;&#x2F;p&gt;
&lt;p&gt;That is right. But &lt;code&gt;@FunctionalInterface&lt;&#x2F;code&gt; is not a requirement for actually being a functional interface. It only tells the compiler to fail if the interface is not. So the downside of this example is, that there is no guarantee that &lt;code&gt;Iterable&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; will always stay a functional interface, since the authors have not committed to that using &lt;code&gt;@FunctionalInterface&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the end, I am not sure if this is a good solution for my original problem. But is still is a fascinating piece of code and a great idea indeed.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Testing Diaspora – Part 3</title>
        <published>2015-12-31T17:26:21+01:00</published>
        <updated>2015-12-31T17:26:21+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/12/31/testing-diaspora-part-3/" type="text/html"/>
        <id>dentrassi.de/blog/2015/12/31/testing-diaspora-part-3/</id>
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;diaspora.png&quot; alt=&quot;diaspora&quot; &#x2F;&gt;This is the third time I am testing &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;diasporafoundation.org&#x2F;&quot;&gt;Diaspora&lt;&#x2F;a&gt;. I never wrote about the other attempts, but between Christmas and New Year a had a bit of time writing this together.&lt;&#x2F;p&gt;
&lt;p&gt;Motivated by &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.heise.de&#x2F;newsticker&#x2F;meldung&#x2F;32C3-Gegen-Gated-Communities-Facebook-muss-seine-Mauern-einreissen-3057076.html&quot;&gt;the article at Heise about diaspora&lt;&#x2F;a&gt;, I decided it is time to give diaspora another try. I did try the first version after the crowdfunding campaign and one or two years later.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;For this test is registered at “despora.de” right here: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;despora.de&#x2F;u&#x2F;ctron&quot;&gt;https:&#x2F;&#x2F;despora.de&#x2F;u&#x2F;ctron&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The first thing I have to say is that it still is a problem to start right away. There are a lot of pods (diaspora servers) running, where you can easily create a new account right away. But then … I did register an account at joindiaspora.org a few years back. Just to find out now that this pod runs on a pretty old version of diaspora and does not accept any new registrations. It looks kind of dead to me. Now I have my account on a pod, I can download my account data. But I cannot migrate my account to a new pod. I have to start from scratch and lost all my social activity. Not that I did much with that account ;-)&lt;&#x2F;p&gt;
&lt;p&gt;So in the end you somehow want to be in control over your pod. And having a diaspora ID which contains your own domain name is just another reason for that. But setting up diaspora is a nightmare. Looking at the different ways, you do need a full virtual server or pay at least $15 each month for running your own cloud instance at some cloud provider when using the Bitnami variant of diaspora. Bitnami again has changed diaspora in some ways, so that diaspora themself ask you to look into the Bitnami wiki first. A few other cloud based approaches ask you to fork and edit the diaspora git repository for a start.&lt;&#x2F;p&gt;
&lt;p&gt;I wouldn’t mind paying a few bucks for hosting my own pod, but paying for a full blowing virtual server and setting up things like redis for one or two accounts on this hud is just oversized.&lt;&#x2F;p&gt;
&lt;p&gt;Joining a pre-existing pod on the other hand, seems like a bad idea, unless you really know who is running the pod. In the end you trust your social account and data to somebody you either don’t know and are not sure that they will keep the pod (and thus your social identity) running as long as you like it.&lt;&#x2F;p&gt;
&lt;p&gt;Of course the same is true for Facebook, Google+ and all the others. But diaspora wants to make a change. So setting up a pod or getting an account that you really control must get simpler!&lt;&#x2F;p&gt;
&lt;p&gt;As it looks to me, right now the diaspora software itself targets installations for a bigger number of users. So each pod should by capable of running as many accounts as possible (although diaspora itself is decentralized). And it really is good that there is a protocol between pods which can be implemented in a different way. So there are implementations of the diaspora protocol which are not based on the diaspora source code itself.&lt;&#x2F;p&gt;
&lt;p&gt;But back to the problem of running a pod that you control. Either there is a “light version” of a pod, which supports a few users instead of a thousand, then sharing a virtual server would be much easier. A docker container, an OpenShift instance, some micro instance on Google Cloud or AWS. That would be much cheaper.&lt;&#x2F;p&gt;
&lt;p&gt;At the same time this would allow one to run diaspora in a Raspberry Pi like device at home. If you are only hosting one or two accounts, your local DSL line is pretty much sufficient for running your own pod.&lt;&#x2F;p&gt;
&lt;p&gt;As sad as it is, I guess this means seeing you all for part #4 in a few years. If you have some spare time, I think contributing to diaspora is a great idea, because the idea behind diaspora is great. But right now, it simply is not my cup of tea.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Christmas presents – sell&#x2F;recycle for charity</title>
        <published>2015-12-29T18:07:21+01:00</published>
        <updated>2015-12-29T18:07:21+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/12/29/christmas-presents-sellrecycle-for-charity/" type="text/html"/>
        <id>dentrassi.de/blog/2015/12/29/christmas-presents-sellrecycle-for-charity/</id>
        <content type="html">&lt;p&gt;Before and on Christmas most people think about people in need, and hopefully donate something. Not necessarily money, but presents as well.&lt;&#x2F;p&gt;
&lt;p&gt;But after Christmas there are lots of unwanted presents and things you don’t need, don’t like or will ever use. In most cases these items end up in the trash, at some shelf or, at best, being returned to the store.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Now just think of a different way. If you could just put those presents up at E-Bay, in a charity special. You start an auction, put up your unwanted presents and select some registered non-profit organization that will receive the money. E-bay won’t charge you for the transaction, at least for those charity auctions.&lt;&#x2F;p&gt;
&lt;p&gt;Sounds like a great idea to me.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Test driving &quot;Mattermost&quot; at the Eclipse Foundation</title>
        <published>2015-12-16T13:05:59+01:00</published>
        <updated>2015-12-16T13:05:59+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/12/16/test-driving-mattermost-at-the-eclipse-foundation/" type="text/html"/>
        <id>dentrassi.de/blog/2015/12/16/test-driving-mattermost-at-the-eclipse-foundation/</id>
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;matermost_square.png&quot; alt=&quot;Mattermost Logo&quot; &#x2F;&gt; Thanks to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;bruncedric&quot;&gt;@bruncedric&lt;&#x2F;a&gt; and the Eclipse Webmasters we were able to quickly start a test of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.mattermost.org&#x2F;&quot;&gt;Mattermost&lt;&#x2F;a&gt; at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mattermost-test.eclipse.org&quot;&gt;https:&#x2F;&#x2F;mattermost-test.eclipse.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;“Mattermost” is a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;slack.com&#x2F;&quot;&gt;Slack&lt;&#x2F;a&gt;&#x2F;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.hipchat.com&#x2F;&quot;&gt;HipChat&lt;&#x2F;a&gt;&#x2F;… like web messaging system (aka webchat). I don’t want to go into too much detail of the system itself, but the main idea is to have a “faster-than-email” communication form for a team of people. Comparable to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Internet_Relay_Chat&quot;&gt;IRC&lt;&#x2F;a&gt;, but more HTML5-ish. It also features a REST API, which can be used to automate inbound and outbound messages to the different channels.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Why not Slack or HipChat? Simply because the Eclipse Foundation requires its IT components to be based on open source solutions and not rely on any service which can go away at any moment, without the possibility to rescue your data in a portable format. Which is quite a good approach if you ask me. Just imaging you have years of data and loose it due to fact that your service provider simply shuts down.&lt;&#x2F;p&gt;
&lt;p&gt;So right now there is a Mattermost instance at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mattermost-test.eclipse.org&quot;&gt;https:&#x2F;&#x2F;mattermost-test.eclipse.org&lt;&#x2F;a&gt; which is intended to be a setup for testing “Mattermost” and figuring out how it can be used to give Eclipse projects a benefit. Simply adding more technical gimmicks might not always be a good idea.&lt;&#x2F;p&gt;
&lt;p&gt;Also does &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;packagedrone.org&quot;&gt;Package Drone&lt;&#x2F;a&gt; have &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mattermost-test.eclipse.org&#x2F;eclipse&#x2F;channels&#x2F;package-drone&quot;&gt;a channel at mattermost&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So go ahead and give it a test run …&lt;&#x2F;p&gt;
&lt;p&gt;… if you have troubles or ideas … just look at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mattermost-test.eclipse.org&#x2F;eclipse&#x2F;channels&#x2F;mattermost&quot;&gt;eclipse&#x2F;mattermost&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Parsing RPMs in Java</title>
        <published>2015-12-03T21:36:52+01:00</published>
        <updated>2015-12-03T21:36:52+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/12/03/parsing-rpms-in-java/" type="text/html"/>
        <id>dentrassi.de/blog/2015/12/03/parsing-rpms-in-java/</id>
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;RPM_Logo.svg_.png&quot; alt=&quot;RPM&quot; &#x2F;&gt;The core idea of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;packagedrone.org&quot;&gt;Package Drone&lt;&#x2F;a&gt; is to extract meta data from files and generated some sort of repository index. And although Package Drone’s main focus is on OSGi, we did want to implement a YUM repository adapter and for this we needed to extract metadata from RPM files.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Package Drone itself is written in Java. So I wanted some sort of Java approach. Of course it would be possible to run the &lt;code&gt;rpm&lt;&#x2F;code&gt; command in the background, parse the output somehow and gather the meta data information from that. Or make a JNI wrapper to &lt;code&gt;librpm&lt;&#x2F;code&gt; and extract the information with a native library call. However this is not only prone to error, but also a nightmare when it comes to porting.&lt;&#x2F;p&gt;
&lt;p&gt;So I really was looking for a plain Java solution, which also was compatible with the license of Eclipse (EPL). I came across &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;jrpm.sourceforge.net&#x2F;&quot;&gt;jRPM&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;craigwblake&#x2F;redline&quot;&gt;redline&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;jRPM was last updated around 2005, still has an Apache 1.1 license and simply stuck in the past. redline is more up to date and sounded promising at first, but then the library is really more like a jar file with some “main” entry points and an ant task. There is no clear API for programmatically reading the RPM files. And the legal aspect was a little bit troublesome to me. 28 contributors according to GitHub, no CLA, an “MIT license” from a company simple named “FreeCompany” and the Google Tracking code backed right into the Maven POM file. So, I had to do it myself ;-)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-fresh-start&quot;&gt;A fresh start&lt;&#x2F;h2&gt;
&lt;p&gt;So not to fall into the same pitfalls, I did start to write a parsing library first, instead of directly writing the Package Drone extractor module. This way there is now a clean library which can parse RPM files. It also is an OSGi bundle, which was necessary for Package Drone, but does not make use of any OSGi functionality. So it still can be used as a simple JAR file. Licensed under the EPL, as requirement for Eclipse projects anyway and the Eclipse CLA and IP process to take care of the legal aspects. And if you are an Eclipse project, you even don’t need a CQ to use it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-the-catch&quot;&gt;What’s the catch?&lt;&#x2F;h2&gt;
&lt;p&gt;I did implement what I needed. And that was reading RPM metadata and building a YUM repository index. So writing RPM files or reading&#x2F;writing signatures is not possible at the moment. However there are plans to sign YUM repositories and RPM files as well. So this limitation is only a matter of time. Also are there some fields which are not mapped to enums. RPM used numeric IDs internally, many are mapped, but not all. You can still access those, but by number not by enum in that case.&lt;&#x2F;p&gt;
&lt;p&gt;Also is this library currently not on maven central. But again, I am also working an a “deploy to Maven Central” feature in Package Drone, which will clear that blocker.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;so-where-are-we-now&quot;&gt;So where are we now?&lt;&#x2F;h2&gt;
&lt;p&gt;So the code is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;packagedrone&#x2F;tree&#x2F;master&#x2F;bundles&#x2F;org.eclipse.packagedrone.utils.rpm&quot;&gt;right here&lt;&#x2F;a&gt; on GitHub. In a few weeks we will have a binary download, but right now the Eclipse IP process has to clear the way first.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;packagedrone&#x2F;blob&#x2F;master&#x2F;bundles&#x2F;org.eclipse.packagedrone.utils.rpm.tests&#x2F;src&#x2F;org&#x2F;eclipse&#x2F;packagedrone&#x2F;utils&#x2F;rpm&#x2F;tests&#x2F;InputStreamTest.java&quot;&gt;source code of the test case&lt;&#x2F;a&gt; you can see how this library works. Instead of working on a plain &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;io&#x2F;File.html&quot;&gt;File&lt;&#x2F;a&gt;, it can work on an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;io&#x2F;InputStream.html&quot;&gt;InputStream&lt;&#x2F;a&gt;, which can be important if your RPM file comes from a remote location.&lt;&#x2F;p&gt;
&lt;p&gt;The following example shows how to extract metadata and content from an RPM file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RpmInputStream&lt;&#x2F;span&gt;&lt;span&gt; in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RpmInputStream&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;FileInputStream&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;file.rpm&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))) {  
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)in.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getPayloadHeader &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getTag &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RpmTag&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CpioArchiveInputStream&lt;&#x2F;span&gt;&lt;span&gt; cpio &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; in.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getCpioStream &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;CpioArchiveEntry&lt;&#x2F;span&gt;&lt;span&gt; entry;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;((entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; cpio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getNextCPIOEntry &lt;&#x2F;span&gt;&lt;span&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;process &lt;&#x2F;span&gt;&lt;span&gt;( entry );  
&lt;&#x2F;span&gt;&lt;span&gt; }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is also the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;doc.packagedrone.org&#x2F;javadoc&#x2F;de&#x2F;dentrassi&#x2F;rpm&#x2F;package-summary.html&quot;&gt;older JavaDoc&lt;&#x2F;a&gt;, which has to be updated to reflect the change to &lt;code&gt;org.eclipse.packagedrone&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-next&quot;&gt;What’s next?&lt;&#x2F;h2&gt;
&lt;p&gt;Of course a binary release at Eclipse, an updated JavaDoc and publishing the binaries to Maven Central. Beside extending the library to be able to sign and write RPM files.&lt;&#x2F;p&gt;
&lt;p&gt;If you like to help or need some help using it, just let me know!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>The ConPanion</title>
        <published>2015-11-29T21:12:19+01:00</published>
        <updated>2015-11-29T21:12:19+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/11/29/the-conpanion/" type="text/html"/>
        <id>dentrassi.de/blog/2015/11/29/the-conpanion/</id>
        <content type="html">&lt;p&gt;While preparing for EclipseCon Europe 2015 (a few weeks back I have to say, it was a great conference) I again wanted to a have a small mobile helper. So instead of forgetting (again) about it, this time I briefly wrote it down. So here it is.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Going to a conference I do want to have the schedule in advance, I want a nicely rendered view on my mobile phone, offline(!), making plans which talks to attend while riding public transportation. Clicking together a plan. Now for this to work, the conference itself has to provide some sort of data set to make this happen. I really don’t want to have a specific mobile app for each conference. Also adding all the features I do have in mind would crash all budgets which might be available for a single conference. No, the basic idea is to make one tool and let the conference publish the information itself. So the tool simply picks up this … let’s say, XML file, containing all the information necessary for the mobile helper (ok, use JSON if you like that better).&lt;&#x2F;p&gt;
&lt;p&gt;So the effort for the user is to download the app (once) and the conference simply has to provide (and update) an XML file. This is “Tier 1” or the “Free Tier”.&lt;&#x2F;p&gt;
&lt;p&gt;Now we do have two additional tiers (groups of services) which could be used to bring in money, but in any way they will cost money for hosting.&lt;&#x2F;p&gt;
&lt;p&gt;The first group of extensions is some sort of default, additional services around the conference. Like ad-hoc meetings for example. Type a hashtag and create a new ad-hoc meeting and gather a interested persons to have a chat (an easier version of EclipseCon’s BoFs). This requires some backend service, to money has to be spent and in the other way round it has to be earned. Of course it would also be possible to offer car rentals, hotel reservations etc.&lt;&#x2F;p&gt;
&lt;p&gt;The second group of extensions to the app would be the service to host the content for the conventions. Not all conventions are softare developer conferences (at least I heard that), so maybe the conference does not want to fiddle around with the XML data set itself, but have a beautifully designed web UI which does all the magic.&lt;&#x2F;p&gt;
&lt;p&gt;I did write up the ideas in a PDF file, but don’t expect too much additional information. This is the basic idea.&lt;&#x2F;p&gt;
&lt;p&gt;Read the PDF: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;ConPanion.pdf&quot;&gt;ConPanion.pdf&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Managing Eclipse Projects</title>
        <published>2015-10-07T11:42:00+02:00</published>
        <updated>2015-10-07T11:42:00+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/unsorted/managing-eclipse-projects/" type="text/html"/>
        <id>dentrassi.de/pages/unsorted/managing-eclipse-projects/</id>
        <content type="html">&lt;p&gt;This is my personal cheat sheet for managing projects at the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&quot;&gt;Eclipse Foundation&lt;&#x2F;a&gt;. It assumes that you already have an approved project. If you are interested in learning how to start a project at Eclipse, read &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;Development_Resources&#x2F;HOWTO&#x2F;Starting_A_New_Project&quot;&gt;Starting a new project&lt;&#x2F;a&gt;. This document is neither an official document of the Eclipse Foundation nor &lt;q&gt;the way to go&lt;&#x2F;q&gt;, but maybe it helps someone.&lt;&#x2F;p&gt;
&lt;p&gt;Also see the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;projects&#x2F;handbook&quot;&gt;Eclipse project handbook&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All links in this document, which are project specific, will target the project &lt;q&gt;Eclipse Package Drone&lt;&#x2F;q&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-a-new-project&quot;&gt;Setting up a new project&lt;&#x2F;h2&gt;
&lt;p&gt;At first you will receive an e-mail telling you that your project is ready. Wait for this e-mail.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;incubation-phase&quot;&gt;Incubation phase&lt;&#x2F;h2&gt;
&lt;p&gt;New projects will normally be started in the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;Development_Resources&#x2F;HOWTO&#x2F;Incubation_Phase&quot;&gt;Incubation phase&lt;&#x2F;a&gt;. This means that you have to add special branding, making others aware of the fact that your projects in in some sort of &lt;q&gt;early stage&lt;&#x2F;q&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;project-meta-data&quot;&gt;Project meta data&lt;&#x2F;h2&gt;
&lt;p&gt;The Eclipse Foundation maintains a project information database which holds a set of information about the project, like repositories, descriptions, releases, reviews. You should probably &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;Development_Resources&#x2F;HOWTO&#x2F;Project_Meta-Data&quot;&gt;update the project metadata&lt;&#x2F;a&gt; every now and then.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-a-web-presence&quot;&gt;Setting up a web presence&lt;&#x2F;h2&gt;
&lt;p&gt;You will get a default web presence at &lt;code&gt;http:&#x2F;&#x2F;eclipse.org&#x2F;&amp;lt;my-project&amp;gt;&lt;&#x2F;code&gt; e.g. &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eclipse.org&#x2F;packagedrone&quot;&gt;http:&#x2F;&#x2F;eclipse.org&#x2F;packagedrone&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Request a web presence as described here: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;projects&#x2F;handbook&#x2F;#resources-website&quot;&gt;https:&#x2F;&#x2F;www.eclipse.org&#x2F;projects&#x2F;handbook&#x2F;#resources-website&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>You left your phone!</title>
        <published>2015-10-02T10:14:04+02:00</published>
        <updated>2015-10-02T10:14:04+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/10/02/you-left-your-phone/" type="text/html"/>
        <id>dentrassi.de/blog/2015/10/02/you-left-your-phone/</id>
        <content type="html">&lt;p&gt;Dear Google,&lt;&#x2F;p&gt;
&lt;p&gt;Today it happened again. I left my mobile phone at home. I realized that before entering the train, so I went back, grabbed it and went back to catch the next train. This gave me a few minutes to think about that ;-)&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;You got Android Wear&#x2F;Watch and already have the smart unlock functionality where your watch (if it is near your phone) can unlock it.&lt;&#x2F;p&gt;
&lt;p&gt;Now you also could detect the opposite scenario, my watch detects it lost the “visibility” of the my mobile phone, so an alarm could pop up on my watch, notifying me about the fact that it left my phone. I can dismiss the alarm, and decide if I go back.&lt;&#x2F;p&gt;
&lt;p&gt;This might cause a few false alarms, but with a small set of additional rules (like “only do this at home&#x2F;work”, only do this around 8 am and 6 pm) these could be reduced quite a bit.&lt;&#x2F;p&gt;
&lt;p&gt;Please let me know when you are ready.&lt;&#x2F;p&gt;
&lt;p&gt;Kind regards&lt;&#x2F;p&gt;
&lt;p&gt;Jens&lt;&#x2F;p&gt;
&lt;p&gt;PS: Actually I do need to buy a watch for that …&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Java 8 streaming – or not?</title>
        <published>2015-09-18T15:35:50+02:00</published>
        <updated>2015-09-18T15:35:50+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/09/18/java-8-streaming-or-not/" type="text/html"/>
        <id>dentrassi.de/blog/2015/09/18/java-8-streaming-or-not/</id>
        <content type="html">&lt;p&gt;One of the most advertised use cases of the new lambdas in Java 8 is the possibility to &lt;q&gt;stream&lt;&#x2F;q&gt; collections and transform it. The “series of tubes” has a lot of examples on how to do this, I just wanted to look at it from a different perspective, readability.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;So starting with a real-life problem of a map &lt;code&gt;Map&amp;lt;ResultKey, List&amp;gt; result&lt;&#x2F;code&gt; which I want to transform into a &lt;code&gt;Set&amp;lt;String&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Before Java 8, I had something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt; ();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ResultEntry&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;values &lt;&#x2F;span&gt;&lt;span&gt;() ) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ResultEntry&lt;&#x2F;span&gt;&lt;span&gt; entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; list ) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getAction &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Action&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DELETE &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getArtifact &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getId &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;      ids.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;add &lt;&#x2F;span&gt;&lt;span&gt;( id );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, with Java 8, I can do:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; deleteSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;values &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;flatMap &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;stream &lt;&#x2F;span&gt;&lt;span&gt;() )
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;filter &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getAction &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Action&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DELETE &lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;entry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; entry.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getArtifact &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getId &lt;&#x2F;span&gt;&lt;span&gt;() )
&lt;&#x2F;span&gt;&lt;span&gt;  .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;collect &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Collectors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;toSet &lt;&#x2F;span&gt;&lt;span&gt;() );
&lt;&#x2F;span&gt;&lt;span&gt;context.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;deleteArtifacts &lt;&#x2F;span&gt;&lt;span&gt;( deleteSet );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Neither one is shorter nor seems less complex from an initial view. So, which one is &lt;q&gt;better&lt;&#x2F;q&gt;?&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Searching for lyrics in Google Music</title>
        <published>2015-09-01T10:06:53+02:00</published>
        <updated>2015-09-01T10:06:53+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/09/01/searching-for-lyrics-in-google-music/" type="text/html"/>
        <id>dentrassi.de/blog/2015/09/01/searching-for-lyrics-in-google-music/</id>
        <content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;gmusic-150x150.png&quot; alt=&quot;google music logo&quot; &#x2F;&gt;Dear Google,&lt;&#x2F;p&gt;
&lt;p&gt;as a subscriber of Google Music I often search for music I listened to in the past. In many cases I do know the title, artist or sometime the name of the album.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;But sometimes I just remember a fragment of the lyrics. However, searching for a fragment from the lyrics brings up nothing useful in Google Music.&lt;&#x2F;p&gt;
&lt;p&gt;So please Google, allow me to search not only for meta data like title, artist or album, but also for lyrics.&lt;&#x2F;p&gt;
&lt;p&gt;And while you are at it, please also let me limit the search afterwards, like a time period (the 90s), a genre (Rock), a language (some German bands do use English album title, but produce German lyrics), a country of origin (yes, German bands are capable of singing English lyrics).&lt;&#x2F;p&gt;
&lt;p&gt;You are the &lt;q&gt;search giant&lt;&#x2F;q&gt; … aren’t you?&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Calling from Google search</title>
        <published>2015-08-15T17:31:51+02:00</published>
        <updated>2015-08-15T17:31:51+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/08/15/calling-from-google-search/" type="text/html"/>
        <id>dentrassi.de/blog/2015/08/15/calling-from-google-search/</id>
        <content type="html">&lt;h2 id=&quot;dear-google&quot;&gt;Dear Google …&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;&#x2F;dentrassi.de&#x2F;wp-content&#x2F;uploads&#x2F;Bildschirmfoto-2015-08-15-um-17.18.49.png&quot; alt=&quot;Bildschirmfoto 2015-08-15 um 17.18.49&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;… I just did a search for some business an Google and actually the first hit and the suggestion box on the right side is the perfect match for what I was looking for. The &lt;a href=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;Bildschirmfoto-2015-08-15-um-17.18.49.png&quot;&gt;info box&lt;&#x2F;a&gt; contains all the relevant information, including the phone number, which is a clickable link.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Now I did the search on the desktop computer and not on my mobile phone. Clicking the link automatically starts Google Hangout with a call to that telephone number, without asking for confirmation. Too bad that the computer does not have a microphone attached.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;so-please&quot;&gt;So please…&lt;&#x2F;h2&gt;
&lt;p&gt;… instead of dialing from my desktop computer, with Hangout, I would rather want to see a small confirmation box, which (once pressed “OK” or “Yes” or whatever) sends a message to my mobile phone, triggering the call to this telephone number.&lt;&#x2F;p&gt;
&lt;p&gt;Since I was already logged in with my Google Account when doing the search, there should be no problem detecting my Google registered Android phone, and sending a Google Cloud 2 Device Message which triggers the call. You can do the same using “Chrome to Phone” for web pages.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully you can add this in a future release ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Maven Tycho&#x2F;JGit based build timestamps and the `target` directory</title>
        <published>2015-07-28T09:39:20+02:00</published>
        <updated>2015-07-28T09:39:20+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/07/28/maven-tychojgit-based-build-timestamps-and-the-target-directory/" type="text/html"/>
        <id>dentrassi.de/blog/2015/07/28/maven-tychojgit-based-build-timestamps-and-the-target-directory/</id>
        <content type="html">&lt;p&gt;Now when you build OSGi bundles using Maven &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;tycho&#x2F;&quot;&gt;Tycho&lt;&#x2F;a&gt;, you probably ran into the issue of creating a meaningful version qualifier (remember, an OSGi versions always is &lt;code&gt;major.minor.micro.qualifier&lt;&#x2F;code&gt;, so no dash and definitely no &lt;code&gt;-SNAPSHOT&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;There are a few approaches ranging from fully manual assignment of the build qualifier, simple timestamps and timestamps based on the last Git change.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;the-background&quot;&gt;The background&lt;&#x2F;h2&gt;
&lt;p&gt;The latter one is described in the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;Tycho&#x2F;Reproducible_Version_Qualifiers&quot;&gt;“Reproducible Version Qualifiers”&lt;&#x2F;a&gt; wiki page of Tycho as a recipe to create the same qualifier from the same source code revision.&lt;&#x2F;p&gt;
&lt;p&gt;Actually the idea is pretty simple, so instead of the current timestamp, the last relevant change in the git repository, for the directory of the bundle, is located and then used to generate the timestamp based qualifier.&lt;&#x2F;p&gt;
&lt;p&gt;As a side note: Personally I came to the conclusion, that this sounds great in the beginning, but turns out to be troublesome later. First if all, the Build Qualifier plugin conflicts with the Source Ref Plugin, which generates a different manifest. Both plugins find different &lt;q&gt;last commits&lt;&#x2F;q&gt; and therefore a different &lt;tt&gt;MANIFEST.MF&lt;&#x2F;tt&gt; gets generated. So two builds produce two bundles, with the same qualifier, but actually (due to the &lt;tt&gt;MANIFEST.MF&lt;&#x2F;tt&gt;) different content, with two different checksums, which causes issues later on and has to be cleaned up by some &lt;q&gt;baseline&lt;&#x2F;q&gt; repository matching. In addition you simple cannot guarantee that two different builds come to the same result. Too many components (actually Maven and the local host) are outside of the source code repository and still influence the output of the build. But this post is about the JGit based timestamps ;-)&lt;&#x2F;p&gt;
&lt;p&gt;A simple configuration using the Git based approach looks like this in the parent &lt;tt&gt;pom&lt;&#x2F;tt&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.eclipse.tycho&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;tycho-packaging-plugin&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${tycho.version}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.eclipse.tycho.extras&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;tycho-buildtimestamp-jgit&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${tycho-extras.version}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;configuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;timestampProvider&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;jgit&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;timestampProvider&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jgit.ignore&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pom.xml
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jgit.ignore&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;configuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, there is a configuration property &lt;code&gt;jgit.ignore&lt;&#x2F;code&gt; which allows to exclude a set of files in the search of the last relevant commit. So git changes, which are only changing files which are ignored, are also ignored in this search for the last modification timestamp. Since the &lt;tt&gt;pom.xml&lt;&#x2F;tt&gt; will probably just get changed to point to a different parent POM, this seems like a good idea.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;&#x2F;h2&gt;
&lt;p&gt;Now what does happen, when there are uncommitted changes in the working tree? Then it would not be possible for the build to determine the last relevant commit, since the change is not committed! Maven Tycho does provide a way to handle this (aka “Dirty working tree behaviour”) and will allow you to ignore this. Which might not be a good idea after all. The default behavior is to simply error and fail the build.&lt;&#x2F;p&gt;
&lt;p&gt;For me it became a real annoyance when it complained about the “&lt;tt&gt;target&lt;&#x2F;tt&gt;” directory itself. The truth is, this output directory should be added to the “&lt;tt&gt;.gitignore&lt;&#x2F;tt&gt;” file anyway, which would then also be respected by the git based build timestamp provider. But then again it should not fail the build just because of that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;&#x2F;h2&gt;
&lt;p&gt;But the solution to that was rather trivial. The &lt;tt&gt;jgit.ignore&lt;&#x2F;tt&gt; property follows the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;gitignore&quot;&gt;git ignore syntax&lt;&#x2F;a&gt; and also allows to specify directories:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jgit.ignore&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;pom.xml
&lt;&#x2F;span&gt;&lt;span&gt;target&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jgit.ignore&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are two things which have to be kept in mind: each entry goes to a new line, the root of the evaluation seems no the be the root of the project, so using “&lt;tt&gt;&#x2F;target&#x2F;&lt;&#x2F;tt&gt;” (compared to “&lt;tt&gt;target&#x2F;&lt;&#x2F;tt&gt;“) does not work.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Safer surfing for kids – My wishlist</title>
        <published>2015-07-26T19:15:30+02:00</published>
        <updated>2015-07-26T19:15:30+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/07/26/safer-surfing-for-kids-my-wishlist/" type="text/html"/>
        <id>dentrassi.de/blog/2015/07/26/safer-surfing-for-kids-my-wishlist/</id>
        <content type="html">&lt;p&gt;At some point my son will start surfing … the web. Now as with all other things, I’d like to protect him, but I also know, there is nothing like a 100% security, neither in real life, nor in the internet. The main task for me, as a parent, it so prepare him. I’d like a bit of technical help though. Here is my list of wishes.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I know that this is a troublesome topic, and several approaches have already been tried. Some people in Germany came up with ideas limiting child unfriendly content to times after 10pm (like for TV channels), or prohibit entrance to those sites (like shops in the “real world”). And while is do understand the idea of actually restricting access I personally think that it is more the parents task to explain the situation, rather than to blame others when something went wrong. But on the other side, I also do think that children should be prevented from stumbling in to something by accident, which is not suited for them.&lt;&#x2F;p&gt;
&lt;p&gt;The main thing most people calling for limits on content on this topic do wrong is that they compare the internet with the real world. The fact is, that between a website and the browser on the other side, nothing is sure. If you do want to buy alcohol and you do look “too young”, you will get asked for your id&#x2F;passport. Easy. But which browser session looks “too young”, which “id” is actually shown? The internet just does not work that way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;so-what-can-be-done&quot;&gt;So what can be done?&lt;&#x2F;h2&gt;
&lt;p&gt;Simple filtering and limiting all and everything is a crappy solution. And, looking at Great Britain, for example easily tells you what can go wrong. First everybody who feared that this could be used for censoring content was put up as an idiot, and then websites got blocked which had nothing to do with “unsuitable” content.&lt;&#x2F;p&gt;
&lt;p&gt;So what do I want? That is easy, I want to put up limits. Me, as a parent. So if I decide “no naked breasts” I make this decision, and I don’t want Facebook to make that decision for me, or my son. So people providing content to need to categorize it, flag it with tags which might indicate offensive content. Impossible? This is done every day for video games, books and movies. And even there you can see the “full control” idea failing, which some people have. Sure, some movies are not sold to children because of age restrictions, but parents easily can circumvent that. So again, parents are making these decisions, so let them!&lt;&#x2F;p&gt;
&lt;p&gt;And, these categorizations have to be on a “best effort” basis, and non binding, if you do want to get content providers into this. If you make the providers of content in the web responsible for not flagging content, everybody will step back and fight the system, because everybody working with web services and content knows that the web really is a web. Content is integrated from difference sources, and somebody might just write the word “fuck” in a comment for a USB hub he bought on Amazon, still Amazon should not be made reliable for not flagging its store, or this page, as “unsuitable for children” or “hate speech”, this will simply not work.&lt;&#x2F;p&gt;
&lt;p&gt;Second, allow me to set up my browser, or the browser of my son, to reject content with specific flags. This can also be done in “incognito mode”, no harm done. When content comes back, categories (provided vs blocked) are evaluated and the page is shown or not.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-get-there&quot;&gt;How to get there&lt;&#x2F;h2&gt;
&lt;p&gt;So this would basically be enough. But now, who has an interest to actually limit their audience. Because this is what a web site owner actually does. First you have the effort of categorizing your website, and next your audience is getting smaller because of just that.&lt;&#x2F;p&gt;
&lt;p&gt;So making this as easy as possible from a technical perspective is a must. As is the fact that content providers must not be made liable for glitches in their categorizations. It is about the core content of the web site, not details. In a social media website there might turn up naked people, but as long as this is not a website about naked people, it is a glitch in the system.&lt;&#x2F;p&gt;
&lt;p&gt;Give web site owners who categorize their content a benefit over others. Now who can do this? Easy, search engines! If you want more traffic than others, categorize your content!&lt;&#x2F;p&gt;
&lt;p&gt;Which adds another benefit: Search engine results can be marked if they are suitable for your browser setup or not. If the browser does send its category permissions to the web site it is visiting, the web site _can_ evaluate this (still the browser has to enforce this), but also the search engine can visually mark content as “not suitable”. Again, filtering this out, is not a good idea. You will never find this content. If something goes wrong, you will never have a talk with your child about why this was flagged wrong, or why this may be an exception to the rules you put up! Your child will learn nothing other than: this is a bad and broken system!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-make-this-easy&quot;&gt;How to make this easy?&lt;&#x2F;h2&gt;
&lt;p&gt;Every page you request will receive your setup in an HTTP header: &lt;code&gt;Rejected-Content-Categories: violence, alcohol&lt;&#x2F;code&gt;, That should be easy, as long as there is a list of well-known categories.&lt;&#x2F;p&gt;
&lt;p&gt;Every response will deliver as similar HTTP response header: &lt;code&gt;Content-Categories: violence, nudity&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Again, very easy. The omission of this header just shows that the categorization process is not being performed. Which brings as back to were we are now. So it is not worse.&lt;&#x2F;p&gt;
&lt;p&gt;For the main HTTP request this is being evaluated, for sub-requests (like JavaScript, CSS) this is not. So the header has not to be sent there. But doesn’t that open a loophole where you could load content using Ajax requests and inject this … again, this is a “best-effort” idea, which tries to prevent your child from “stumbling” into this content. If your child wan’t so see naked people, it will probably find a way to do so. Talk with it first! This helps more than any technical barrier!&lt;&#x2F;p&gt;
&lt;p&gt;So in order to not put this header into every reply, it could be sufficient to add this content to a “categories.txt” file in the root of your domain, or into a DNS record if your domain. This would allow to manually categorize your content if your web site software does not support this. This will be evaluated in the order http header, then categories.txt, then DNS record.&lt;&#x2F;p&gt;
&lt;p&gt;Impossible? This is currently done by SPF for detecting spam or you have the “robots.txt” for your content.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;so-what-would-be-have&quot;&gt;So what would be have?&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;The browser tells the other side (the website) what it rejects by sending the HTTP header &lt;code&gt;Rejected-Content-Categories&lt;&#x2F;code&gt;. The web site may use this to mark content, reject the request or issue a warning.&lt;&#x2F;li&gt;
&lt;li&gt;Web sites which want to take part of this either reply with an HTTP header &lt;code&gt;Content-Categories&lt;&#x2F;code&gt;, or place this into their “categories.txt”, or add it as a TXT record to their DNS zone.&lt;&#x2F;li&gt;
&lt;li&gt;The browser prevents displaying content which is considered “rejected” on its own.
This would by a set of small changes, drastically improving the situation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-needs-to-be-done&quot;&gt;What needs to be done?&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Create and standardize a list of categories, not too big and easy to understand&lt;&#x2F;li&gt;
&lt;li&gt;Browsers (including mobile browsers!) would need to be changed to adapt this behavior, could also be done as a plug-in&lt;&#x2F;li&gt;
&lt;li&gt;Web site owners would need to categorize their content&lt;&#x2F;li&gt;
&lt;li&gt;Search engines would need to actually evaluate the content and make people aware of this&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-sad-part&quot;&gt;The sad part&lt;&#x2F;h2&gt;
&lt;p&gt;Of course nobody will do this “on their own”. For a critical mass, you would need one mainstream browser, a big search engine, and a few sites which step in.&lt;&#x2F;p&gt;
&lt;p&gt;So if you feel like doing this, let me know, I will help!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update&quot;&gt;Update&lt;&#x2F;h2&gt;
&lt;p&gt;One thing I did not mention was that it is on purpose not to use age restrictions. Again, the internet does not work that way. While in Bavaria the topic of “alcohol” might be considered trivial, in the US it might be a topic which is allowed for people 21+. So you simply cannot group restrictions by age. It might be possible to create a default set of rejection categories based on countries and age, but this is something which could be used as a default setting in the browser.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>A bit of Java 8 Optional&lt;T&gt;</title>
        <published>2015-07-22T17:33:20+02:00</published>
        <updated>2015-07-22T17:33:20+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/07/22/a-bit-of-java-8-optional/" type="text/html"/>
        <id>dentrassi.de/blog/2015/07/22/a-bit-of-java-8-optional/</id>
        <content type="html">&lt;p&gt;For me Java 8 wasn’t a big deal … until I had to go back to Java 7. Suddenly I started missing things I started using without even realizing it. Here comes &lt;tt&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;util&#x2F;Optional.html&quot;&gt;Optional&amp;lt;T&amp;gt;&lt;&#x2F;a&gt;&lt;&#x2F;tt&gt;:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Assume we have some sort of class (&lt;code&gt;Provider&lt;&#x2F;code&gt;) which does something and has a “getName” method. Now we also have a method in a class managing providers which returns the provider &lt;q&gt;by id&lt;&#x2F;q&gt;, so we pass in a string ID and get back a provider:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;static class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getName &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getProvider &lt;&#x2F;span&gt;&lt;span&gt;(final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; id) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;equals &lt;&#x2F;span&gt;&lt;span&gt;( id )) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this simple example the manager only knows the provider “foo”, which will return “bar” as its name. All requests for other providers will return &lt;code&gt;null&lt;&#x2F;code&gt;. A real life scenario might have a &lt;code&gt;Map&lt;&#x2F;code&gt;, which also returns &lt;code&gt;null&lt;&#x2F;code&gt; in case of a missing element.&lt;&#x2F;p&gt;
&lt;p&gt;Now a pretty common code snippet before Java 8 would look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt; provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getProvider &lt;&#x2F;span&gt;&lt;span&gt;( “bar” );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; value;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; provider.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getName &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;println &lt;&#x2F;span&gt;&lt;span&gt;( “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span&gt;(pre8)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; “ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; value );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pretty noisy. So the first step is to use the “Optional” type, and to guarantee that the &lt;code&gt;getProvider&lt;&#x2F;code&gt; method never returns &lt;code&gt;null&lt;&#x2F;code&gt;. So we don’t have to check for it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getOptionalProvider &lt;&#x2F;span&gt;&lt;span&gt;( final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; id ) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ofNullable &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getProvider &lt;&#x2F;span&gt;&lt;span&gt;( id ) );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case a new method was added, which simply calls the old one. The next thing is to use &lt;tt&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;util&#x2F;Optional.html#map-java.util.function.Function-&quot;&gt;Optional.map(…)&lt;&#x2F;a&gt;&lt;&#x2F;tt&gt; and &lt;tt&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;util&#x2F;Optional.html#orElse-T-&quot;&gt;Optional.orElse(…)&lt;&#x2F;a&gt;&lt;&#x2F;tt&gt; to transform the value and return a default if we don’t have a value.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; value1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getOptionalProvider &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;foo&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;)  
&lt;&#x2F;span&gt;&lt;span&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getName &lt;&#x2F;span&gt;&lt;span&gt;)  
&lt;&#x2F;span&gt;&lt;span&gt; .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;orElse &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;);  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;println &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Foo: &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; value1 );  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pretty simple actually. But still readable and understandable (although some people might disagree on that one ;-) ).&lt;&#x2F;p&gt;
&lt;p&gt;So what does happen? First the call to &lt;code&gt;getOptionalProvider&lt;&#x2F;code&gt; will now &lt;em&gt;never&lt;&#x2F;em&gt; return &lt;code&gt;null&lt;&#x2F;code&gt;. If the value itself would be &lt;code&gt;null&lt;&#x2F;code&gt;, it would return an empty &lt;code&gt;Optional&lt;&#x2F;code&gt; but still a class instance. Actually always the same, since there is only one instance of an empty &lt;code&gt;Optional&lt;&#x2F;code&gt;. Next the &lt;code&gt;map&lt;&#x2F;code&gt; method will call the provided expression (longer version would be: &lt;code&gt;value -&amp;gt; value.getName()&lt;&#x2F;code&gt;), but the method will only do this if the Optional is not empty. Otherwise it will return an empty Optional again. So after calling &lt;code&gt;map&lt;&#x2F;code&gt; we either have an Optional&amp;lt;String&amp;gt; with the value of &lt;code&gt;getName()&lt;&#x2F;code&gt;, or again an empty Optional. Calling &lt;code&gt;orElse&lt;&#x2F;code&gt; on this new &lt;code&gt;Optional&lt;&#x2F;code&gt; will either return the value of the &lt;code&gt;Optional&lt;&#x2F;code&gt; or the default value provided, &lt;code&gt;null&lt;&#x2F;code&gt; in this case.&lt;&#x2F;p&gt;
&lt;p&gt;Of course one could argue that internally the same logic happens as with Java 7 and before. But I think that this way, you actually can do a &lt;q&gt;one-liner&lt;&#x2F;q&gt; which is understandable but still does not obstruct the your actual class with to many lines of code just or checking about &lt;code&gt;null&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Full sample:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Manager &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;static class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;    String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getName &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getProvider &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;equals &lt;&#x2F;span&gt;&lt;span&gt;( id ) ) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getOptionalProvider &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ofNullable &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getProvider &lt;&#x2F;span&gt;&lt;span&gt;( id ) );
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; value1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getOptionalProvider &lt;&#x2F;span&gt;&lt;span&gt;( “foo” ).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getName &lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;orElse &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;println &lt;&#x2F;span&gt;&lt;span&gt;( “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; “ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; value1 );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; value2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getOptionalProvider &lt;&#x2F;span&gt;&lt;span&gt;( “bar” ).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getName &lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;orElse &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;println &lt;&#x2F;span&gt;&lt;span&gt;( “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; “ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; value2 );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; before Java 8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Provider&lt;&#x2F;span&gt;&lt;span&gt; provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getProvider &lt;&#x2F;span&gt;&lt;span&gt;( “bar” );
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; value3;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( provider &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      value3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; provider.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getName &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      value3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;println &lt;&#x2F;span&gt;&lt;span&gt;( “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span&gt;(pre8)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; “ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; value3 );
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>IAdapterFactory with generics</title>
        <published>2015-07-17T12:37:00+02:00</published>
        <updated>2015-07-17T12:37:00+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/07/17/iadapterfactory-with-generics/" type="text/html"/>
        <id>dentrassi.de/blog/2015/07/17/iadapterfactory-with-generics/</id>
        <content type="html">&lt;p&gt;Now I have been working with the Eclipse platform for quite a while. If you do so, you already might have run into the “adaptable” mechanism the Eclipse platform provides (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.eclipsezone.com&#x2F;articles&#x2F;what-is-iadaptable&#x2F;&quot;&gt;article on EclipseZone&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;the-basics&quot;&gt;The basics&lt;&#x2F;h2&gt;
&lt;p&gt;The basic idea is to “cast” one object into the class of another, allowing to step into the process and maybe return a new object instance if casting is not possible, so adapting to the requested interface. This is nothing new, but comes in handy every now and then. Especially since the Eclipse platform allows an “external” adapter mechanism to control this adaption process. Simply assume you do have a class “MyModelDocument”, which is used throughout your Eclipse application. Now somebody selects the UI element, backed by an instance of your class and you want the Eclipse UI to show the properties of your instance in the Eclipse properties view. This is done by an instance of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;help.eclipse.org&#x2F;mars&#x2F;index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fapi%2Forg%2Feclipse%2Fui%2Fviews%2Fproperties%2FIPropertySource.html&quot;&gt;IPropertySource&lt;&#x2F;a&gt;. At first this would mean you need you class to implement &lt;code&gt;IPropertySource&lt;&#x2F;code&gt; and do this for every other aspect you want to add to your model. In addition of implementing the interface you would also aggregate a lot of dependencies in the bundle of your model.&lt;&#x2F;p&gt;
&lt;p&gt;But there is a better way thanks to the adapter framework. First of all your class “MyModelDocument” can use the adapter framework and simply create and adapter class, which has to implement IPropertySource, but is backed by the original instance of your “MyModelDocument” class. Second, you can create a new bundle&#x2F;plugin which defines an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;help.eclipse.org&#x2F;mars&#x2F;topic&#x2F;org.eclipse.platform.doc.isv&#x2F;reference&#x2F;extension-points&#x2F;org_eclipse_core_runtime_adapters.html?cp=2_1_1_26&quot;&gt;extension point named “org.eclipse.core.runtime.adapters”&lt;&#x2F;a&gt; and implement a class based on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;help.eclipse.org&#x2F;mars&#x2F;topic&#x2F;org.eclipse.platform.doc.isv&#x2F;reference&#x2F;api&#x2F;org&#x2F;eclipse&#x2F;core&#x2F;runtime&#x2F;IAdapterFactory.html&quot;&gt;IAdapterFactory&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generics&quot;&gt;Generics&lt;&#x2F;h2&gt;
&lt;p&gt;Now a typical implementation of this class in Java 5+ looked like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyAdapterFactory &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IAdapterFactory &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;SuppressWarnings &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;unchecked&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getAdapter &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;adaptableObject&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;adapterType &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(adaptableObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyModelDocument&lt;&#x2F;span&gt;&lt;span&gt;) ) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IPropertySource&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;equals &lt;&#x2F;span&gt;&lt;span&gt;( adapterType ) ) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyModelDocumentPropertySourceAdapter &lt;&#x2F;span&gt;&lt;span&gt;( adaptableObject );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;SuppressWarnings &lt;&#x2F;span&gt;&lt;span&gt;( “unchecked” )
&lt;&#x2F;span&gt;&lt;span&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getAdapterList &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;[] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IPropertySource&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course the &lt;code&gt;@SuppressWarnings&lt;&#x2F;code&gt; for “unchecked” could be left out, but would trigger a bunch of warnings. The cause simply was that &lt;code&gt;IAdapterFactory&lt;&#x2F;code&gt; did not provide make use of Java 5 generics.&lt;&#x2F;p&gt;
&lt;p&gt;In a recent update of the Eclipse platform this interface has been extended to allow the use of generics, the method &lt;code&gt;Object getAdapter (…)&lt;&#x2F;code&gt; is now &lt;code&gt;&amp;lt;T&amp;gt; T getAdapter(…)&lt;&#x2F;code&gt;. While this does not really benefit implementations of the class itself (IMHO), it cleans up the warnings if you do it right ;-)&lt;&#x2F;p&gt;
&lt;p&gt;Keep in mind that the type parameter &lt;code&gt;&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is a complete variable thing for the factory itself, since it will allow adapting to any kind if type some other class requests. So you actually will never be able to make a specific substitution for &lt;code&gt;&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;. The return type of &lt;code&gt;getAdapter()&lt;&#x2F;code&gt; will change to &lt;code&gt;T&lt;&#x2F;code&gt;, which requires you to actually cast to &lt;code&gt;T&lt;&#x2F;code&gt;. Which can be done in two ways. Either by casting using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyModelDocumentPropertySourceAdapter &lt;&#x2F;span&gt;&lt;span&gt;( adaptableObject );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which will trigger the next warning right away. Since there is no way to actually do the cast. Type erasure will kill the type information during runtime! The way to work around this has always been in Java to actually pass the type in such situations. Like a &lt;code&gt;TypedQuery&lt;&#x2F;code&gt; in JPA, the &lt;code&gt;IAdapterFactory&lt;&#x2F;code&gt; already has the type information as a parameter an so you can a programmatic cast instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; adapterType.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cast &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyModelDocumentPropertySourceAdapter &lt;&#x2F;span&gt;&lt;span&gt;( adaptableObject ) );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So the full code would look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyAdapterFactory &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IAdapterFactory &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getAdapter &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;adaptableObject&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;adapterType &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;(adaptableObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyModelDocument&lt;&#x2F;span&gt;&lt;span&gt;) ) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IPropertySource&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;equals &lt;&#x2F;span&gt;&lt;span&gt;( adapterType ) ) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; adapterType.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cast &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyModelDocumentPropertySourceAdapter &lt;&#x2F;span&gt;&lt;span&gt;( adaptableObject )
&lt;&#x2F;span&gt;&lt;span&gt;      );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;getAdapterList &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;[] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IPropertySource&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Programmatically adding a host key with JSch</title>
        <published>2015-07-13T18:18:29+02:00</published>
        <updated>2015-07-13T18:18:29+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/07/13/programmatically-adding-a-host-key-with-jsch/" type="text/html"/>
        <id>dentrassi.de/blog/2015/07/13/programmatically-adding-a-host-key-with-jsch/</id>
        <content type="html">&lt;p&gt;This article explains how to programmatically add a host key in Java with JSch. I did update the article early 2018, taking care of the missing argument to the &lt;code&gt;add&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Every now and then you stumble over an issue which seems easy in the beginning, but turns out to be something out of the ordinary.&lt;&#x2F;p&gt;
&lt;p&gt;For example establishing an SSH connection to a Linux server using Java. Of course there is the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.jcraft.com&#x2F;jsch&#x2F;&quot;&gt;JSch&lt;&#x2F;a&gt; library, which is also in Eclipse Orbit. So this sounds like an ideal solution when developing with OSGi.&lt;&#x2F;p&gt;
&lt;p&gt;However pretty soon I ran into the case that I did not want to write all host keys into my “known_hosts” file, but would like to provide the host key to each new connection which is being created. And while JSch can do a lot of things, all sample projects somehow assume you are writing a Swing application, with full user interface, re-using all existing SSH options and configuration files.&lt;&#x2F;p&gt;
&lt;p&gt;But I did want to create a server side solution, embedded in OSGi, which allows to store the username, password and hostkey in a server side data store which can then be used to establish the connection.&lt;&#x2F;p&gt;
&lt;p&gt;So initially I got an “com.jcraft.jsch.JSchException: UnknownHostKey” exception. Not very helpful since it only contains a string with the key’s fingerprint instead of the full key. Asking Google for help brings up few solutions like this one &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;2003419&#x2F;com-jcraft-jsch-jschexception-unknownhostkey&quot;&gt;on Stackoverflow&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However simply disabling the host key check was not an option. And is not a good idea in most cases.&lt;&#x2F;p&gt;
&lt;p&gt;Gladly JSch allows to programmatically add host keys. Although the approach is rather undocumented. At least it seems that way.&lt;&#x2F;p&gt;
&lt;p&gt;Creating a new Jsch instance allows to specify the location of the host keys, but also allows to add them manually:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; keyString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;....&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; parse the key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;byte []&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Base64&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getDecoder&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;decode &lt;&#x2F;span&gt;&lt;span&gt;( keyString ); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Java 8 Base64 - or any other
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JSch&lt;&#x2F;span&gt;&lt;span&gt; jsch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;JSch &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HostKey&lt;&#x2F;span&gt;&lt;span&gt; hostKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HostKey &lt;&#x2F;span&gt;&lt;span&gt;( info.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getHostname &lt;&#x2F;span&gt;&lt;span&gt;(), key );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; add the host key
&lt;&#x2F;span&gt;&lt;span&gt;jsch.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getHostKeyRepository &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;add &lt;&#x2F;span&gt;&lt;span&gt;( hostKey, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Basically this does the trick. The only question is, what exactly is they “keyString”. It is not the fingerprint from the exception and it is not the full line from your known hosts file, just the last segment.&lt;&#x2F;p&gt;
&lt;p&gt;So for example if your “known_hosts” entry is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;|1|DvS0JwyQni+Jqoht2n8BSYQjze4=|zHORICsezHdR1nIYhqsOxrgnUe4= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAwht8wWW+cqmGJa5KrgfgydvlgHxSmlV+8oSUINSm8ix+wG87jQHz56MeaFf0F3IvxiivfvIUxBGlb05CZC1rCTfinvS7H1ktDIwVUK3gv+SGNYtGGwWbtg+oMXAevpV5pMTvDS7Ue6OUnSXGDbAxcqXBA+ApKCG5oizhyrtzOrU=
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the “keyString” is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;AAAAB3NzaC1yc2EAAAABIwAAAIEAwht8wWW+cqmGJa5KrgfgydvlgHxSmlV+8oSUINSm8ix+wG87jQHz56MeaFf0F3IvxiivfvIUxBGlb05CZC1rCTfinvS7H1ktDIwVUK3gv+SGNYtGGwWbtg+oMXAevpV5pMTvDS7Ue6OUnSXGDbAxcqXBA+ApKCG5oizhyrtzOrU=
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Problem solved ;-)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;update&quot;&gt;Update&lt;&#x2F;h3&gt;
&lt;p&gt;After I received a few comments which asked for a missing parameter of the &lt;code&gt;add&lt;&#x2F;code&gt; method (the original blog post only had one argument) I did re-check and also noticed a (second) required argument. I am not sure if I missed this in the original post or if the API has evolved over time. So I did check out what this parameter is about and updated the blog post accordingly.&lt;&#x2F;p&gt;
&lt;p&gt;The second argument is an instance of &lt;code&gt;UserInfo&lt;&#x2F;code&gt; and it if safe to pass in &lt;code&gt;null&lt;&#x2F;code&gt;. &lt;code&gt;UserInfo&lt;&#x2F;code&gt; is a callback type interface which the caller can provide in order to pass on questions from the Jsch code to the end user. In this particular case the JSch method might ask if the parent directories of the host file should be created if they don’t already exists. At the time of writing it seems safe to pass in &lt;code&gt;null&lt;&#x2F;code&gt; if they do exist.&lt;&#x2F;p&gt;
&lt;p&gt;If you can’t be sure that they exist, then you could create them yourself before calling the &lt;code&gt;add&lt;&#x2F;code&gt; method. Or create a bogus “yes” implementation of &lt;code&gt;UserInfo&lt;&#x2F;code&gt;. Manually ensuring that the directories do exist seems the better way to me as otherwise you wouldn’t really know to which question you would actually answer “yes” with your implementation of &lt;code&gt;UserInfo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you pass in &lt;code&gt;null&lt;&#x2F;code&gt; and the directories do no exist, then the host key will not be added and the &lt;code&gt;add&lt;&#x2F;code&gt; method will silently fail.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>The curated Play Store &#x2F; App Store</title>
        <published>2015-07-04T16:57:49+02:00</published>
        <updated>2015-07-04T16:57:49+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/07/04/the-curated-play-store-app-store/" type="text/html"/>
        <id>dentrassi.de/blog/2015/07/04/the-curated-play-store-app-store/</id>
        <content type="html">&lt;p&gt;Dear Google,&lt;&#x2F;p&gt;
&lt;p&gt;every now and then I come up with idea of buying another game in the play store (yes, a mobile game, for Android). So I browse and browse and finally give up again. The main entry views give me a few promoted items, which mostly are uninteresting as a game, the top lists show games which I already checked out the last time, or already bought, the recommendation show hardly any interesting games. The same is true for non-game apps (I wouldn’t always call them productive apps ;-) ).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Even more funny is the rating for normal apps. I do understand that showing more games of the same type is a good idea when I gave 5 stars to the game in question, but when I tell you that I found a (e.g.) file manager that I really like, the least thing I want is another list of similar file managers. I just told you I found a good one! So in the case of normal app, giving 1 star should trigger the “show others” list. But this is only a side quest.&lt;&#x2F;p&gt;
&lt;p&gt;If you got some music subscription service like Spotify, Google Music All Access or whatever you like else, then you pretty soon find out that there is so much music out there, you sometimes wish for somebody to tell you: “Listen to this one”. Google Music does that by suggesting you songs and “radio stations”. But really those radio stations repeat themselves after a few hours of listening. So it seems there is not much AI behind them, probably just a shuffled playlist.&lt;&#x2F;p&gt;
&lt;p&gt;The bright side to this is, both Spotify and Google Music (probably others as well) do have something like “shared playlists”. So once you found somebody you share the same taste, you will probably find more games and apps you like. However, just considering “all apps of this person” a good match is not a good idea. Just consider the fact that some people install all kind of rubbish. On the other hand some people really do have a talent to curate a few play lists.&lt;&#x2F;p&gt;
&lt;p&gt;Now here is what would be a great idea. Curated are there in Youtube (aka Channels, or Playlists), in Google Music (shared playlists), in Spotify (again shared playlists). So instead of letting people search for “best games android 2015”, give people a chance to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create playlists for apps&#x2F;games&lt;&#x2F;li&gt;
&lt;li&gt;Let them embed the playlists in their homepages&lt;&#x2F;li&gt;
&lt;li&gt;Maybe even give them a share on purchased items&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It’s easy! For games they could even be called “play lists” ;-)&lt;&#x2F;p&gt;
&lt;p&gt;PS: I guess the same is still valid for the Apple App Store&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>OSGi + JSP + JSTL</title>
        <published>2015-06-18T16:57:29+02:00</published>
        <updated>2015-06-18T16:57:29+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/06/18/osgi-jsp-jstl/" type="text/html"/>
        <id>dentrassi.de/blog/2015/06/18/osgi-jsp-jstl/</id>
        <content type="html">&lt;p&gt;What is so easy with a standard JEE setup becomes quite painful using OSGi. Although there are very interesting projects and approaches like &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;enroute.osgi.org&quot;&gt;OSGi enRoute&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ops4j&#x2F;org.ops4j.pax.web&quot;&gt;Pax Web&lt;&#x2F;a&gt; or &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eclipse.org&#x2F;equinox&#x2F;server&#x2F;jsp_support.php&quot;&gt;Equinox JSP&lt;&#x2F;a&gt; (and probably a few more), taking a step beyond “Hello World” starts to get quite painful.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;OSGi has had support for registering servlets for quite a while. And it becomes even smoother using the HTTP whiteboard approach. But writing a servlet is, in most cases, not what you actually want. It is more like wiring method calls, service methods calls, to URLs, finally rendering it to HTML. Looking at the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;docs.spring.io&#x2F;spring&#x2F;docs&#x2F;current&#x2F;spring-framework-reference&#x2F;html&#x2F;mvc.html&quot;&gt;Spring WebMVC framework&lt;&#x2F;a&gt;, this can be as easy as annotating a class with some &lt;code&gt;@Controller&lt;&#x2F;code&gt; annotation, returning a redirect to a JSP page.&lt;&#x2F;p&gt;
&lt;p&gt;Living in OSGi land, this sounds even better. Dynamically registering and referencing controllers and services. Configuring the application on the fly, during runtime, a dream come true.&lt;&#x2F;p&gt;
&lt;p&gt;Pretty soon its gets quite frustrating from there on. Equinox JSP is not too bad, but suffers from the Equinox HTTP service implementation which has a few bugs and drawbacks. Pax Web is fine, but the whiteboard pattern, although the same name, has nothing to do with OSGi HTTP whiteboard. Most other tutorials around OSGi and HTTP focus on registering a servlet. Since this is pretty much the standard specification right now. Everything around JSP is self made for each framework and mostly works around issues in Apache Jasper. Since Jasper seems to be the only JSP implementation, but it is so deeply tied to JEE, that it is really hard to use it in a different environment. So most tools simply wrap classloaders and tweak “getResource” methods in order to let Jasper think it is in an JEE environment.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at what other JEE applications do, it really seems that everybody does use Jasper. In different patched versions. Tomcat of course, JBoss (aka Wildfly), Glassfish an Geronimo. Also Equinox JSP and Pax Web have their own wrapped and patched Jasper version.&lt;&#x2F;p&gt;
&lt;p&gt;Now it comes to JSTL, sure, you want to have all the fuzz when you develop JEEish applications. Pax Web really does consider looking up dependent bundles for tag libraries. Where Equinox JSP only scans the “Bundle-ClassPath” jars. Apache Jasper however simply ignores the “core” JSTL tag library, although it might get detected on the class path.&lt;&#x2F;p&gt;
&lt;p&gt;Now the good point is, it’s OSGi, and with a little bit of effort you can throw different frameworks together into one pot. Taking Equinox as OSGi framework, Pax Web for providing the Http Service, Equinox JSP for a non-intrusive JSP servlet and a little bit of custom code for the Spring MVC controller like framework, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;packagedrone.org&quot;&gt;Package Drone&lt;&#x2F;a&gt; got a nice little web framework. The JSTL tags are provided by JBoss JSTL, which feature a OSGi version of the tags.&lt;&#x2F;p&gt;
&lt;p&gt;While the simple servlets are plain Pax Web registrations, including the Equinox JSP servlet, the Spring MVC like setup is a custom part of Package Drone, but with some reusability in mind. A main dispatcher servlet picks up all services which are registered with a @Controller annotation. Calls are simply routed to service methods. The result is a reference to a JSP page, which now actually is part of the controller bundle and not the servlet. The dispatcher mechanism takes care of this an on the one side alters the redirection to the JSP so that the bundle is part of the redirect path, and on the other side registers all relevant JSP resources in a bundle with the JSP servlet of Equinox JSP.&lt;&#x2F;p&gt;
&lt;p&gt;I took quite a while and cost some nerves … but it seems that the next version of Package Drone will have a web framework which is based on OSGi HttpService, supports controller style services and still feels a bit like JEE ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Package Drone – what&#x27; next?!</title>
        <published>2015-05-08T19:09:43+02:00</published>
        <updated>2015-05-08T19:09:43+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/05/08/package-drone-whats-next/" type="text/html"/>
        <id>dentrassi.de/blog/2015/05/08/package-drone-whats-next/</id>
        <content type="html">&lt;p&gt;Every now and then there is some time for Package Drone. So let’s peek ahead what will happen in the next few weeks.&lt;&#x2F;p&gt;
&lt;p&gt;First of all, there is the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;packagedrone.org&#x2F;2015&#x2F;05&#x2F;06&#x2F;package-drone-eclipse-democamp-mars-2015-in-munich&#x2F;&quot;&gt;Eclipse DemoCamp&lt;&#x2F;a&gt; in Munich, at which Package Drone will be presented. So if you want to talk in person, come over and pay us a visit.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Also I have been working on version 0.8.0. The more you think about it, the more ideas you get of what could be improved. If I only got the time. But finally it is time for validation! Channels and artifacts can be validated and the outcome will be presented in red and yellow, and a lot more detail ;-). This is a first step towards more things we hope to achieve with validation, like rejecting content and proving resolution mechanisms. Quick fix your artifacts ;-)&lt;&#x2F;p&gt;
&lt;p&gt;Also there are a few enhancements to make it easier for new users to start with Package Drone. “Channel recipes” for example setup up and configure a channel for a specific purpose, just to name one.&lt;&#x2F;p&gt;
&lt;p&gt;Of course this is important since, with a little bit of luck, there will be an article in the upcoming German “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jaxenter.de&#x2F;magazine&#x2F;eclipse-magazin&quot;&gt;Eclipse Magazin&lt;&#x2F;a&gt;“, which might bring some new users. Helping them to have an easy start is always a good idea ;-)&lt;&#x2F;p&gt;
&lt;p&gt;The next version also brings a new way to upload artifacts. A plain simple HTTP request will do to upload a new artifact. While I would not call it “API”, it definitely is the starting point of exactly that. Planned is a command line client and already available is the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone-jenkins&quot;&gt;Jenkins plugin for Package Drone&lt;&#x2F;a&gt;. It allows to archive artifacts directly to a Package Drone channel, including adding some meta data of the build.&lt;&#x2F;p&gt;
&lt;p&gt;So, if you have more ideas, please raise an issue in the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;issues&quot;&gt;GitHub issue tracker&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Meanwhile @ Package Drone</title>
        <published>2015-03-14T15:32:45+01:00</published>
        <updated>2015-03-14T15:32:45+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/03/14/meanwhile-package-drone/" type="text/html"/>
        <id>dentrassi.de/blog/2015/03/14/meanwhile-package-drone/</id>
        <content type="html">&lt;p&gt;Since &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Package Drone&quot; href=&quot;http:&#x2F;&#x2F;packagedrone.org&quot;&gt;Package Drone&lt;&#x2F;a&gt; has its own home now, I would simple like to sum up here what progress Package Drone has made in the last few weeks.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;First of all, the most recent release, as of now, is 0.4.0. The last two releases were mostly focused about the processing of zipped P2 repositories and what comes with that. These can be processed in two different ways now. Either using the Unzip adapter, which is more like a way of deep linking, but still allows one to access a P2 repository inside that ZIP artifact. The second way it the P2 repository unzipper aspect, which unzips bundles and features and create virtual child artifacts. The second approach makes these artifacts available to all other Package Drone functionality, but also modifies the original content but unzipping and creating new meta data. However both variants can be used at the same time!&lt;&#x2F;p&gt;
&lt;p&gt;There is also a setup for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;OpenShift&quot; href=&quot;https:&#x2F;&#x2F;www.openshift.com&#x2F;&quot;&gt;OpenShift&lt;&#x2F;a&gt;, and a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Package Drone QuickStart&quot; href=&quot;https:&#x2F;&#x2F;hub.openshift.com&#x2F;quickstarts&#x2F;90-package-drone&quot;&gt;quickstart&lt;&#x2F;a&gt; at the OpenShift Hub. So if you want to try out Package Drone, the most simplest ways, just create a free account at OpenShift und simply deploy a new Package Drone setup with a few clicks. Including the database setup.&lt;&#x2F;p&gt;
&lt;p&gt;If course there have been lots of things cleaned up and improved in the UI and the backend system, but this is more a topic for the actual release notes at GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;So the question is, what the future will bring. One thing I would like to see Postgres again as a database. With the most recent Postgres JDBC driver and some help from my colleague, this might be feature appearing in one of the next versions. MySQL works fine, but also has a very bad behavior when it comes to BLOB support. And since all artifacts are stored in the database, this can cause some huge memory requirement. Hopefully Postgres does a better job here.&lt;&#x2F;p&gt;
&lt;p&gt;Of course there is also the idea of storing the artifacts separately in the file system. While this requires a little bit of extra processing when it comes to backup up your system, it might be right time to add a full backup and restore process to Package Drone. This would also solve the problem of how to switch between storage backends.&lt;&#x2F;p&gt;
&lt;p&gt;And of course, I you would like to help out, please report bugs and become a contributor ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Controlling the screen resolution of a Windows Guest in VirtualBox</title>
        <published>2015-02-24T14:18:09+01:00</published>
        <updated>2015-02-24T14:18:09+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/02/24/controlling-the-screen-resolution-of-a-windows-guest-in-virtualbox/" type="text/html"/>
        <id>dentrassi.de/blog/2015/02/24/controlling-the-screen-resolution-of-a-windows-guest-in-virtualbox/</id>
        <content type="html">&lt;p&gt;Now I wanted to create another screencast for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;packagedrone.org&quot;&gt;Package Drone&lt;&#x2F;a&gt; and stumbled over the same issue again. Time to document it ;-)&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;VirtualBox with the Windows Guest drivers installed allows for any screen resolution which you could ever think of. Just resize the guest window and the screen resolution of the guest system will adapt.&lt;&#x2F;p&gt;
&lt;p&gt;But what if you want to set a specific screen resolution, pixel perfect?! Windows allows you to change the screen resolution but does not allow you to enter width and height. You are stuck with a slider of presets.&lt;&#x2F;p&gt;
&lt;p&gt;Googling around you will find the idea of adding a custom screen resolution to that selection. However, it seems that for some users this works, for others it doesn’t. I am one of the latter users.&lt;&#x2F;p&gt;
&lt;p&gt;But there is simple command which will tells your guest session to change to a specific resolution, directly from the command line:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;VBoxManage controlvm &amp;quot;My virtual machine&amp;quot; setvideomodehint 1280 720 32
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will tell the &lt;em&gt;currently running&lt;&#x2F;em&gt; virtual machine to change resolution to 1280×720 at 32bit.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Maven basic authentication fails</title>
        <published>2015-02-17T18:06:17+01:00</published>
        <updated>2015-02-17T18:06:17+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/02/17/maven-basic-authentication-fails/" type="text/html"/>
        <id>dentrassi.de/blog/2015/02/17/maven-basic-authentication-fails/</id>
        <content type="html">&lt;p&gt;While working on Package Drone, I stumbled over an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;issues&#x2F;38&quot;&gt;interesting issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Deploying to Package Drone using Maven requires a deploy key. A random token, generated by the server which has to be used as either username or password on the basic authentication process of HTTP.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This worked fine as long as I started “maven deploy” from inside the Eclipse IDE. Starting “maven deploy” using the external maven installation or from the command line caused:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;Caused by: org.apache.maven.wagon.TransferFailedException: Failed to transfer file: http:&#x2F;&#x2F;localhost:8080&#x2F;maven&#x2F;m2test&#x2F;de&#x2F;dentrassi&#x2F;test&#x2F;felixtest1&#x2F;0.0.1-SNAPSHOT&#x2F;felixtest1-0.0.1-20150217.162541-1.jar. Return code is: 401, ReasonPhrase: Unauthorized.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Although I did configure Maven to use the correct credentials in the &lt;code&gt;settings.xml&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;abc123&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;pdrone.test&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After several hours of googling, source code reading and debugging maven it was actually pretty easy.&lt;&#x2F;p&gt;
&lt;p&gt;First of all, the embedded Maven instance in Eclipse uses &lt;code&gt;AetherRepositoryConnector&lt;&#x2F;code&gt; instead of &lt;code&gt;BasicRepositoryConnector&lt;&#x2F;code&gt; for accessing repositories. “Aether” simply takes the username and password values, as provided, and uses them.&lt;&#x2F;p&gt;
&lt;p&gt;The “BasicRepositoryConnector” however decided that an empty username (or an empty password) is not good at all and simply dropped the whole configuration without warning.&lt;&#x2F;p&gt;
&lt;p&gt;So in the end, introducing a dummy user name did the trick.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>😸 Just a Test</title>
        <published>2015-02-14T11:16:18+01:00</published>
        <updated>2015-02-14T11:16:18+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/02/14/just-a-test/" type="text/html"/>
        <id>dentrassi.de/blog/2015/02/14/just-a-test/</id>
        <content type="html">&lt;p&gt;This is just a test about Unicode characters. 🐢🐰&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>Package Drone 0.1.0</title>
        <published>2015-02-06T16:51:56+01:00</published>
        <updated>2015-02-06T16:51:56+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/02/06/package-drone-0-1-0/" type="text/html"/>
        <id>dentrassi.de/blog/2015/02/06/package-drone-0-1-0/</id>
        <content type="html">&lt;p&gt;See the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;packagedrone.org&#x2F;2015&#x2F;02&#x2F;06&#x2F;package-drone-0-1-0&#x2F;&quot;&gt;full announcement of Package Drone 0.1.0&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This is a big step forward :) Also see the live system at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;thedrone.packagedrone.org&quot;&gt;http:&#x2F;&#x2F;thedrone.packagedrone.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Package Drone 0.0.8</title>
        <published>2015-01-30T16:24:01+01:00</published>
        <updated>2015-01-30T16:24:01+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/01/30/package-drone-0-0-8/" type="text/html"/>
        <id>dentrassi.de/blog/2015/01/30/package-drone-0-0-8/</id>
        <content type="html">&lt;p&gt;See the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;packagedrone.org&#x2F;2015&#x2F;01&#x2F;30&#x2F;package-drone-0-0-8&#x2F;&quot;&gt;release announcement at packagedrone.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>Package Drone 0.0.7</title>
        <published>2015-01-23T16:53:24+01:00</published>
        <updated>2015-01-23T16:53:24+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/01/23/package-drone-0-0-7/" type="text/html"/>
        <id>dentrassi.de/blog/2015/01/23/package-drone-0-0-7/</id>
        <content type="html">&lt;p&gt;The release announcement is at the new homepage.&lt;&#x2F;p&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;packagedrone.org&#x2F;2015&#x2F;01&#x2F;23&#x2F;package-drone-0-0-7&#x2F;&quot;&gt;http:&#x2F;&#x2F;packagedrone.org&#x2F;2015&#x2F;01&#x2F;23&#x2F;package-drone-0-0-7&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>Package Drone 0.0.6</title>
        <published>2015-01-21T15:32:00+01:00</published>
        <updated>2015-01-21T15:32:00+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/01/21/package-drone-0-0-6/" type="text/html"/>
        <id>dentrassi.de/blog/2015/01/21/package-drone-0-0-6/</id>
        <content type="html">&lt;p&gt;Here is another release of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;releases&#x2F;tag&#x2F;v0.0.6&quot;&gt;Package Drone – 0.0.6&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Be sure to check out &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;releases&quot;&gt;the most recent release&lt;&#x2F;a&gt; on github.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The main changes are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Add automated tests using Selenium WebDriver&lt;&#x2F;li&gt;
&lt;li&gt;Create a build system using Maven Tycho&lt;&#x2F;li&gt;
&lt;li&gt;Create start scripts for SystemD and Upstart&lt;&#x2F;li&gt;
&lt;li&gt;Create .deb and .rpm packages for Ubuntu 14.04 (Mint 17) and CentOS 7 (RHEL 7).&lt;&#x2F;li&gt;
&lt;li&gt;Provide APT and YUM repositories at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;repo.dentrassi.de&quot;&gt;http:&#x2F;&#x2F;repo.dentrassi.de&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So this release was more about build, stability and ease of installation. That is why there are also no screenshots this time ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Package Drone 0.0.5</title>
        <published>2015-01-16T10:42:27+01:00</published>
        <updated>2015-01-16T10:42:27+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/01/16/package-drone-0-0-5/" type="text/html"/>
        <id>dentrassi.de/blog/2015/01/16/package-drone-0-0-5/</id>
        <content type="html">&lt;p&gt;I am happy to announce yet another version of &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;releases&#x2F;tag&#x2F;v0.0.5&quot;&gt;Package Drone – 0.0.5&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Be sure to check out &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;releases&quot;&gt;the most recent release&lt;&#x2F;a&gt; on github.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The main changes are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Switch from Pure CSS to Bootstrap&lt;&#x2F;li&gt;
&lt;li&gt;Clean up the UI&lt;&#x2F;li&gt;
&lt;li&gt;Add channel level meta data and channel aggregators&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Also a few bugs where fixed. Sadly in 0.0.4 there was a bug which prevented the schema creation to fail. This one is fixed in the 0.0.5 release.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;screenshots&quot;&gt;Screenshots&lt;&#x2F;h2&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;pd005_001.png&quot; alt=&quot;Screenshot of channel view&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Package Drone 0.0.5 – Channel View&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;pd005_002.png&quot; alt=&quot;Screenshot of channel view&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Package Drone 0.0.5 – Artifact View&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;pd005_003.png&quot; alt=&quot;Screenshot of channel view&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Package Drone 0.0.5 – Aspect Selection&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;pd005_004.png&quot; alt=&quot;Screenshot of channel view&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Package Drone 0.0.5 – P2 Virtual Feature Form&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Package Drone 0.0.4</title>
        <published>2015-01-14T12:31:27+01:00</published>
        <updated>2015-01-14T12:31:27+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/01/14/package-drone-0-0-4/" type="text/html"/>
        <id>dentrassi.de/blog/2015/01/14/package-drone-0-0-4/</id>
        <content type="html">&lt;p&gt;I am happy to announce that &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;releases&#x2F;tag&#x2F;v0.0.4&quot;&gt;package drone 0.0.4 is released&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Be sure to check out &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;releases&quot;&gt;the most recent release&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The new features are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Support for OSGi R5 XML repository index&lt;&#x2F;li&gt;
&lt;li&gt;Create Eclipse source bundles from Maven source attachments&lt;&#x2F;li&gt;
&lt;li&gt;Manage database structure from within package drone (nor more command line SQL)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;See the full release information at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;releases&#x2F;tag&#x2F;v0.0.4&quot;&gt;github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Especially the OSGi R5 repository support allows a few more use cases, like letting Bndtools consume artifacts from a P2 build, PDE or Tycho.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse theme after Linux Mint Upgrade</title>
        <published>2015-01-12T13:02:44+01:00</published>
        <updated>2015-01-12T13:02:44+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2015/01/12/eclipse-theme-after-linux-mint-upgrade/" type="text/html"/>
        <id>dentrassi.de/blog/2015/01/12/eclipse-theme-after-linux-mint-upgrade/</id>
        <content type="html">&lt;p&gt;A while ago I wrote about a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Fixing the Mint-X theme for Eclipse&#x2F;SWT&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;2013&#x2F;04&#x2F;23&#x2F;fixing-the-mint-x-theme-for-eclipseswt&#x2F;&quot;&gt;theming issue&lt;&#x2F;a&gt; with Linux Mint and Eclipse. It took a while longer than expected, but the change &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bugs.launchpad.net&#x2F;linuxmint&#x2F;+bug&#x2F;1168281&quot;&gt;finally made it into&lt;&#x2F;a&gt; Linux Mint in version 17.1.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;However, starting with Linux Mint 17, there seems to be a new issue. Not that dramatic like the old one, but still somewhat annoying. The default Linux Mint theme (Mint-X) chooses a light gray base color value as a background. This might look nice in most applications, however the mixture of Eclipses (E4) recent approach to create its own theming over the operating system, somewhat collides with that.&lt;&#x2F;p&gt;
&lt;p&gt;Text editors and the tree view inherit a light gray background from the operating system theme, while other Eclipse background elements stay white.&lt;&#x2F;p&gt;
&lt;p&gt;There seems to be a simple fix for that however. Edit the file &lt;code&gt;&#x2F;usr&#x2F;share&#x2F;themes&#x2F;Mint-X&#x2F;gtk-2.0&#x2F;gtkrc&lt;&#x2F;code&gt; and change the first real line from:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;gtk_color_scheme = &amp;quot;bg_color:#d6d6d6\nselected_bg_color:#9ab87c\nbase_color:#F7F7F7&amp;quot; # Background, base.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;gtk_color_scheme = &amp;quot;bg_color:#d6d6d6\nselected_bg_color:#9ab87c\nbase_color:#FFFFFF&amp;quot; # Background, base.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, and that is why I stumbled over this after the upgrade to Mint 17.1, this change will be overridden after an upgrade of the theme package. This never happened one in version 17, but you never know.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;&#x2F;em&gt;  It is also interesting that Eclipse&#x2F;SWT seems to use GTK 2 instead of GTK 3. If you have some information in that, please drop me a line!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Package Drone 0.0.3 in action</title>
        <published>2014-12-18T10:04:54+01:00</published>
        <updated>2014-12-18T10:04:54+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/12/18/package-drone-0-0-3-in-action/" type="text/html"/>
        <id>dentrassi.de/blog/2014/12/18/package-drone-0-0-3-in-action/</id>
        <content type="html">&lt;p&gt;Here is a short video showing how &lt;a href=&quot;&#x2F;pages&#x2F;projects&#x2F;package-drone&#x2F;&quot; title=&quot;Package Drone&quot;&gt;package drone&lt;&#x2F;a&gt; works.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;360&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;kUJ5SWfAuxU?rel=0&quot; width=&quot;640&quot;&gt;&lt;&#x2F;iframe&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Package Drone 0.0.3</title>
        <published>2014-12-17T18:49:24+01:00</published>
        <updated>2014-12-17T18:49:24+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/12/17/package-drone-0-0-3/" type="text/html"/>
        <id>dentrassi.de/blog/2014/12/17/package-drone-0-0-3/</id>
        <content type="html">&lt;p&gt;There is a new version of package drone – 0.0.3!&lt;&#x2F;p&gt;
&lt;p&gt;See the release notes on github for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;releases&#x2F;tag&#x2F;v0.0.3&quot;&gt;Version 0.0.3&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Beside a lot new features, which are described in the release notes, the two most interesting topics are:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;two-working-workflows&quot;&gt;Two working workflows&lt;&#x2F;h2&gt;
&lt;p&gt;Now depending on the channel configuration it is now possible to run channels either for Maven Tycho or by manually uploading artifacts. The output always can be consumed as P2 repository.&lt;&#x2F;p&gt;
&lt;p&gt;With Maven Tycho the P2 metadata created by Tycho gets uploaded and used by the P2 adapter to create the P2 repository data.&lt;&#x2F;p&gt;
&lt;p&gt;In plain OSGi mode Package Drone extracts the dependency information directly from the uploaded artifacts and uses it in order to create virtual P2 meta data file. In both cases the P2 adapter uses the same way to construct the final repository.&lt;&#x2F;p&gt;
&lt;p&gt;For the plain OSGi mode it is also possible to create a generated P2 feature artifact. For this a new instance of a generated P2 feature is created, the meta data like Feature ID, version, etc are manually provided, and package drone will add all bundles in the channel to the feature automatically, so that there always is a feature available for plain OSGi bundles.&lt;&#x2F;p&gt;
&lt;p&gt;The plain OSGi mode is extremely interesting if you need to consume OSGi bundles which are hosted on Maven Central, but have no P2 repository available.&lt;&#x2F;p&gt;
&lt;p&gt;Which hopefully will also be one of the next features in package drone, a replicated artifacts, from Maven Central (or any other Maven 2 repository).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-replacement-of-spring&quot;&gt;The replacement of spring&lt;&#x2F;h2&gt;
&lt;p&gt;I started with Spring WebMVC in order to have an easy start. The idea always was to have a OSGi style, modular application. And Spring simply can provide the base for that. While Spring might be a nice framework for monolithic web applications, it simply is not modular enough for OSGi. Yes, you head right, Spring is not modular enough. First of all, Spring cannot be brought into the OSGi environment, working between bundles. Having one bundle with all and everything inside is ok. But splitting it up seems impossible.&lt;&#x2F;p&gt;
&lt;p&gt;In the past there was &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Spring Dynamic Modules&quot; href=&quot;http:&#x2F;&#x2F;docs.spring.io&#x2F;osgi&#x2F;docs&#x2F;current&#x2F;reference&#x2F;html&#x2F;&quot;&gt;Spring Dynamic Modules&lt;&#x2F;a&gt; (Spring DM), which changed to &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Eclipse Virgo&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;virgo&#x2F;&quot;&gt;Eclipse Virgo&lt;&#x2F;a&gt; now. However Spring DM is dead and Eclipse Virgo seems only provides part of what you need, and almost nothing when it comes to the web.&lt;&#x2F;p&gt;
&lt;p&gt;So the solution was to write a small web dispatching layer, use the idea of Spring’s @Controller mechanism and use real OSGi. Controllers now get registered as OSGi service, once they have all their dependencies met. A central dispatcher servlet provides access to all controllers, no matter which bundle registers them. Once the service is gone, the controller is removed. By having real dynamic services it is easily possible to add new functionality, menu entries, resources during runtime, running in the same web context. Install and update plugins, perform a simple setup, things that every PHP web application can do.&lt;&#x2F;p&gt;
&lt;p&gt;Of course the downside is, that part of Spring’s functionality gets replicated, but it simply was to much trouble to split off parts of Spring WebMVC.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse Package Drone</title>
        <published>2014-12-01T09:31:10+01:00</published>
        <updated>2014-12-01T09:31:10+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/package-drone/" type="text/html"/>
        <id>dentrassi.de/pages/attic/package-drone/</id>
        <content type="html">&lt;p&gt;Package Drone is an open source (EPL), software artifact repository.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;packagedrone.org&#x2F;&quot;&gt;The blog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;eclipse.org&#x2F;package-drone&#x2F;&quot;&gt;The official project page&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The main purpose is to use it as OSGi bundle repository which can receive OSGi bundles either from a Maven Tycho, a plain Maven or Gradle build. Or you simply can upload the OSGi bundles using the web UI. These OSGi bundles (and Eclipse Features and Categories) can then be consumed using the P2 repository system from Eclipse, Maven Tycho and bndtools (using OSGi R5 XML Repositories).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;However, the design is modular and extensible so that it should also be possible to, for example, add an &lt;q&gt;RPM&lt;&#x2F;q&gt; aspect and render a &lt;q&gt;YUM&lt;&#x2F;q&gt; repository out of it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;more-information&quot;&gt;More Information&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eclipse&#x2F;packagedrone&quot;&gt;Repository on GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;packagedrone.org&#x2F;features&#x2F;&quot;&gt;Features&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;plus.google.com&#x2F;115948325437077512833&quot;&gt;Google+ Page&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.facebook.com&#x2F;package.drone&quot;&gt;Facebook Page&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;talk-from-eclipsecon-europe-2015&quot;&gt;Talk from EclipseCon Europe 2015&lt;&#x2F;h3&gt;
&lt;iframe allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;480&quot; loading=&quot;lazy&quot; src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;CTPYBqOxXz4?rel=0&quot; width=&quot;640&quot;&gt;&lt;&#x2F;iframe&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Released &quot;Package Drone 0.0.2&quot;</title>
        <published>2014-11-28T17:53:49+01:00</published>
        <updated>2014-11-28T17:53:49+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/11/28/released-package-drone-0-0-2/" type="text/html"/>
        <id>dentrassi.de/blog/2014/11/28/released-package-drone-0-0-2/</id>
        <content type="html">&lt;p&gt;Work on package drone continues.&lt;&#x2F;p&gt;
&lt;p&gt;See the release notes on github for &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;releases&#x2F;tag&#x2F;v0.0.2&quot;&gt;Version 0.0.2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;There are a set of new features and a few enhancements. Still this is pretty alpha, but time to play around and give some feedback ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Releasing &quot;Package Drone 0.0.1&quot;</title>
        <published>2014-11-25T20:14:19+01:00</published>
        <updated>2014-11-25T20:14:19+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/11/25/releasing-package-drone-0-0-1/" type="text/html"/>
        <id>dentrassi.de/blog/2014/11/25/releasing-package-drone-0-0-1/</id>
        <content type="html">&lt;p&gt;A package repository for Maven Tycho, OSGi and all the rest.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Itch&lt;&#x2F;strong&gt;: I want to have a software repository where Maven Tycho can deploy to and P2 can read from. Also I would like to re-use this repository as an OBR or OSGi R5 repository, and possibly as Maven repository.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Scratch&lt;&#x2F;strong&gt;: Package Drone, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;releases&#x2F;tag&#x2F;v0.0.1&quot;&gt;version 0.0.1&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Now there already is the Nexus Repository and the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.eclipse.org&#x2F;Tycho&#x2F;Nexus_Unzip_Plugin&quot;&gt;Nexus Unzip Plugin&lt;&#x2F;a&gt;. However this essentially uploads a full P2 repository ZIP file and uses Nexus as a plain web server, hosting that zipped P2 repository.&lt;&#x2F;p&gt;
&lt;p&gt;Instead I would like to not only have a P2 repository, but also an OSGi R5 repository, based on the same OSGi bundles uploaded. I would also like to upload bundles created by the Maven Bundle Plugin, or BNDtools. Also would I like to make a full, Maven like, release using Tycho and later host this as a Maven 2 repository. Now package drone is not quite there yet, but the basic Tycho Deploy -&amp;gt; P2 Consume workflow already works to some degree.&lt;&#x2F;p&gt;
&lt;p&gt;Package Drone is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&quot;&gt;hosted on github&lt;&#x2F;a&gt; and there is a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;small readme&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;package-drone&#x2F;wiki&quot;&gt;wiki&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Be warned, this is alpha quality software. If it works for you, fine. If not please help me fix it!&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Google Play Store Forums</title>
        <published>2014-11-22T15:18:52+01:00</published>
        <updated>2014-11-22T15:18:52+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/11/22/google-play-store-forums/" type="text/html"/>
        <id>dentrassi.de/blog/2014/11/22/google-play-store-forums/</id>
        <content type="html">&lt;p&gt;Dear Google,&lt;&#x2F;p&gt;
&lt;p&gt;since I did not find a better play to post this idea, I just did it right here ;-)&lt;&#x2F;p&gt;
&lt;p&gt;For openSCADA, the open source project I am working on, we use Google Groups as a communication channel with end users. This works quite fine actually, and I think that Google Groups are a fine instrument for that.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Sadly, when I browse through the Play Store, reading comments on apps, very often I find comments like “How can I…”. The comments, and also the possible replies are misused a form of forum, or back and forth communication channel. The next this is that the original comment gets updated to reflect a reply. All this is quite irrelevant, when I want to check if the app is worth a download or not.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, my experience with Google Groups is, that very often users already help each other, and only when the question remains open for some time, or the question is rather specific we answer it ourselves.&lt;&#x2F;p&gt;
&lt;p&gt;I why don’t you just allow an automatic “per-app” Google Group, integrated into the Play Store App (but also accessible using the normal Google Group Website), to let users write about the app, provide self support, and provide a support forum for the application developer.&lt;&#x2F;p&gt;
&lt;p&gt;Well, I hope you read it some time.&lt;&#x2F;p&gt;
&lt;p&gt;You know were to find me ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Spring WebMVC – Bad request for most pages</title>
        <published>2014-11-21T13:21:29+01:00</published>
        <updated>2014-11-21T13:21:29+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/11/21/spring-webmvc-bad-request-for-most-pages/" type="text/html"/>
        <id>dentrassi.de/blog/2014/11/21/spring-webmvc-bad-request-for-most-pages/</id>
        <content type="html">&lt;p&gt;Today I stumbled over an easy configuration mistake you can make, which will cause “400 Bad request” for most static resources. It took me a little bit of time to figure out what went wrong.&lt;&#x2F;p&gt;
&lt;p&gt;I had a classic Spring WebMVC setup, DispatcherServlet, resource mapping for static resources (CSS mostly).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;After making a few changes all CSS files started to have “400 Bad request”. Which was strange, since these were only static resources. Bad request sounded like something went wrong in the Jetty that I used. So I started debugging into this issue.&lt;&#x2F;p&gt;
&lt;p&gt;It turned out that all requests were directed to my newly added @Controller class that already was active in the Spring context. It’s handler method was causing the “400” error. By why for all CSS files?&lt;&#x2F;p&gt;
&lt;p&gt;It was a missing “value” property in the @RequestMapping annotation. I had:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Controller
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ArtifactController &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;RequestMapping &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&#x2F;artifact&#x2F;{artifactId}&#x2F;get&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RequestMethod&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GET &lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HttpServletResponse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;PathVariable &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;artifactId&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;StorageService&lt;&#x2F;span&gt;&lt;span&gt; service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Activator&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getTracker &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getStorageService &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Where it should have been:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Controller
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ArtifactController &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;RequestMapping &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&#x2F;artifact&#x2F;{artifactId}&#x2F;get&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;method &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RequestMethod&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GET &lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HttpServletResponse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;PathVariable &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;artifactId&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;StorageService&lt;&#x2F;span&gt;&lt;span&gt; service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Activator&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getTracker &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getStorageService &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;} 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; the &lt;code&gt;@RequestMapping&lt;&#x2F;code&gt; attribute should have been “value” instead of “name”.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Resume</title>
        <published>2014-11-18T22:19:33+01:00</published>
        <updated>2014-11-18T22:19:33+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/unsorted/resume/" type="text/html"/>
        <id>dentrassi.de/pages/unsorted/resume/</id>
        <content type="html">&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;magic.piktochart.com&#x2F;output&#x2F;3538371-jens-reimann-resume#&quot;&gt;View in new window&lt;&#x2F;a&gt; – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;document&#x2F;d&#x2F;1MV-L9_tWkYzZP-ELgPVo_gs7FOP1oW4Yw5mCaMJAFoQ&quot;&gt;View as text&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;iframe frameborder=&quot;0&quot; height=&quot;2552&quot; loading=&quot;lazy&quot; scrolling=&quot;no&quot; src=&quot;https:&#x2F;&#x2F;magic.piktochart.com&#x2F;embed&#x2F;3538371-jens-reimann-resume&quot; style=&quot;overflow-y:hidden;&quot; width=&quot;1000&quot;&gt;&lt;&#x2F;iframe&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>OSGi EE – Modular Web Applications</title>
        <published>2014-11-14T17:10:12+01:00</published>
        <updated>2014-11-14T17:10:12+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/11/14/osgi-ee-modular-web-applications/" type="text/html"/>
        <id>dentrassi.de/blog/2014/11/14/osgi-ee-modular-web-applications/</id>
        <content type="html">&lt;p&gt;Creating a modular web application in Java still is a tricky task. While there has been some improvement with web fragments, this still is far away from what you actually want.&lt;&#x2F;p&gt;
&lt;p&gt;But what is it that you (or better I) want:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Modularity – Make the application extensible using plugins. Not just one big block. Install additional functionality with a few clicks&lt;&#x2F;li&gt;
&lt;li&gt;Easy setup – Setting up a JEE server like JBoss can be a pain in the ass. First you have to configure your datasource with some obscure XML file. It would be way better to be directed to some sort of setup screen, asking for all database (etc.) information first. Guiding you through a setup process. With JEE your web application won’t even start if your JPA data source cannot be loaded since the driver is not specified.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Now there are a lot of applications which provide this flexibility. Atlassian, Jenkins, and a few more, all do a great job. Most PHP web applications guide you through a web setup when you first install the software. So why can’t Java do this out of the box?&lt;&#x2F;p&gt;
&lt;p&gt;When you think of modularity and services, OSGi immediately comes into my mind. However “the Web” still is a strange place for OSGi setups. Yes you can register a servlet with OSGi and access it through “http”. But that is just the start. You want JSP, Form Validation, maybe even Spring WebMVC.&lt;&#x2F;p&gt;
&lt;p&gt;There are a few setups I stumbled over, pax runner with pax web. However they bring in a pretty old jetty 7, when there is jetty 9.2.x with Servlet 3.1 support. There are &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;liquid-reality.de&#x2F;display&#x2F;liquid&#x2F;Karaf+Tutorials&quot;&gt;some Apache Karaf tutorials&lt;&#x2F;a&gt;, however there is also no JSP support, just a custom Vaadin bridge.&lt;&#x2F;p&gt;
&lt;p&gt;Jetty 9.2.x &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.eclipse.org&#x2F;jetty&#x2F;documentation&#x2F;current&#x2F;framework-jetty-osgi.html&quot;&gt;claims to have OSGi support&lt;&#x2F;a&gt; out of the box. In combination with Eclipse Equinox this should be an easy setup. And although it really works, you know what you have to do. I got it working in the Eclipse IDE, but it still provides most things you really want.&lt;&#x2F;p&gt;
&lt;p&gt;In order to be able to reproduce it myself, I made a few ant script and sample projects out of what I learned and decided to put them up on github.&lt;&#x2F;p&gt;
&lt;p&gt;So if you want to build modular web applications with Jetty, Equinox, Eclipse, Hibernate Validation, Spring WebMV and more (with a recent version of all components) you can have a look at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;osgiee&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;osgiee&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you have more examples working or find a bug, please let me know ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Identify GSM modem devices using udev</title>
        <published>2014-11-03T16:22:37+01:00</published>
        <updated>2014-11-03T16:22:37+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/11/03/identify-gsm-modem-devices-using-udev/" type="text/html"/>
        <id>dentrassi.de/blog/2014/11/03/identify-gsm-modem-devices-using-udev/</id>
        <content type="html">&lt;p&gt;Again an interesting problem, I do have a Linux box and it has two GSM modems and an RS-232 FTDI USB device built in. Each GSM modem brings three USB serial devices. Now I do want to dial up using the first of these modems and therefore I do need the device name, e.g. &lt;code&gt;&#x2F;dev&#x2F;ttyUSB2&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;However, each time the box boots up, either the RS-232 device or the modems are first in the order or devices found by the kernel. This results in the modem to be either &lt;code&gt;&#x2F;dev&#x2F;ttyUSB2&lt;&#x2F;code&gt; or &lt;code&gt;&#x2F;dev&#x2F;ttyUSB3&lt;&#x2F;code&gt;. Since this definitely is an issue when dialing up, I would like to keep these device names persistent.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;udev&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Udev&quot;&gt;udev&lt;&#x2F;a&gt; can help here. It allows one to influence the way devices are created in userland. Depending on your distribution, the rules files are located at &lt;code&gt;&#x2F;etc&#x2F;udev&#x2F;rules.d&#x2F;&lt;&#x2F;code&gt; (at least for Ubuntu).&lt;&#x2F;p&gt;
&lt;p&gt;Now my modems can be identified by vendor and product id (12d1, 1404) so a simply udev rule should be fine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;SUBSYSTEM==“tty”, ATTRS{idVendor}==“12d1”, ATTRS{idProduct}==“1404”, SYMLINK+=“gsm%s{bInterfaceNumber}”
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In theory this should create additional entries under “&#x2F;dev&#x2F;” with map to the kernel assigned device names. For example &lt;code&gt;&#x2F;dev&#x2F;gsm00&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;&#x2F;dev&#x2F;ttyUSBXX&lt;&#x2F;code&gt;. So I could just access &lt;code&gt;&#x2F;dev&#x2F;gsm01&lt;&#x2F;code&gt;, whatever the boot order was.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that the device attribute &lt;code&gt;bInterfaceNumber&lt;&#x2F;code&gt; is not on the tty device, but on the usb device in the parent hierarchy.&lt;&#x2F;p&gt;
&lt;p&gt;Still it is possible to record the interface number of a first rule, and use it in a second one:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;SUBSYSTEMS==&amp;quot;usb&amp;quot;, ENV{.LOCAL_ifNum}=&amp;quot;$attr{bInterfaceNumber}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;SUBSYSTEM==&amp;quot;tty&amp;quot;, ATTRS{idVendor}==&amp;quot;12d1&amp;quot;, ATTRS{idProduct}==&amp;quot;1404&amp;quot;, SYMLINK+=&amp;quot;gsm%E{.LOCAL_ifNum}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This stores the attribute “bInterfaceNumber” into the environment variable &lt;code&gt;.LOCAL_ifNum&lt;&#x2F;code&gt; (the prefixed dot is a notation for temporary or hidden variables). In the second rule the same variable is pulled on using the &lt;code&gt;%E&lt;&#x2F;code&gt; syntax. Newer udev versions also support &lt;code&gt;$env&lt;&#x2F;code&gt; instead of &lt;code&gt;%E&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; for mentioning this trick!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;60154&#x2F;udev-rule-file-for-modem-not-working&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>IEC 60870 Explorer</title>
        <published>2014-09-24T22:34:30+02:00</published>
        <updated>2014-09-24T22:34:30+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/09/24/iec-60870-explorer/" type="text/html"/>
        <id>dentrassi.de/blog/2014/09/24/iec-60870-explorer/</id>
        <content type="html">&lt;p&gt;Finally we put a few functions and classes together that we already had, and made a simple, easy to use and jet powerful tool which we would liked to have ourselves ;-) Sadly it did not exist when we would have needed it, so we had to make it ourselves.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;A simple tool to access data from an IEC 60870-5-104 device. Just browse the values and send some commands.&lt;&#x2F;p&gt;
&lt;p&gt;There are already a few products out there in this area, but either are they expensive and very complex applications that provide a lot more than you actually need. And are nearly unusable if you don’t know what it is all about. Or they are simply crap.&lt;&#x2F;p&gt;
&lt;p&gt;Here is our approach to this problem: The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ibh-systems.com&#x2F;iec60870&#x2F;explorer&quot;&gt;IEC 60870-5-104 Explorer&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Creating a Mac OS App Bundle with Maven Tycho</title>
        <published>2014-09-09T15:09:56+02:00</published>
        <updated>2014-09-09T15:09:56+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/09/09/creating-a-mac-os-app-bundle-with-maven-tycho/" type="text/html"/>
        <id>dentrassi.de/blog/2014/09/09/creating-a-mac-os-app-bundle-with-maven-tycho/</id>
        <content type="html">&lt;p&gt;Using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Maven Tycho&quot; href=&quot;http:&#x2F;&#x2F;www.google.com&#x2F;url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0CB8QFjAA&amp;amp;url=http%3A%2F%2Fwww.eclipse.org%2Ftycho%2F&amp;amp;ei=4fgOVP23PObXyQPSr4DoDw&amp;amp;usg=AFQjCNGx8I2dPaFgwDailli6vmc1ufJFsg&amp;amp;sig2=s1I6dsQrtlAQ-2RbTq7yag&amp;amp;bvm=bv.74649129,d.bGQ&quot;&gt;Maven Tycho&lt;&#x2F;a&gt; it is possible to build OSGi applications and therefore Eclipse RCP applications easily with Maven. Creating a ready to run product is &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;git.eclipse.org&#x2F;c&#x2F;tycho&#x2F;org.eclipse.tycho-demo.git&#x2F;tree&#x2F;&quot;&gt;already described&lt;&#x2F;a&gt; on &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.vogella.com&#x2F;tutorials&#x2F;EclipseTycho&#x2F;article.html&quot;&gt;the internet&lt;&#x2F;a&gt; a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;codeandme.blogspot.de&#x2F;2012&#x2F;12&#x2F;tycho-build-1-building-plug-ins.html&quot;&gt;few times&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;But what is mostly missing is, how to make an nice Mac OS X application bundle, that looks like a real Mac OS X application and not like a bunch of files extracted from a ZIP&#x2F;TAR file.&lt;&#x2F;p&gt;
&lt;p&gt;Assuming you already have set up your Maven Tycho RCP build and are building products using the packaging type “eclipse-repository” here is what you need to do in addition.&lt;&#x2F;p&gt;
&lt;p&gt;Extend the configuration in the “eclipse-repository” project by calling (or enhancing the call) to:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.eclipse.tycho&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;tycho-p2-director-plugin&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${tycho-version}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you don’t have a &lt;code&gt;configuration&lt;&#x2F;code&gt; element for this plugin yet, then add it as a child element and configure the specific product you are building:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.eclipse.tycho&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;tycho-p2-director-plugin&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${tycho-version}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;configuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;formats&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;win32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;zip&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;win32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;tar.gz&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;macosx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;tar.gz&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;macosx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;formats&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;products&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;product&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${group.id}.${artifact.id}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rootFolders&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;macosx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;My Application.app&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;macosx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;rootFolders&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;product&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;products&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;configuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;${group.id}&lt;&#x2F;code&gt; and &lt;code&gt;${artifact.id}&lt;&#x2F;code&gt; make up the id of your application. Which must be consistent with the &lt;code&gt;id&lt;&#x2F;code&gt; property in the &lt;code&gt;.product&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;The most important thing is the configuration of the “rootFolder” for the target type Mac OS X here. It would also be possible to use the plain “rootFolder” property, but using “rootFolders” (with the “s”) it is possible to just make an alternate name for Mac OS X.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to that tell the repository bundle (in the same Maven project) to generate for Mac OS X.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.eclipse.tycho&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;tycho-p2-repository-plugin&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;${tycho-version}&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;configuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;includeAllDependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;true&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;includeAllDependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;profileProperties&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;macosx-bundled&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;true&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;macosx-bundled&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;profileProperties&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;configuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running &lt;code&gt;maven package&lt;&#x2F;code&gt; will now give you a &lt;code&gt;products&lt;&#x2F;code&gt; folder under your output folder (normally &lt;code&gt;target&lt;&#x2F;code&gt;) which hosts a zipped version of your Mac OS X app bundle, which extracts to “My Application.app” and shows in the finder as “My Application”.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>APT Repository</title>
        <published>2014-03-31T12:30:33+02:00</published>
        <updated>2014-03-31T12:30:33+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/apt-repo/" type="text/html"/>
        <id>dentrassi.de/pages/attic/apt-repo/</id>
        <content type="html">&lt;p&gt;A mojo which creates APT repositories from a set of .deb files.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This mojo can create an &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Advanced_Packaging_Tool&quot;&gt;APT repository&lt;&#x2F;a&gt; based on an input directory of .deb files.&lt;&#x2F;p&gt;
&lt;p&gt;There are a number of other tools out there that can do the same task. “apt-repo” was created since:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It can created multi component APT repositories (non-flat)&lt;&#x2F;li&gt;
&lt;li&gt;It runs on plain java&lt;&#x2F;li&gt;
&lt;li&gt;It can be used as Maven Mojo and plain jar library&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;More information:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Documentation of the Maven Plugin – &lt;a href=&quot;&#x2F;apt-repo-doc&quot;&gt;&#x2F;apt-repo-doc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;github – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;apt-repo&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;apt-repo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Travis CI – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;ctron&#x2F;apt-repo&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;travis-ci.org&#x2F;ctron&#x2F;apt-repo.svg?branch=master&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Adding the mojo to you maven build:&lt;&#x2F;p&gt;
&lt;p&gt;[code language=”xml”]&lt;br &#x2F;&gt;
&amp;lt;dependency&amp;gt;&lt;br &#x2F;&gt;
&amp;lt;groupId&amp;gt;de.dentrassi.build&amp;lt;&#x2F;groupId&amp;gt;&lt;br &#x2F;&gt;
&amp;lt;artifactId&amp;gt;apt-repo&amp;lt;&#x2F;artifactId&amp;gt;&lt;br &#x2F;&gt;
&amp;lt;version&amp;gt;0.0.1&amp;lt;&#x2F;version&amp;gt;&lt;br &#x2F;&gt;
&amp;lt;&#x2F;dependency&amp;gt;&lt;br &#x2F;&gt;
[&#x2F;code]&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse Equinox as a Windows Service</title>
        <published>2014-02-28T15:55:20+01:00</published>
        <updated>2014-02-28T15:55:20+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/02/28/eclipse-equinox-as-a-windows-service/" type="text/html"/>
        <id>dentrassi.de/blog/2014/02/28/eclipse-equinox-as-a-windows-service/</id>
        <content type="html">&lt;p&gt;In the Eclipse SCADA project we finally wanted to create a setup of the server components for the Windows platform. Ideally all the server tasks should be integrated into the Windows service framework, so that you can stop and start services “the Windows way”.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;While there seems to be a commercial solution (64bit) from &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;wrapper.tanukisoftware.com&quot;&gt;Tanuki Software&lt;&#x2F;a&gt;, we wanted (needed) to go the open source way. Which actually brings one to Apache Commons Daemon. Since we are already using “jsvc” (the Unix way) of the library, is made sense to use “prunsrv.exe” for the Windows side.&lt;&#x2F;p&gt;
&lt;p&gt;The idea is pretty simple, you specify a class that has two static methods (start and stop) which perform the task of starting and stopping your service. The service wrapper “prunsrv.exe” will take care of loading the JVM. “start” and “stop” will be executed in the same JVM instance, so if you have a global instance variable you have no issues here. Luckily Eclipse&#x2F;Equinox already has an appropriate class: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;help.eclipse.org&#x2F;kepler&#x2F;index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fapi%2Forg%2Feclipse%2Fcore%2Fruntime%2Fadaptor%2FEclipseStarter.html&quot;&gt;EclipseStarter&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now comes the facepalm part: While the start method sure must have a signature of “void method ( String [] )” for prunsrv.exe to run, I don’t understand why the “stop” method MUST have the same signature. Of course the authors of EclipseStarter thought the same way, so the stop method (called “shutdown” in this case), accepts no arguments. Which makes prunsrv.exe fail to stop the service.&lt;&#x2F;p&gt;
&lt;p&gt;So it was necessary to wrap the call to EclipseStarter in a separate class and provide the correct method signatures:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;SuppressWarnings &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;restriction&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EclipseDaemon
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;start &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EclipseStarter&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span&gt;( args );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;stop &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;EclipseStarter&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;shutdown &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since the EclipseStarter class marks itself as “internal” it necessary (or convenient) to use &lt;code&gt;@SuppressWarnings ( &amp;quot;restriction&amp;quot; )&lt;&#x2F;code&gt; for masking out the warnings.&lt;&#x2F;p&gt;
&lt;p&gt;Now the class has to be built to a JAR file and installed with the software. So assuming you installed everything to “C:\MyApp\” and you have “C:\MyApp\plugins” with the Equinox OSGi bundles (including “org.eclipse.osgi_*.jar” and “org.eclipse.scada.utils.osgi.daemon_*.jar”), you can create a service like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;prunsrv.exe &#x2F;&#x2F;IS&#x2F;MyService
&lt;&#x2F;span&gt;&lt;span&gt;  --Classpath &amp;quot;C:\MyApp\plugins\org.eclipse.osgi_&amp;lt;version&amp;gt;.jar;C:\MyApp\plugins\org.eclipse.scada.utils.osgi.daemon_&amp;lt;version&amp;gt;.jar&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  --StartMode jvm
&lt;&#x2F;span&gt;&lt;span&gt;  --StartClass org.eclipse.scada.utils.osgi.daemon.EclipseDaemon
&lt;&#x2F;span&gt;&lt;span&gt;  --StartMethod start
&lt;&#x2F;span&gt;&lt;span&gt;  ++StartParams -console
&lt;&#x2F;span&gt;&lt;span&gt;  ++StartParams -consoleLog
&lt;&#x2F;span&gt;&lt;span&gt;  --StopMode jvm
&lt;&#x2F;span&gt;&lt;span&gt;  --StopClass org.eclipse.scada.utils.osgi.daemon.EclipseDaemon
&lt;&#x2F;span&gt;&lt;span&gt;  --StopMethod stop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See also:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Full source code of bundle with wrapper class – &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;git.eclipse.org&#x2F;c&#x2F;eclipsescada&#x2F;org.eclipse.scada.utils.git&#x2F;tree&#x2F;org.eclipse.scada.utils.osgi.daemon&quot;&gt;http:&#x2F;&#x2F;git.eclipse.org&#x2F;c&#x2F;eclipsescada&#x2F;org.eclipse.scada.utils.git&#x2F;tree&#x2F;org.eclipse.scada.utils.osgi.daemon&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;issues.apache.org&#x2F;jira&#x2F;browse&#x2F;DAEMON-315&quot;&gt;DAEMON-315&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bugs.eclipse.org&#x2F;bugs&#x2F;show_bug.cgi?id=429293&quot;&gt;bug #429293&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Creating Mac OS X Icons (icns) on Linux</title>
        <published>2014-02-25T09:58:58+01:00</published>
        <updated>2014-02-25T09:58:58+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/02/25/creating-mac-os-x-icons-icns-on-linux/" type="text/html"/>
        <id>dentrassi.de/blog/2014/02/25/creating-mac-os-x-icons-icns-on-linux/</id>
        <content type="html">&lt;p&gt;Time again for some new icons for an Eclipse RCP launcher. While The Gimp can easily create XPM and Windows ICO files, when it comes to Mac OS “icns” format, you won’t have any built in support.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;There are some fine tools out there for Mac OS, but if you are running Linux and don’t want to buy a Mac just for creating some icon files, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;libicns&quot; href=&quot;http:&#x2F;&#x2F;icns.sourceforge.net&#x2F;&quot;&gt;png2icns&lt;&#x2F;a&gt; comes to the rescue. It is a small command line tool which simply creates an “icns” files from some “png” files.&lt;&#x2F;p&gt;
&lt;p&gt;Create your icon files as “png” in multiple resolutions. If you are creating an Eclipse RCP launcher, you will, most likely, have them anyway for creating your Windows “ico” file. Place them in any folder you like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;-rwxr-xr-x 0 jens jens   1427 Feb 24 10:49 icon_16px.png
&lt;&#x2F;span&gt;&lt;span&gt;-rwxr-xr-x 0 jens jens   2003 Feb 24 10:49 icon_32px.png
&lt;&#x2F;span&gt;&lt;span&gt;-rwxr-xr-x 0 jens jens   2560 Feb 24 10:48 icon_48px.png
&lt;&#x2F;span&gt;&lt;span&gt;-rwxr-xr-x 0 jens jens   5304 Feb 24 10:48 icon_128px.png
&lt;&#x2F;span&gt;&lt;span&gt;-rwxr-xr-x 0 jens jens   9883 Feb 24 10:47 icon_256px.png
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ensure that you have the “png2icns” application installed. On Ubuntu it comes with the package “icnsutils”, which can simply be installed by executing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt-get install icnsutils
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now call “png2icns”. As the man page suggest you need to provide all PNG files, that you want to be part of the icon, as argument. The first argument is the output filename. Also you can let the shell find the correct PNG file by using the wildcard (*):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;png2icns&lt;&#x2F;span&gt;&lt;span&gt; icon.icns icon_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;px.png
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Easy! ;-)&lt;&#x2F;p&gt;
&lt;p&gt;PS: If anything goes wrong, &lt;code&gt;png2icns&lt;&#x2F;code&gt; will complain at the command line (e.g. due to some wrong resolution).&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse SCADA Website</title>
        <published>2014-02-12T17:16:09+01:00</published>
        <updated>2014-02-12T17:16:09+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2014/02/12/eclipse-scada-website/" type="text/html"/>
        <id>dentrassi.de/blog/2014/02/12/eclipse-scada-website/</id>
        <content type="html">&lt;p&gt;Finally, we had the time to complete the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.eclipse.org&#x2F;eclipsescada&quot;&gt;Eclipse SCADA Website&lt;&#x2F;a&gt;. There is still a lot missing, but I think it is a good start.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse SCADA</title>
        <published>2014-01-01T00:00:00+00:00</published>
        <updated>2014-01-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/eclipsescada/" type="text/html"/>
        <id>dentrassi.de/pages/attic/eclipsescada/</id>
        <content type="html">&lt;p&gt;An open Source SCADA System. Most of the openSCADA project has been migrated to Eclipse SCADA but there are some modules which do not fit into the EPL based license platform which the Eclipse Foundation follow. So openSCADA now is like an “add-on” to Eclipse SCADA.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eclipse.org&#x2F;eclipsescada&quot;&gt;http:&#x2F;&#x2F;eclipse.org&#x2F;eclipsescada&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;openscada.org&quot;&gt;http:&#x2F;&#x2F;openscada.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>EMF GenModel Annotations</title>
        <published>2013-07-24T11:19:37+02:00</published>
        <updated>2013-07-24T11:19:37+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/emf-genmodel-annotations/" type="text/html"/>
        <id>dentrassi.de/pages/attic/emf-genmodel-annotations/</id>
        <content type="html">&lt;p&gt;A cheatsheet for EMF annotations which influence the code generation of GenModels.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;the-gen-pattern&quot;&gt;The “Gen” pattern&lt;&#x2F;h2&gt;
&lt;p&gt;Although is has nothing to do with annotations, it is a powerful instrument during the generation process.&lt;&#x2F;p&gt;
&lt;p&gt;A method name can be suffixed with “Gen” and by that “moved out of the way”, but still be generated.&lt;&#x2F;p&gt;
&lt;p&gt;Assume you have a method that is generated an called “init”. You can rename the method to “initGen” and keep (!!) the “@generated” marker. This will let the generation tools still generate the method “init” but as “initGen”. The method “init” is missing then as has to be provided manually. But from this method you can call “initGen” and, to some degree, influence what happens.&lt;&#x2F;p&gt;
&lt;p&gt;See below for &lt;a href=&quot;dentrassi.de&#x2F;pages&#x2F;attic&#x2F;emf-genmodel-annotations&#x2F;#sample_gen_pattern_1&quot;&gt;an example&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;http-www-eclipse-org-emf-2002-genmodel&quot;&gt;http:&#x2F;&#x2F;www.eclipse.org&#x2F;emf&#x2F;2002&#x2F;GenModel&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;common&quot;&gt;Common&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;documentation&lt;&#x2F;td&gt;&lt;td&gt;The documentation for this model element&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;copyright&lt;&#x2F;td&gt;&lt;td&gt;Copyright information for this model element&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;feature&quot;&gt;Feature&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;get&lt;&#x2F;td&gt;&lt;td&gt;The code of the getter method.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;suppressedGetVisibility&lt;&#x2F;td&gt;&lt;td&gt;“true” or “false”. Suppres the creation of the getter for this feature.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;suppressedSetVisibility&lt;&#x2F;td&gt;&lt;td&gt;“true” or “false”. Suppress the creation of the setter for this feature.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;suppressedIsSetVisibility&lt;&#x2F;td&gt;&lt;td&gt;“true” or “false”. Suppress the creation of the isSet method for this feature.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;suppressedUnsetVisibility&lt;&#x2F;td&gt;&lt;td&gt;“true” or “false”. Suppress the creation of the unset method for this feature.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;operation&quot;&gt;Operation&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;body&lt;&#x2F;td&gt;&lt;td&gt;The body contents used when generating the method for the operation.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;datatype&quot;&gt;DataType&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;create&lt;&#x2F;td&gt;&lt;td&gt;The body of the creator method.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;convert&lt;&#x2F;td&gt;&lt;td&gt;The body of the convertor method.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;http-www-eclipse-org-emf-2002-ecore&quot;&gt;http:&#x2F;&#x2F;www.eclipse.org&#x2F;emf&#x2F;2002&#x2F;Ecore&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;all&quot;&gt;All&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;constraints&lt;&#x2F;td&gt;&lt;td&gt;A whitespace delimited list of constraints.The constraint expression is then fetched from an annotation of the same model element. All validation delegates (URIs) are tried to load as annotation URI with the constraint name as value. So for example if a model element has “constraints=test1 test2” and the package has the “validationDelegates” value set to “urn:delegate1” then the annotation urn:delegate1#test1 and urn:delegate1#test2 will be loaded.  If there is no expression present it will create a dummy method in the Validator class with must be implemented by the user. And marked with “@genenreated NOT”.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;package&quot;&gt;Package&lt;&#x2F;h3&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;validationDelegates&lt;&#x2F;td&gt;&lt;td&gt;A whitespace separated list of validation delegate URIs.e.g. “urn:deletegate1 urn:delegate2”&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;sample_gen_pattern_1&quot;&gt;A “Gen” pattern example&lt;&#x2F;h3&gt;
&lt;p&gt;[code language=”java”]&lt;br &#x2F;&gt;
&#x2F;**&lt;br &#x2F;&gt;
* …&lt;br &#x2F;&gt;
* @generated&lt;br &#x2F;&gt;
*&#x2F;&lt;br &#x2F;&gt;
public static CommonPackage initGen () {&lt;br &#x2F;&gt;
if ( isInited ) {&lt;br &#x2F;&gt;
return (CommonPackage)EPackage.Registry.INSTANCE.getEPackage ( CommonPackage.eNS_URI );&lt;br &#x2F;&gt;
}&lt;&#x2F;p&gt;
&lt;p&gt;final CommonPackageImpl theCommonPackage = (CommonPackageImpl) ( EPackage.Registry.INSTANCE.get ( eNS_URI ) instanceof CommonPackageImpl ? EPackage.Registry.INSTANCE.get ( eNS_URI ) : new CommonPackageImpl () );&lt;&#x2F;p&gt;
&lt;p&gt;isInited = true;&lt;br &#x2F;&gt;
WorldPackage.eINSTANCE.eClass ();&lt;br &#x2F;&gt;
theCommonPackage.createPackageContents ();&lt;br &#x2F;&gt;
theCommonPackage.initializePackageContents ();&lt;br &#x2F;&gt;
theCommonPackage.freeze ();&lt;&#x2F;p&gt;
&lt;p&gt;EPackage.Registry.INSTANCE.put ( CommonPackage.eNS_URI, theCommonPackage );&lt;br &#x2F;&gt;
return theCommonPackage;&lt;br &#x2F;&gt;
}&lt;&#x2F;p&gt;
&lt;p&gt;public static CommonPackage init () {&lt;br &#x2F;&gt;
final CommonPackage result = initGen ();&lt;br &#x2F;&gt;
EValidator.Registry.INSTANCE.put ( result, new ExtensibleValidationDescriptor () );&lt;br &#x2F;&gt;
return result;&lt;br &#x2F;&gt;
}&lt;&#x2F;p&gt;
&lt;p&gt;[&#x2F;code]&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>PGP Key</title>
        <published>2013-07-15T14:45:41+02:00</published>
        <updated>2013-07-15T14:45:41+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/pgp-key/" type="text/html"/>
        <id>dentrassi.de/pages/pgp-key/</id>
        <content type="html">&lt;p&gt;Fingerprint: 10DA 7C61 C910 F794 91F7 8F0F DFD4 8B44 6B2F 168F&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mQGNBFlARpgBDADH49r8XQ2eVVvfxvR+1zGvUUlEzx3cETJBfPKLzwSHd2jxNDHr
&lt;&#x2F;span&gt;&lt;span&gt;H4umf&#x2F;1Gp0EnW0BZVRPGPx4ahBWZgO1Vo09I&#x2F;Gr+ExPCyGiZrLaslJN2GMEP&#x2F;Yx8
&lt;&#x2F;span&gt;&lt;span&gt;u2R6WaMymtiDoj907mRrUrh98llJ3jjYX9ilAaNHult8IgM3NEUfOFY&#x2F;qfyUooKn
&lt;&#x2F;span&gt;&lt;span&gt;vfPktJVqGMIkXKC&#x2F;P3kalCVa5pTyoCYYc5kjo3+QBZGkZKc311nuxB2TRciWNnlw
&lt;&#x2F;span&gt;&lt;span&gt;Nhgz&#x2F;g77DbvDKDJ4r2jx235gbIKdeFZ6IKSh2B0qXcGczfVv6DX1BLuEG+c6FdP6
&lt;&#x2F;span&gt;&lt;span&gt;SfvbAExULmP8MirM1YAdToN9IzaSKKdnuAI0mClgHoCWQtdmjelW&#x2F;5VTIL7GRMgQ
&lt;&#x2F;span&gt;&lt;span&gt;0yLceUVp&#x2F;kWXrQdH&#x2F;QLxwEnruFT6lmb9B25+VI59PqeRjRp4pWM8bzjEY2SeBln+
&lt;&#x2F;span&gt;&lt;span&gt;0ETthBqTW5&#x2F;AvzRQc&#x2F;IjB2vf7aEIrFu15kcv+oEW7UShCspEAG9PTHJVDCvY3XnQ
&lt;&#x2F;span&gt;&lt;span&gt;CqRpVuZ+BAjQ&#x2F;xUAEQEAAbQhSmVucyBSZWltYW5uIDxjdHJvbkBkZW50cmFzc2ku
&lt;&#x2F;span&gt;&lt;span&gt;ZGU+iQH4BBMBCABiAhsBBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgCIYaHR0cHM6
&lt;&#x2F;span&gt;&lt;span&gt;Ly9kZW50cmFzc2kuZGUvNkIyRjE2OEYuYXNjFiEEENp8YckQ95SR948P39SLRGsv
&lt;&#x2F;span&gt;&lt;span&gt;Fo8FAl7MMgQFCQdtHuwACgkQ39SLRGsvFo&#x2F;9rwwAsxnpRy1CpFucYI06JhtLbW09
&lt;&#x2F;span&gt;&lt;span&gt;kgGLVqduf0zfaT8h&#x2F;G0&#x2F;7qhJboST6V7frozjJUPsRK3WBz5WoLx0J0oWdLj93KzI
&lt;&#x2F;span&gt;&lt;span&gt;HoIkrvBRIVddbaJVOO3n2HDDxh0yTqPdnCxOoUkFJ3wAW00BtV70REcfNTAK7L+Z
&lt;&#x2F;span&gt;&lt;span&gt;9BEnlDaq4PKgOE6GsBidiRS7nKmNDns&#x2F;eSPBb&#x2F;6Daw7GmyNQb8&#x2F;0jGbUAe+EY0vj
&lt;&#x2F;span&gt;&lt;span&gt;81FWscQbD5mNuPGaNgGVCrNyHFlhB9njODJOebEloOW91am+hSroR2I6e3F+JXmi
&lt;&#x2F;span&gt;&lt;span&gt;rg7bqz8ukWfu6cNJ0Fq5u0WGKvgll8mW22ftwbQgOIKPCb9keCD3xs2rvr&#x2F;1Y1Zv
&lt;&#x2F;span&gt;&lt;span&gt;hTasd&#x2F;3cfb2AJNuBFg1X8hAUbqyQ7pkEbUVh442DBkDovlwj&#x2F;TRY8iG2sumCqxBX
&lt;&#x2F;span&gt;&lt;span&gt;kxJVZD0zlur4SKY0fw28db3yFZj++DJ2mRaz2BXY33a2mhSUQ9WSv7YZiDY9q1fV
&lt;&#x2F;span&gt;&lt;span&gt;pDqjoF9UiLOTa40ig+PbY4DR2sj7YCyCMBm1yFcmiQH4BBMBCABiAhsBBgsJCAcD
&lt;&#x2F;span&gt;&lt;span&gt;AgYVCAIJCgsEFgIDAQIeAQIXgCIYaHR0cHM6Ly9kZW50cmFzc2kuZGUvNkIyRjE2
&lt;&#x2F;span&gt;&lt;span&gt;OEYuYXNjFiEEENp8YckQ95SR948P39SLRGsvFo8FAmDujcMFCQmPeqsACgkQ39SL
&lt;&#x2F;span&gt;&lt;span&gt;RGsvFo&#x2F;OsQv&#x2F;Vg6zGkzgw9mHa78TDOfsd+XVv3BPo1EhGjRO9Dhx6uhE1FO12WoL
&lt;&#x2F;span&gt;&lt;span&gt;m7W2O0L0D2ok0hRNcpEzMrgLhsSVEv+2I7lVqLhEN9SF1yq8lIoqoWd0TbJmwlr8
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;L2nWTgvWsnwobkdOVftOpeSTTWm5FouzPCSLtA5FNFSDTXKoXoV7IcJQ22hD2LM
&lt;&#x2F;span&gt;&lt;span&gt;O5EXllr6WqqIndjaqHzHCkVpgFdgxqnG2PqpxJ1hTY2nw2xcYHNsGzNfGNA9Uk&#x2F;3
&lt;&#x2F;span&gt;&lt;span&gt;LgO8jka89AkXGy7tSbJCztSSvz5uZfqp3k7DZHG3Po6uZvjZUBb6Hq+GRrGbj6fS
&lt;&#x2F;span&gt;&lt;span&gt;+ywahxebiD5Oq3VMz9pbzvboP8Qb0YOx1isBSdrAmvqHjrW6D0MORi5tRqYF0PeX
&lt;&#x2F;span&gt;&lt;span&gt;pvhRzVrSnV4A12l90&#x2F;EjRTP2OmvCoKZNY9f67Uw7tBei4tG70FVzafliR10&#x2F;FPQw
&lt;&#x2F;span&gt;&lt;span&gt;QCE8la2Pq&#x2F;&#x2F;gvS6aeMQ8W195&#x2F;vN30JQlx4h45SVVby0+Xxn32R3xPoQm9cpy+e6k
&lt;&#x2F;span&gt;&lt;span&gt;q3iLUi7Htw3jiQHhBBMBAgBLAhsBBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgCIY
&lt;&#x2F;span&gt;&lt;span&gt;aHR0cHM6Ly9kZW50cmFzc2kuZGUvNkIyRjE2OEYuYXNjBQJbArHXBQkDo568AAoJ
&lt;&#x2F;span&gt;&lt;span&gt;EN&#x2F;Ui0RrLxaP70EL&#x2F;1j4H0vowa5Ir1fWrZufMbPiK9EXb2hi&#x2F;nn4vawmLFNxTcji
&lt;&#x2F;span&gt;&lt;span&gt;DXZkKNKsSyJUhcnHVsSwL8K9fplN2cIyLrCy0VXAnysfAEPIx05mjCk9MNGQ4avp
&lt;&#x2F;span&gt;&lt;span&gt;EFC2hxqonlbdroBmDuTA9Pc+6CuA&#x2F;u4LY1jM1MeEOhan7PxnT96QlrEh7VqN1SC1
&lt;&#x2F;span&gt;&lt;span&gt;CyEVVyYPx0PbDlBYHiOVXtZry9Dc1NlQ49MGHyDO8EHqwA9KTCrEx&#x2F;mmP6YB2mD4
&lt;&#x2F;span&gt;&lt;span&gt;c&#x2F;p5YuN2N5ROZvTZIRguzUeMuE74nltZfj4MBcPNQLkoXVhwzKplijOlNk4vs8+P
&lt;&#x2F;span&gt;&lt;span&gt;xXT8KCNuDYHtO5xTNPhfAGeV2AkAMOwd+n+e45axa3TucCdSaLvMds12uaJ3Maz6
&lt;&#x2F;span&gt;&lt;span&gt;tp30Vvmbd3WND8RM3o&#x2F;OqG+S1b5JXNOcjL+KU4eVUcklJ6rpQ8ZSbqjshn+9Nfjg
&lt;&#x2F;span&gt;&lt;span&gt;7IleHl8+&#x2F;ivakrg3lde&#x2F;Heu&#x2F;FCZb25ILP2OO&#x2F;kpPb5Gk9pC+HVsXLINBRAV7i4rI
&lt;&#x2F;span&gt;&lt;span&gt;92QAIn+WxhhhzdE0&#x2F;YkB+AQTAQgAYgIbAQYLCQgHAwIGFQgCCQoLBBYCAwECHgEC
&lt;&#x2F;span&gt;&lt;span&gt;F4AiGGh0dHBzOi8vZGVudHJhc3NpLmRlLzZCMkYxNjhGLmFzYxYhBBDafGHJEPeU
&lt;&#x2F;span&gt;&lt;span&gt;kfePD9&#x2F;Ui0RrLxaPBQJi&#x2F;z7eBQkLoCvGAAoJEN&#x2F;Ui0RrLxaP3OUL&#x2F;35pFKRRLeTe
&lt;&#x2F;span&gt;&lt;span&gt;y1spCSnec788yWES2+rLcr5k2odWXtFK8CjZdNwbz0fhBFm05Kg6aliJAVWrs2hR
&lt;&#x2F;span&gt;&lt;span&gt;FYS4Aw1ULpB8NiEvxDQQ&#x2F;dn+rnIbWVIxm40GDQ&#x2F;oCX&#x2F;5vnNdPOLrwTsTI09kWavr
&lt;&#x2F;span&gt;&lt;span&gt;H1I+N+2RyaPK3o676wqwNpf367h81O&#x2F;Nd+rbmW8NtjaWnaf1mYc1zKoUBJC0hubp
&lt;&#x2F;span&gt;&lt;span&gt;Nsl4rS7PlyLzMc5Lj9BUSx8NMlbwbey0v3jCP2zWWBunaSiPL2htWGOoI1qmMXLN
&lt;&#x2F;span&gt;&lt;span&gt;Ed1exmMVp5ARUuvYQoPLLDcWvawHNVEgqQxoeKcT03MhroYHoOqipNp0nCmhgWz1
&lt;&#x2F;span&gt;&lt;span&gt;NxW88T3VsM8ST9AKAjj4cs65zlmMYW6SIuHKqdVwxpxnxgeSXE3Xtbo20SQKVW24
&lt;&#x2F;span&gt;&lt;span&gt;zngwVA2OtxUnzlNxxg0hOf5Q&#x2F;AXXZKTM52FtlRtwTNxeD2IrmG0oR+VpCyq3CVDw
&lt;&#x2F;span&gt;&lt;span&gt;X1KZO1XBxMz8EYfMsOGdJdbZHOiOyTlhK7eI3rcWzIKHapy2w&#x2F;itqrQsSmVucyBS
&lt;&#x2F;span&gt;&lt;span&gt;ZWltYW5uIChSZWQgSGF0KSA8anJlaW1hbm5AcmVkaGF0LmNvbT6JAdQEEwEIAD4C
&lt;&#x2F;span&gt;&lt;span&gt;GwEFCwkIBwIGFQoJCAsCBBYCAwECHgECF4AWIQQQ2nxhyRD3lJH3jw&#x2F;f1ItEay8W
&lt;&#x2F;span&gt;&lt;span&gt;jwUCXswyCQUJB20e7AAKCRDf1ItEay8WjwN&#x2F;C&#x2F;9MNnrihaLBhZmzkG+9rDBNfuHr
&lt;&#x2F;span&gt;&lt;span&gt;5BqtKTu4Zs+GKqfe2zm+eCxCxmXwywJ&#x2F;bPK5ZKc8tB3rvdj1Z3+UOjEDg&#x2F;yBwX20
&lt;&#x2F;span&gt;&lt;span&gt;r+tdFpTLXF4Ptd2b3G2CRi380k+BmLipkstezVSOp6p3IH5FPdZsIFRAr5dzCiEf
&lt;&#x2F;span&gt;&lt;span&gt;bgX7+tN2dWm82NMA92MxpQOLJYARyH+5UZ7OXhXBvEjbG8IQD2BsWa&#x2F;fJEsVRGRo
&lt;&#x2F;span&gt;&lt;span&gt;TsIsbZw19FfOwob634V2w6cmfWrZ+1dI005mCuYav9T&#x2F;fH1OPX4pLk6POqfRKT9I
&lt;&#x2F;span&gt;&lt;span&gt;ak7zIugmA1fRtIQLLrsdcPZdQ4j7M7MnKDl7ttsjC2k9x+00MkWEyEjw5ICFz+sc
&lt;&#x2F;span&gt;&lt;span&gt;G0TmIwYtfn&#x2F;Co8imf0l+w+S+ugVb6G+e59E05BIRF20lbf4pzmlHkOuaZFxUMdb0
&lt;&#x2F;span&gt;&lt;span&gt;bRu1WBcllCOJgKSbcTCndiDDhMETzEav8exNq6dKkyDQHrb+K3ReVqUGuSvAzIRj
&lt;&#x2F;span&gt;&lt;span&gt;VSFh6dPQFdRbdV2NnxlxLWGjDoIhSG4HTfGS4+qJAdQEEwEIAD4CGwEFCwkIBwIG
&lt;&#x2F;span&gt;&lt;span&gt;FQoJCAsCBBYCAwECHgECF4AWIQQQ2nxhyRD3lJH3jw&#x2F;f1ItEay8WjwUCYO6N7wUJ
&lt;&#x2F;span&gt;&lt;span&gt;CY96qwAKCRDf1ItEay8WjxP6C&#x2F;4kL07beZFZGRRtquyAsN7o&#x2F;PTnLkaFm6qTybcy
&lt;&#x2F;span&gt;&lt;span&gt;xRoBNGvLYNA3td8sPGo1WPK6yc0TlVjcDaMF5Ar3Al7xPLfNKu73ysDiYMZEk74C
&lt;&#x2F;span&gt;&lt;span&gt;NF20zf1Z0vZY251eYOwWMHLlGZpmnx95PbnMU4PKBP6w7B2USkHA8L8xwsMu0Kgk
&lt;&#x2F;span&gt;&lt;span&gt;oDYPybs7pRfDTI8iFYTba0oCHk&#x2F;b+EDfQbbFUerPQvT1uOBc&#x2F;eHeehV6f1guGdTA
&lt;&#x2F;span&gt;&lt;span&gt;xLKtzKt43cj7e+yJmS06LPMRy6m7XKp&#x2F;x9trb3x7XXVObT3mNOrmn2RHGNB7HV0e
&lt;&#x2F;span&gt;&lt;span&gt;fzEsr5NlZjGI3wFsv+wsFyefOUjzPshJLEG50BErth7zwvTofMTSv&#x2F;3LBPR44gV1
&lt;&#x2F;span&gt;&lt;span&gt;5EG6So18PATc5VFC10mJVKuSkKHZ96MdR6FTiN+57azaIqtc92gJ1qy2H8D&#x2F;KPmF
&lt;&#x2F;span&gt;&lt;span&gt;ytiziniVUUy&#x2F;vKjYNNPfax&#x2F;5r&#x2F;legfiBxcH81X2yUUMihAqtigbKGx+63fWP&#x2F;q7T
&lt;&#x2F;span&gt;&lt;span&gt;mvBz7JCI+7XASQooN2X+VVTWY8mJAdQEEwEIAD4CGwEFCwkIBwIGFQoJCAsCBBYC
&lt;&#x2F;span&gt;&lt;span&gt;AwECHgECF4AWIQQQ2nxhyRD3lJH3jw&#x2F;f1ItEay8WjwUCYv8+3gUJC6ArxgAKCRDf
&lt;&#x2F;span&gt;&lt;span&gt;1ItEay8Wj1mHC&#x2F;9miQKxXsf15yjSbMXnrGHRI05TdJBtZqk2CodwmY+QW&#x2F;xzHXrH
&lt;&#x2F;span&gt;&lt;span&gt;yBe8KWcJjp5pmpJxoyX&#x2F;9tV8HQsQGkPU942Tas83gV1HVWWZTzt+0Mgs2I0oCFsD
&lt;&#x2F;span&gt;&lt;span&gt;OyzA5JNx4kq0OoDmj24a0EvdDEK5VLIu8lAYKfVIA4mfRLuLpc9rU4SIGLk1X9x6
&lt;&#x2F;span&gt;&lt;span&gt;NRHqF5Bp31vBoZ16dPSSOTkk4L&#x2F;MubUSWybJXGdhwCVHdS3sTgGLkbzyvlex6gcc
&lt;&#x2F;span&gt;&lt;span&gt;lD3WaOnStRe04rdRYNKouVBUJohpE+ykBzbjx8MOSbbXX9FPaAXvHRMevFE5Dyjw
&lt;&#x2F;span&gt;&lt;span&gt;P+fUOq2&#x2F;pxAuYJg0IzoTAqpJPVwdBLHX0paVEUSUSLVuS3w0QNvhc5+zvl4bvZoP
&lt;&#x2F;span&gt;&lt;span&gt;fvHk42Ty&#x2F;2E2g3fWidDjtbisyX7Sj6gnfiPA&#x2F;19iqqE9PlzvjLwrgCdsHW7yTGnT
&lt;&#x2F;span&gt;&lt;span&gt;Sm&#x2F;6EbbP5V8MklMUMvbZ2pVxk1IX0+cwgki6ZUkk+pjQ6Fld50AvH7y+Yd973yU1
&lt;&#x2F;span&gt;&lt;span&gt;Lb8JqFhq5egagiC5AQ0EWUBJdAEIALjCRAmG1LZkqpthLAw3dkgWqS02MeRKinHv
&lt;&#x2F;span&gt;&lt;span&gt;p7SXMFwsAwOx&#x2F;JdQRTn6&#x2F;ksPs325HF4OFyL2bwhJ1jIBCkpcQZPw6aOex1Xzpbvd
&lt;&#x2F;span&gt;&lt;span&gt;XeExK0KwROXkGcs80wERv8vp0uvtQVkLgfQ8lS4aK&#x2F;g4mpbPcySOUpRc&#x2F;hD+SmO+
&lt;&#x2F;span&gt;&lt;span&gt;+bEDR1&#x2F;5nHLKofIJ0c9DD&#x2F;Dbi+lFjJGbadLGjgAKJ9aBYjnGpNrFC6PrTlqiSATJ
&lt;&#x2F;span&gt;&lt;span&gt;ZEt9rnzFcsxB1Aq7VWLVyGxrgkOSeu6jEHbhDzpAfcINtzJw11MxxWHNGyF8POVL
&lt;&#x2F;span&gt;&lt;span&gt;uavnH+de0H0JUgW0XBg7YJJGwhvZ0CvjZvGGr5dGFH&#x2F;is+TSylEAEQEAAYkBvAQY
&lt;&#x2F;span&gt;&lt;span&gt;AQgAJgIbDBYhBBDafGHJEPeUkfePD9&#x2F;Ui0RrLxaPBQJezDIvBQkHbRw7AAoJEN&#x2F;U
&lt;&#x2F;span&gt;&lt;span&gt;i0RrLxaPUgwL&#x2F;0dull9hTcetRDlnhld10Ker96jeyX4Lgst1xsC64OLAFNj6ZcWV
&lt;&#x2F;span&gt;&lt;span&gt;IyBT3rrTdmttmwWu2HrwaJllx5J+GQ2559vATF0NnoWfxjDEsXuyn3jyF+fQjHHu
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;Nu&#x2F;Ixyu73lkPpQfPviHiJ7KwDWy7voTQiGkQIAxvODQIZu2IcElvPT+S8zSgiqX
&lt;&#x2F;span&gt;&lt;span&gt;MHYanARLM2n1Ta0lMLj&#x2F;W4oUNOp6dQlj&#x2F;eiq+P7vcmQxyIRO6HM0RzdVG7&#x2F;5PYyK
&lt;&#x2F;span&gt;&lt;span&gt;xiWEOhWkAX6kLpmIv42NRcNXqJnBxHRUOfRMjJBZpCDIFl4R8UiwHCgrUPrTMEKX
&lt;&#x2F;span&gt;&lt;span&gt;3Ffo67vhf&#x2F;xPTmSQeKbXPrWZbGscKlxQB1Swj8N9qhYWb0E&#x2F;3WUct9PB0p6HnCHT
&lt;&#x2F;span&gt;&lt;span&gt;vR2jMHrXvOIQxqar54DQwbnI8ydaIw6m2w+quLi7ZPI6e80TypuEKv9XueInXO1V
&lt;&#x2F;span&gt;&lt;span&gt;K0S7fkTQXbdogoHS&#x2F;puFIHuNZEVgm5g&#x2F;CyJI2TZUySE1BqmtgjBa3B&#x2F;km8q6Qhyj
&lt;&#x2F;span&gt;&lt;span&gt;We7dgEoREMAn14kBvAQYAQgAJgIbDBYhBBDafGHJEPeUkfePD9&#x2F;Ui0RrLxaPBQJg
&lt;&#x2F;span&gt;&lt;span&gt;7o4CBQkJj3gOAAoJEN&#x2F;Ui0RrLxaPk&#x2F;AL&#x2F;24ApvMUBYsS1BOU2kjwbJV9q3WEGgxV
&lt;&#x2F;span&gt;&lt;span&gt;Kya01UyUrDN2wxGvJgePFlxzeZfiZfA2LpiEIRaK13K4qBnTXJVDabPyzNxULNox
&lt;&#x2F;span&gt;&lt;span&gt;Mcznq8253zY0VlCyJNEuuO3gCFFPL0&#x2F;kM+tD6nI9tZWLibURx&#x2F;jdjZA7qxng30lD
&lt;&#x2F;span&gt;&lt;span&gt;230Tt7PsLf1lpq7CDE1dOzRLuM2fDF7KCFyzEovbKK+4yni0&#x2F;uGo0BWikmiYJJXC
&lt;&#x2F;span&gt;&lt;span&gt;cxbEpmbrqlQlgG0lCqKzB9T9xHnhryggPODYPiB2X4Ym5Ykmplo8Gs6CJhxp4wmX
&lt;&#x2F;span&gt;&lt;span&gt;tyi6yHrShvgFknQW+gJjS+PlRMvab1uDZ3RSndOoApSok3Apr+dzGdN7E2qe84Cb
&lt;&#x2F;span&gt;&lt;span&gt;FKax2FCskhiAyeg4KquKUBFZJD807rbHyhw7PYWZuhCw3VjKSHK0AjbsrwHBv0Co
&lt;&#x2F;span&gt;&lt;span&gt;UT7O&#x2F;lZnhPb7sQollLyqM0yJ4ULM+aYaAe+wp3iGyznOHfxdgc255u6qQOb2sVWZ
&lt;&#x2F;span&gt;&lt;span&gt;hCtjNEDtixpR7OmH0O7&#x2F;xGYNJlFtmghnFYkBvAQYAQgAJgIbDBYhBBDafGHJEPeU
&lt;&#x2F;span&gt;&lt;span&gt;kfePD9&#x2F;Ui0RrLxaPBQJi&#x2F;z9DBQkLoClPAAoJEN&#x2F;Ui0RrLxaPLu0L&#x2F;2dnbniNqjVC
&lt;&#x2F;span&gt;&lt;span&gt;ySRXkmCV2Ig+Lm6rQb5IMcHp4rqB&#x2F;8TgiFKzkfU&#x2F;xYR&#x2F;pV88wOKsfJsRXMdMhkUI
&lt;&#x2F;span&gt;&lt;span&gt;5z22Vwx&#x2F;tMhL+Iv0UsJQXkn6xk1v4Y5c7vm&#x2F;n+1wmXDx8&#x2F;lLWHb5qetg&#x2F;hycnZiV
&lt;&#x2F;span&gt;&lt;span&gt;tnaT9gQAxCxNdhVObAg3iH7wzOnwOyljv2MJHgmIb8v9MQE2JWdS2V6k1564tz1e
&lt;&#x2F;span&gt;&lt;span&gt;Sod7Fbk&#x2F;yLruYfHcR+X8OaGlwvRm+SvehR131sZNSmGYeUwn78VwyT96M3R96rvg
&lt;&#x2F;span&gt;&lt;span&gt;auLYxwUNlFaEE6pYLatC4DmZ&#x2F;BjAuRiXfCjyLg4B&#x2F;JCgnntH7JSd6fkB+ftGsoxu
&lt;&#x2F;span&gt;&lt;span&gt;EtDKcIse9muN36t7aeoQ5ggyFkOMWyuvSEGZzmZz80p2Hgf126hkIrSqPL0LwbWN
&lt;&#x2F;span&gt;&lt;span&gt;6k6Q+&#x2F;s3U3rFCunndwAr3wVx8xYsSs8cB9xXMVJg0Oc&#x2F;deHWhR5Vesk8BSIk8VBc
&lt;&#x2F;span&gt;&lt;span&gt;xFtbRZfuanTiqLLN5Ay7UpanRRu6uLxnMZT7q+U&#x2F;aBfkhygMwaM9IrkBDQRZQE8d
&lt;&#x2F;span&gt;&lt;span&gt;AQgAlvdNe5FRUYrc2mhvaqMPO53pkjxctOFZMr7gYoc7q1BYhVIyZDFszMEQRfoo
&lt;&#x2F;span&gt;&lt;span&gt;RvuEXp&#x2F;9IYzOG3&#x2F;WNFDGSBfCGuItiWujLhdqshHnJVrETq0uWQ8IxgIZ6lNDkyIc
&lt;&#x2F;span&gt;&lt;span&gt;Z8nLkNU62PXk9pEbed+qNLxpwFd+ITZO576z0LCUUXdBzvL0LnrHUWm+I0rcYSSI
&lt;&#x2F;span&gt;&lt;span&gt;cZ6aMrnMtU+srFPSsamoL0C41svEHVSGUAUxehxoV7&#x2F;mT4XdfOn&#x2F;+qOdoz4ECuCQ
&lt;&#x2F;span&gt;&lt;span&gt;DiHbzUXsj+ysoFCTEfM46990cMIizGT1+LvraMG0gRny19g6SVng86OKqAADP&#x2F;CK
&lt;&#x2F;span&gt;&lt;span&gt;rDO0QamHqtzSz4LJRZtDr0KkyQARAQABiQLbBBgBCAAmAhsCFiEEENp8YckQ95SR
&lt;&#x2F;span&gt;&lt;span&gt;948P39SLRGsvFo8FAl7MMlEFCQdtFrQBKcBdIAQZAQIABgUCWUBPHQAKCRBImvSl
&lt;&#x2F;span&gt;&lt;span&gt;Gq3A+V70CACA&#x2F;YtNUYxZEtA3uj75dCrX1nHKwABEIRG9FZvmaZW3A8rqH4Iaq+59
&lt;&#x2F;span&gt;&lt;span&gt;RL53ujlP1oTPqqhJTHvxCWmtzj8EqzsswWaLCfPlsmCPkF9hn9D0YyUGyjoBcMOV
&lt;&#x2F;span&gt;&lt;span&gt;V4g4dNSZE&#x2F;RlI5Qz8vZRWOajHqE9R6df7e9IaVKUPeXc2LQ6bwuo9gbaoKqPrvyW
&lt;&#x2F;span&gt;&lt;span&gt;qi89KiUwrfKvhtOvyAN3aIOBf4liz+twlMCqERIVD2OXpGnN9r3xS+dKDdVup40H
&lt;&#x2F;span&gt;&lt;span&gt;VffuvsGSzgo4YUE7mfFlyANlnT&#x2F;sJzd08YFfEdbPzT94cJKGevzDny3ebb7yUjFU
&lt;&#x2F;span&gt;&lt;span&gt;sHBbFeDvtLZc4B6ddDw7R8GWljo4gikNCRDf1ItEay8Wj+SjC&#x2F;wMTlclJ1HBtvZ8
&lt;&#x2F;span&gt;&lt;span&gt;WL&#x2F;QBJRFDwyZlGZpx6vvRON&#x2F;MhpfaUOZQSsCiLJr1MkyXkTjjoYKzCnLVc1GoD6+
&lt;&#x2F;span&gt;&lt;span&gt;ubDjDp56KpYOCm&#x2F;BV4Q+kYT2OpjjpZlf8rR7VJQOhn&#x2F;obJGHyl1C8lXfB+6I1Mrq
&lt;&#x2F;span&gt;&lt;span&gt;6kA5GZcwwy1gO74OasVFa9Z6Kn3NZxt8Pkc+YLytIBtXQVqsbu7QWbumzA7B&#x2F;i8q
&lt;&#x2F;span&gt;&lt;span&gt;76NgY2NT5FNq++jJqttKIRKlEZgnRYUF5VxYPpilbIjQeHpgb12W4Wyky55exG1R
&lt;&#x2F;span&gt;&lt;span&gt;arivNocracnKfPhtAaY4XbmUe0w8i4KzDXutyBOBQVDfZGYpmKSkGoL5j0iAfpVD
&lt;&#x2F;span&gt;&lt;span&gt;ys5YyjgLHB90DTY4CMo3FsaJ9rijmi1iB3jXlcLKSwdZRY70br+CLysqj2rMXWt0
&lt;&#x2F;span&gt;&lt;span&gt;c1GrXccK7V2FJhAYTtkmxVccQR486KGyn9m7XqPzlK8o93hNKi3opijhy6HRDGSS
&lt;&#x2F;span&gt;&lt;span&gt;RmmrDGVw4vFtg3+ClqmXNjzl&#x2F;HahIh7tUpJ+ETRzdv6HfYpadW6JAtsEGAEIACYC
&lt;&#x2F;span&gt;&lt;span&gt;GwIWIQQQ2nxhyRD3lJH3jw&#x2F;f1ItEay8WjwUCYO6OKAUJCY9yiwEpwF0gBBkBAgAG
&lt;&#x2F;span&gt;&lt;span&gt;BQJZQE8dAAoJEEia9KUarcD5XvQIAID9i01RjFkS0De6Pvl0KtfWccrAAEQhEb0V
&lt;&#x2F;span&gt;&lt;span&gt;m+ZplbcDyuofghqr7n1Evne6OU&#x2F;WhM+qqElMe&#x2F;EJaa3OPwSrOyzBZosJ8+WyYI+Q
&lt;&#x2F;span&gt;&lt;span&gt;X2Gf0PRjJQbKOgFww5VXiDh01JkT9GUjlDPy9lFY5qMeoT1Hp1&#x2F;t70hpUpQ95dzY
&lt;&#x2F;span&gt;&lt;span&gt;tDpvC6j2Btqgqo+u&#x2F;JaqLz0qJTCt8q+G06&#x2F;IA3dog4F&#x2F;iWLP63CUwKoREhUPY5ek
&lt;&#x2F;span&gt;&lt;span&gt;ac32vfFL50oN1W6njQdV9+6+wZLOCjhhQTuZ8WXIA2WdP+wnN3TxgV8R1s&#x2F;NP3hw
&lt;&#x2F;span&gt;&lt;span&gt;koZ6&#x2F;MOfLd5tvvJSMVSwcFsV4O+0tlzgHp10PDtHwZaWOjiCKQ0JEN&#x2F;Ui0RrLxaP
&lt;&#x2F;span&gt;&lt;span&gt;ZOcL&#x2F;R9alBKpybznfZ&#x2F;7lP&#x2F;YBA9qRB&#x2F;25H0YhJs9pzObKWo1P0i6Uz&#x2F;7WvxsUn7A
&lt;&#x2F;span&gt;&lt;span&gt;oEqKpiD&#x2F;CflA9kUKtyjCet3knX75ulGVM1RD2fFcsV24g0OCVuls5ZzaNolNwdXe
&lt;&#x2F;span&gt;&lt;span&gt;Aad+ZtXZN8J7+J+SWlHVmHnc+7aq6CsAI8Aw4v4SYpmuMZgT9oXyXji+Mc2HLedM
&lt;&#x2F;span&gt;&lt;span&gt;bq87124Pxtj7Euvgla2wHtdIQ4XEWwLWMcfsJkiNv7sz7S9qsaOlk2+xvycTjMy+
&lt;&#x2F;span&gt;&lt;span&gt;ruPmY11GI61UCqTS3WKdpeZDWp&#x2F;pUk5tniJkQxiUkKnPixlR739w4grBmPVU85GD
&lt;&#x2F;span&gt;&lt;span&gt;kD8v3MdKu0ViYpv&#x2F;8JbEPTskPBdWM898m+cAw4et33YG6TlCuqeNlG3XrBYG4L17
&lt;&#x2F;span&gt;&lt;span&gt;o4c1mZMjz+naZlsIjCTrt9XNc33lE1A1BjZHvPGiSVbDr9RDQTSgbSaQmgnUfJ17
&lt;&#x2F;span&gt;&lt;span&gt;VceuseUQ1DLBiG4QJX1F02F93TP76nU&#x2F;3qfz7JDEjH7Uq22F&#x2F;Dw8d22Sr56tMPSz
&lt;&#x2F;span&gt;&lt;span&gt;IIXy4YkC2wQYAQgAJgIbAhYhBBDafGHJEPeUkfePD9&#x2F;Ui0RrLxaPBQJi&#x2F;z9DBQkL
&lt;&#x2F;span&gt;&lt;span&gt;oCOmASnAXSAEGQECAAYFAllATx0ACgkQSJr0pRqtwPle9AgAgP2LTVGMWRLQN7o+
&lt;&#x2F;span&gt;&lt;span&gt;+XQq19ZxysAARCERvRWb5mmVtwPK6h+CGqvufUS+d7o5T9aEz6qoSUx78Qlprc4&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;BKs7LMFmiwnz5bJgj5BfYZ&#x2F;Q9GMlBso6AXDDlVeIOHTUmRP0ZSOUM&#x2F;L2UVjmox6h
&lt;&#x2F;span&gt;&lt;span&gt;PUenX+3vSGlSlD3l3Ni0Om8LqPYG2qCqj678lqovPSolMK3yr4bTr8gDd2iDgX+J
&lt;&#x2F;span&gt;&lt;span&gt;Ys&#x2F;rcJTAqhESFQ9jl6Rpzfa98UvnSg3VbqeNB1X37r7Bks4KOGFBO5nxZcgDZZ0&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;7Cc3dPGBXxHWz80&#x2F;eHCShnr8w58t3m2+8lIxVLBwWxXg77S2XOAenXQ8O0fBlpY6
&lt;&#x2F;span&gt;&lt;span&gt;OIIpDQkQ39SLRGsvFo&#x2F;CgAwAvDztI+dKC9Obb3DbwSsAcbSOA1cHJXDThHK9C638
&lt;&#x2F;span&gt;&lt;span&gt;SAYDJUdu4G82UFbQXqKnTJKKC7cBiXto5a8770ysdvqYgDbQvaf&#x2F;&#x2F;8sO1lY9HVkf
&lt;&#x2F;span&gt;&lt;span&gt;cYVpg5SjA282nIhdht6SASwBzmfPG5QaGyImvcyeKopYhyAj0zPk8R3KXkBmwGxu
&lt;&#x2F;span&gt;&lt;span&gt;xycZ7d34Jw4AdLb+Uj9&#x2F;4I1jBcL5dEtkchalbDbpeuluB4RtZpzDtFqaAg6ATQE2
&lt;&#x2F;span&gt;&lt;span&gt;EPIcaGm8DriHCLmxhJmz448dhaua8g8sgNfva79eBYRBugWXo3QdrIjByJxu9jeq
&lt;&#x2F;span&gt;&lt;span&gt;F12NXP6BaPaWsSLGcRqt9XEVnDEIClsgWKyfzHxA9&#x2F;OLZRAmppjQ6njxnMDvIm3v
&lt;&#x2F;span&gt;&lt;span&gt;4Zd65qgWb6avGJNtjh53rFpDUgCIsAzac9EhuVhtGLwoSgVBGUwNHc8aDIKXOYp1
&lt;&#x2F;span&gt;&lt;span&gt;mqbKUhOdVySSaz5Vuq0wRVY1v2L0vnF4QgWjdHnr+iPPCP6DQxd3huEpXGDSHNHa
&lt;&#x2F;span&gt;&lt;span&gt;T37zyp9MsKiVMJXff6Bg3XVTuQENBFlAT1YBCACh+zPlxVXYO5AOmj6VDuplQWXA
&lt;&#x2F;span&gt;&lt;span&gt;YIMoc3ndG27wP+8ozI6j3gfBZOdM&#x2F;aFGygWsbh5RiU80f3O5hz64UvBClHjMsS+d
&lt;&#x2F;span&gt;&lt;span&gt;BnVWq7eHdv0Xe&#x2F;L&#x2F;TgRnwLi6f1fFhvfXgaPXHwuE0giv7ORtBHjLxiE5B6ZJn&#x2F;D7
&lt;&#x2F;span&gt;&lt;span&gt;WM1y7RnCeOwK72q&#x2F;&#x2F;jEJsgtVagj8e8VbxG6CGFprSpI8faPxy8lrhPpte+AhtY64
&lt;&#x2F;span&gt;&lt;span&gt;zanKacafsZejWevwdU7WDUQhoq3rwsOpGpgHteh5FJ952ECPdkfpCCvqjP7aE+fG
&lt;&#x2F;span&gt;&lt;span&gt;OlYupoLwW0S8bmtBogg2UxJx7Y3V57ZiSSwpJzxdqmeLmBARraJ6Tg6p5u5ZABEB
&lt;&#x2F;span&gt;&lt;span&gt;AAGJAbwEGAEIACYCGyAWIQQQ2nxhyRD3lJH3jw&#x2F;f1ItEay8WjwUCXswyUgUJB20W
&lt;&#x2F;span&gt;&lt;span&gt;ewAKCRDf1ItEay8WjxEgC&#x2F;48HI4IW7dfgg9tLqQPH13BeCbf5U3UXLNrKGajJmZd
&lt;&#x2F;span&gt;&lt;span&gt;vwWTM9aK2igoE7mMLcLnOCYLTm142SqyvZ87&#x2F;E4gah5w4L9qweNUy3xxyoWXtyhf
&lt;&#x2F;span&gt;&lt;span&gt;TzsLiGruZL8MYjRUmJ71qMB&#x2F;lZAuvyF9IS647G6g84JGwio&#x2F;wJ8eaCKjEb06NRgy
&lt;&#x2F;span&gt;&lt;span&gt;sVBj2RDg7Wdbk0FtDyyxiCZaOf3Gx79cCFaReFzRjIn8prh3Jbgr9TPCo9hGuWki
&lt;&#x2F;span&gt;&lt;span&gt;w6DYomfZO8oA+0Wsvw&#x2F;RXZOQuu3+nEZJT8YaFzvjOvV55L3d9AhllSPEXKjN0hTh
&lt;&#x2F;span&gt;&lt;span&gt;4RUsmtTBUTs803jj25Z7GHXo5NX16BzwJ8QdNnuxESlfAgs3b4V8tSGvFTkqsH6L
&lt;&#x2F;span&gt;&lt;span&gt;w1j8Mrg+eTeQKP7Fpq96iuJg1Jlb2Opsyi4AL4pKFIBpzg5F6NHDMDdebiehs8P9
&lt;&#x2F;span&gt;&lt;span&gt;fQV1hT3C20XgU+bGszjQxBpvjZE0peDIG8bg9Gbj9xZ8plgk0jhr3uOiAwEZI3TQ
&lt;&#x2F;span&gt;&lt;span&gt;PPcJfc5eEeIcvMTSy0YxBheJAbwEGAEIACYCGyAWIQQQ2nxhyRD3lJH3jw&#x2F;f1ItE
&lt;&#x2F;span&gt;&lt;span&gt;ay8WjwUCYO6OKAUJCY9yUgAKCRDf1ItEay8WjwgiC&#x2F;0Vj7i9FrhTWQpIqXt4iz2F
&lt;&#x2F;span&gt;&lt;span&gt;xuO&#x2F;xeFfKhWtujVuk+WMm2YXezuenJlytFugB243n4HgaMpBJW+D52BCz&#x2F;C7EfYf
&lt;&#x2F;span&gt;&lt;span&gt;g3FuW18hMoQWwP&#x2F;ETRxmF2YHv5JrJ5F5iB2TzTyIlEcsOAvyr1l9WRqUpxfs+bFu
&lt;&#x2F;span&gt;&lt;span&gt;RJW9guJSSpttUvbtRxHhtAJzSmXPR3z6J7kXR7Jmzxp&#x2F;NZEYUE&#x2F;LHEMfGqTkD5Lh
&lt;&#x2F;span&gt;&lt;span&gt;dg0VSL1bcb9R4VcrZoKhSZ3pLR8pGwQhtcX8uq38616wcSmpVwJMHWwZAzu&#x2F;LwZ3
&lt;&#x2F;span&gt;&lt;span&gt;9l+xNBSQdA2HJ3tB3FZfFeJczFQKzcqtZxVEivht9RdfJT&#x2F;MNo6mis5bURlw1Okq
&lt;&#x2F;span&gt;&lt;span&gt;HfaxaeXEqVvmd8Ywq5Ndp5Fkit3s6pupKG+vr0jxA3TuHG5V0U0IUk4IMtUYYKEX
&lt;&#x2F;span&gt;&lt;span&gt;csoIcp8GDZn2RSTEOb0vhLRpYy3L4lf0QeGK2gck8uAwgle1sk9HFGyUbPImcIxA
&lt;&#x2F;span&gt;&lt;span&gt;48DXNNHGxcvvWGbtu&#x2F;iCBTQC077xUkEPDfApcjfEvSeJAbwEGAEIACYCGyAWIQQQ
&lt;&#x2F;span&gt;&lt;span&gt;2nxhyRD3lJH3jw&#x2F;f1ItEay8WjwUCYv8&#x2F;QwUJC6AjbQAKCRDf1ItEay8Wj2tsC&#x2F;4z
&lt;&#x2F;span&gt;&lt;span&gt;1AfslWeuNqisuEdjqvEDlMz05CHFVuAUnSCX0lYNLsG7GYaequZ99I6lKHztH+EY
&lt;&#x2F;span&gt;&lt;span&gt;z7PoDRldv76jtUPFZH2lLHiMlhJ5o6yGKNa2WcaEHyDwgcg32JD6icR5uEs0b5lj
&lt;&#x2F;span&gt;&lt;span&gt;CVpSDk1MEelToCYugM5Wx2ycLBGIVl6B3whqbLoD7vKxTcxqo8Y&#x2F;sh4+5sEmQtdH
&lt;&#x2F;span&gt;&lt;span&gt;ipKlEPArOq+egCTMK2gUlfVXY&#x2F;sNa5mNUnZ79paBc1&#x2F;rE5Wh9er+rhFHxaSeRjFm
&lt;&#x2F;span&gt;&lt;span&gt;WcKr8RdrCtjPBjCxJ8+f21NMR8Sq9rq5GeV3aQHPJEeMTTa+0WJ35KcCBwQEGxrf
&lt;&#x2F;span&gt;&lt;span&gt;l7Ai8NwZCODdvuRhcnvtjQT7+4W1ShjX8xIP+kCB+4P1DOz+xiR+Bhtw&#x2F;2CjLS7K
&lt;&#x2F;span&gt;&lt;span&gt;LXFsy7WlwT5y6IMEhgVe9zezkTWoMiu7KJoFABl4Wp2R1uRFBsewdTtiZFNOy10H
&lt;&#x2F;span&gt;&lt;span&gt;ePLKffsPAXcPA4Cgl5zGQ6QLinEWSk7qhH44bBMW1dW6rS5GepQvawGotnqo4iI=
&lt;&#x2F;span&gt;&lt;span&gt;=zDzo
&lt;&#x2F;span&gt;&lt;span&gt;-----END PGP PUBLIC KEY BLOCK-----
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Registering EMF models in plain java</title>
        <published>2013-06-29T15:28:44+02:00</published>
        <updated>2013-06-29T15:28:44+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2013/06/29/registering-emf-models-in-plain-java/" type="text/html"/>
        <id>dentrassi.de/blog/2013/06/29/registering-emf-models-in-plain-java/</id>
        <content type="html">&lt;p&gt;Using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Eclipse EMF&#x2F;ECore&quot; href=&quot;http:&#x2F;&#x2F;www.eclipse.org&#x2F;modeling&#x2F;emf&#x2F;?project=emf#emf&quot;&gt;Eclipse EMF&#x2F;Ecore&lt;&#x2F;a&gt; models inside the Eclipse Platform is quite easy. Loading an XML&#x2F;XMI serialized model file is only a matter of some lines of code. The most interesting thing about this is that the whole Eclipse platform can handle the registration of models and model factories for you. So instead of knowing what model type you are loading, it will be detected and the right model factory will be used for loading and creating your model instance. Even better is the fact that also derived model objects can be loaded that way.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Just image you are writing a model A and extend object in the model B. So you can create a model instance which contains objects from model A and B and just serialize it to XML. Loading it back will of course give you model objects of type A and B. Although initially only model A existed and B was an extension using derivation. For this to work the resource mechanism of EMF must need to know which namespace is handled by which resource package and factory. If you are running inside an Eclipse Platform this is easily done using the extension mechanism. And the “genmodel” file and generator will automatically create the correct code and “plugin.xml” for this setup.&lt;&#x2F;p&gt;
&lt;p&gt;The problems start when you are outside the Eclipse Platform and running in a plain Java application. The default way to go is by registering all EMF models somewhere before loading the serialized models:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setup &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyModelPackage&lt;&#x2F;span&gt;&lt;span&gt;.eINSTANCE.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;eClass&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While this seems plain simple for many scenarious, it still brings in the need to register you model packages manually at some point. If you only have one model you may be fine with this. But imagine you have a large number of models or you want to allow derived models:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setup &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyModelPackage&lt;&#x2F;span&gt;&lt;span&gt;.eINSTANCE.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;eClass&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyExtensionModelPackage&lt;&#x2F;span&gt;&lt;span&gt;.eINSTANCE.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;eClass&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem here is that you must know in advance what extension are there. If you want to allow you application to be extended in some way you did not define in the beginning, you are out of luck using the this simple way. The Eclipse Extension manager would handle this for you, but this is not an option for most plain Java applications.&lt;&#x2F;p&gt;
&lt;p&gt;But since Java 1.6 there is a way similar to the Eclipse extension points which can be used to achieve what the extension manager would do with EMF models. The &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;ServiceLoader&quot; href=&quot;http:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;6&#x2F;docs&#x2F;api&#x2F;java&#x2F;util&#x2F;ServiceLoader.html&quot;&gt;ServiceLoader&lt;&#x2F;a&gt; mechanism allows one to find implementations for a provided interface in the current classpath. Although this has some limitation when the classpath contains “http” references, but on the local filesystem it works without any problems.&lt;&#x2F;p&gt;
&lt;p&gt;We simply define an interface “ModelInitializer” which will be the reference to all models that we want to load at a time:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;de.dentrassi.models;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelInitializer &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;initializeModel &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we add an implementation of this in each jar file which contains a model, or at least which should be in charge if registering the model:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;de.dentrassi.sample;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelInitializerImpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelInitializer &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;initializeModel &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;MyModelPackage&lt;&#x2F;span&gt;&lt;span&gt;.eINSTANCE.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;eClass&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course, we do need to do this also for the other model packages. It can be done in the same implementation or in a different one, depending on what you prefer.&lt;&#x2F;p&gt;
&lt;p&gt;Now the important step is to add a “service file” to the JAR file. So each “ModelInitializer” instance must be declared as a “Service” in order for the “ServiceLoader” to find it. In order to do this we need to add a file named “de.dentrassi.models.ModelInitializer” (or whatever you named your interface) and put in the class name of the implemenation. The file has to be placed in the “META-INF&#x2F;services” directory of your JAR file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;de.dentrassi.sample.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelInitializerImpl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, this has to be done for all implementations.&lt;&#x2F;p&gt;
&lt;p&gt;So when we want to initialize all model packages we can use the ServiceLoader in order to find all that are declared:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;de.dentrassi.models.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelInitializer&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ServiceLoader&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;initializeAll &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ServiceLoader&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelInitializer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; serviceLoader &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ServiceLoader&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelInitializer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ModelInitializer&lt;&#x2F;span&gt;&lt;span&gt; service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; serviceLoader) {
&lt;&#x2F;span&gt;&lt;span&gt;         service.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;initializeModel &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That’s it! What happens is that all declared instances if “ModelInitializer” will be located and their “initializeModel” method will be called, which then will initialize the EMF model and register it with the central registry. Also it is no problem if the initialization is run multiple times since the process of initialization will be correctly handled by EMF models in this case.&lt;&#x2F;p&gt;
&lt;p&gt;The layout of multiple JAR files would be like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;fileModel.jar
&lt;&#x2F;span&gt;&lt;span&gt;  de&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    dentrassi&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;      sample&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        ModelInitializerImpl.class
&lt;&#x2F;span&gt;&lt;span&gt;  META-INF&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    services&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;      de.dentrassi.models.ModelInitializer -&amp;gt; Contains: &amp;quot;de.dentrassi.sample.ModelInitializerImpl&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;fileModelExtension.jar
&lt;&#x2F;span&gt;&lt;span&gt;  de&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    dentrassi&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;      ext&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        ModelInitializerImpl.class
&lt;&#x2F;span&gt;&lt;span&gt;  META-INF&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    services&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;      de.dentrassi.models.ModelInitializer -&amp;gt; Contains: &amp;quot;de.dentrassi.ext.ModelInitializerImpl&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Fixing the theming issue with Eclipse RCP applications in E4</title>
        <published>2013-06-06T13:47:35+02:00</published>
        <updated>2013-06-06T13:47:35+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2013/06/06/fixing-the-theming-issue-with-eclipse-rcp-applications-in-e4/" type="text/html"/>
        <id>dentrassi.de/blog/2013/06/06/fixing-the-theming-issue-with-eclipse-rcp-applications-in-e4/</id>
        <content type="html">&lt;p&gt;It seems that migrating from Eclipse RCP 3.x to E4 (Eclipse 4.x) is not a quick win. If you already have an RCP based application the switch to E4 turns out to be a real problem. As is the E4 way if you want some sort of “custom” application that features some IDE components (like a perspective switcher or about dialog). It seems a bit strange that the migration from 3 to 4 is such a bumpy ride. Although there a are lots of tutorials, they mostly only scratch the surface of the task to convert a full-blown RCP application. But this should be a rant on E4, I hope that the next releases improve that situation a lot.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;When I migrated our RCP Application (OSTC from openSCADA) to E4 using the RCP bundle of E4. This seems not to be a real E4 application, but allows one to run a legacy, 3.x, application inside the new E4 environment. A quick it-just-works migration, still you miss all the E4 fun. But at the first start the user interface looked up bit garbled up. Some black line drawing artifacts. The tabs where a bit “dull” compared to the facy new tabs in E4.&lt;&#x2F;p&gt;
&lt;p&gt;The solution was pretty simple, the final RCP application was missing the bundle “org.eclipse.platform” which contained the themes and the necessary resources.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Fixing the Mint-X theme for Eclipse&#x2F;SWT</title>
        <published>2013-04-23T15:15:52+02:00</published>
        <updated>2013-04-23T15:15:52+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2013/04/23/fixing-the-mint-x-theme-for-eclipseswt/" type="text/html"/>
        <id>dentrassi.de/blog/2013/04/23/fixing-the-mint-x-theme-for-eclipseswt/</id>
        <content type="html">&lt;p&gt;If you are running Mint, Eclipse and you like the Mint-X theme, you might be a bit frustrated every time you open up Eclipse. Especially with Eclipse 4.2 the design of the toolbars is pretty messed up. See the launchpad bug entry: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bugs.launchpad.net&#x2F;linuxmint&#x2F;+bug&#x2F;1168281&quot;&gt;https:&#x2F;&#x2F;bugs.launchpad.net&#x2F;linuxmint&#x2F;+bug&#x2F;1168281&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;eclipse1.png&quot; alt=&quot;eclipse1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Gladly this is only a minor glitch which &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bugs.launchpad.net&#x2F;linuxmint&#x2F;+bug&#x2F;1168281&#x2F;+attachment&#x2F;3651502&#x2F;+files&#x2F;mintx.patch&quot;&gt;can be fixed easily&lt;&#x2F;a&gt;. Hopefully the &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;mint-x-theme&#x2F;commit&#x2F;135f78193c17d51386c191f23ff11925b8714a61&quot;&gt;change&lt;&#x2F;a&gt; of the github pull request will find its way into Mint.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Issues with Eclipse Acceleo and sub-packages in the meta model</title>
        <published>2013-02-18T13:30:02+01:00</published>
        <updated>2013-02-18T13:30:02+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2013/02/18/issues-with-eclipse-acceleo-and-sub-packages-in-the-meta-model/" type="text/html"/>
        <id>dentrassi.de/blog/2013/02/18/issues-with-eclipse-acceleo-and-sub-packages-in-the-meta-model/</id>
        <content type="html">&lt;p&gt;Today I stumbled over an issue that was unsolved in my workspace for some days now. Finally I got the time to fix it. I have a ECore meta-model which consists of three sub-packages and has no class in the main package. Generating model, edit and editor for this I had a nice start for my task. Then I wanted to generate code from this meta model and ran into a strange problem. On the console I simply got the following message when I tried to launch the Acceleo UI generator action:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;The type of the first parameter of the main template named &amp;#39;generateElement&amp;#39; is a proxy.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Due to some strange behaviour Acceleo was not able to read the meta-model definition when loading its templates, although the model itself was loaded fine. Trying to re-produce the issue with a new meta-model, everything seemed to work fine until I noticed the difference between my test model and the real model. The test model did have a class in the main package of the meta-model, while the real model did not. So the real model was like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;model
&lt;&#x2F;span&gt;&lt;span&gt;   -&amp;gt; sub1
&lt;&#x2F;span&gt;&lt;span&gt;       -&amp;gt; class1
&lt;&#x2F;span&gt;&lt;span&gt;       -&amp;gt; class2
&lt;&#x2F;span&gt;&lt;span&gt;    -&amp;gt; sub2
&lt;&#x2F;span&gt;&lt;span&gt;       -&amp;gt; class1
&lt;&#x2F;span&gt;&lt;span&gt;       -&amp;gt; class2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;while the test model was:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;model
&lt;&#x2F;span&gt;&lt;span&gt;   -&amp;gt; class1
&lt;&#x2F;span&gt;&lt;span&gt;   -&amp;gt; sub1
&lt;&#x2F;span&gt;&lt;span&gt;      -&amp;gt; class1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Adding a dummy class to my main package and re-generating all files (including new &lt;code&gt;plugin.xml&lt;&#x2F;code&gt; files) solved the issue with Acceleo. Although I am still not sure where the problem actually lies. It is not in the Eclipse Bugzilla: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bugs.eclipse.org&#x2F;bugs&#x2F;show%5C_bug.cgi?id=401075&quot;&gt;https:&#x2F;&#x2F;bugs.eclipse.org&#x2F;bugs&#x2F;show\_bug.cgi?id=401075&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Build your own SIP trunk with Asterisk and mISDN</title>
        <published>2013-01-22T16:37:34+01:00</published>
        <updated>2013-01-22T16:37:34+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2013/01/22/build-your-own-sip-trunk-with-asterisk-and-misdn/" type="text/html"/>
        <id>dentrassi.de/blog/2013/01/22/build-your-own-sip-trunk-with-asterisk-and-misdn/</id>
        <content type="html">&lt;p&gt;The mission: “save some bucks by using a free PBX using a cheap isdn card”. Don’t try! Buy something working in the first place. But if you have to, here is one example how it can be done. There are, for sure, many others!&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The idea was to replace &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;trixbox&quot; href=&quot;http:&#x2F;&#x2F;trixbox.org&#x2F;&quot;&gt;trixbox&lt;&#x2F;a&gt; using an AVM Fritz!PCI card with something more up to date and not that buggy. FreePBX Distro kicked itself out because of the issues with mISDN. Elastix brought in mISDN support but still failed in configuring it. Since the setup was for only 3 users for now and the idea was to later buy something more professional (I really hope it comes to this point), I used &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;Starface free&quot; href=&quot;http:&#x2F;&#x2F;www.starface.de&#x2F;en&#x2F;Produkte&#x2F;softswitch&#x2F;starface-free.php&quot;&gt;Starface free&lt;&#x2F;a&gt;. It has 4 users and 10 extensions for free. Yet the free version only allows using SIP providers. Also it was not possible to buy a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.patton.com&#x2F;products&#x2F;product_detail.asp?id=452&quot;&gt;Patton SmartNode 4120&lt;&#x2F;a&gt; at the moment, which I still hope to get somewhere in the future. So I needed to build our own SIP trunk since the provider used (M-NET) does not provide SIP trunks as a product.&lt;&#x2F;p&gt;
&lt;p&gt;Everything is done as user &lt;code&gt;root&lt;&#x2F;code&gt; unless noted otherwise.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;misdn-gateway-setup&quot;&gt;mISDN + gateway setup&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install a fresh centos 5 (5.9). You can use the netinstall version since you need practically nothing.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Be sure to update: yum update&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;add the elastix repository: elastix, epel&lt;&#x2F;p&gt;
&lt;p&gt;create file &lt;code&gt;&#x2F;etc&#x2F;yum.repos.d&#x2F;epel.repo&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;[epel]
&lt;&#x2F;span&gt;&lt;span&gt;name=Extra Packages for Enterprise Linux 5 - $basearch
&lt;&#x2F;span&gt;&lt;span&gt;#baseurl=http:&#x2F;&#x2F;download.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;5&#x2F;$basearch
&lt;&#x2F;span&gt;&lt;span&gt;mirrorlist=http:&#x2F;&#x2F;mirrors.fedoraproject.org&#x2F;mirrorlist?repo=epel-5&amp;amp;arch=$basearch
&lt;&#x2F;span&gt;&lt;span&gt;failovermethod=priority
&lt;&#x2F;span&gt;&lt;span&gt;enabled=1
&lt;&#x2F;span&gt;&lt;span&gt;gpgcheck=1
&lt;&#x2F;span&gt;&lt;span&gt;gpgkey=file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-EPEL
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[epel-debuginfo]
&lt;&#x2F;span&gt;&lt;span&gt;name=Extra Packages for Enterprise Linux 5 - $basearch - Debug
&lt;&#x2F;span&gt;&lt;span&gt;#baseurl=http:&#x2F;&#x2F;download.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;5&#x2F;$basearch&#x2F;debug
&lt;&#x2F;span&gt;&lt;span&gt;mirrorlist=http:&#x2F;&#x2F;mirrors.fedoraproject.org&#x2F;mirrorlist?repo=epel-debug-5&amp;amp;arch=$basearch
&lt;&#x2F;span&gt;&lt;span&gt;failovermethod=priority
&lt;&#x2F;span&gt;&lt;span&gt;enabled=0
&lt;&#x2F;span&gt;&lt;span&gt;gpgkey=file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-EPEL
&lt;&#x2F;span&gt;&lt;span&gt;gpgcheck=1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[epel-source]
&lt;&#x2F;span&gt;&lt;span&gt;name=Extra Packages for Enterprise Linux 5 - $basearch - Source
&lt;&#x2F;span&gt;&lt;span&gt;#baseurl=http:&#x2F;&#x2F;download.fedoraproject.org&#x2F;pub&#x2F;epel&#x2F;5&#x2F;SRPMS
&lt;&#x2F;span&gt;&lt;span&gt;mirrorlist=http:&#x2F;&#x2F;mirrors.fedoraproject.org&#x2F;mirrorlist?repo=epel-source-5&amp;amp;arch=$basearch
&lt;&#x2F;span&gt;&lt;span&gt;failovermethod=priority
&lt;&#x2F;span&gt;&lt;span&gt;enabled=0
&lt;&#x2F;span&gt;&lt;span&gt;gpgkey=file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-EPEL
&lt;&#x2F;span&gt;&lt;span&gt;gpgcheck=1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;create file &lt;code&gt;&#x2F;etc&#x2F;yum.repos.d&#x2F;elastix.repo&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;[elastix-base]
&lt;&#x2F;span&gt;&lt;span&gt;name=Base RPM Repository for Elastix
&lt;&#x2F;span&gt;&lt;span&gt;mirrorlist=http:&#x2F;&#x2F;mirror.elastix.org&#x2F;?release=2&amp;amp;arch=$basearch&amp;amp;repo=base
&lt;&#x2F;span&gt;&lt;span&gt;#baseurl=http:&#x2F;&#x2F;repo.elastix.org&#x2F;elastix&#x2F;2&#x2F;base&#x2F;$basearch&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;gpgcheck=1
&lt;&#x2F;span&gt;&lt;span&gt;enabled=1
&lt;&#x2F;span&gt;&lt;span&gt;gpgkey=http:&#x2F;&#x2F;repo.elastix.org&#x2F;elastix&#x2F;RPM-GPG-KEY-Elastix
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[elastix-updates]
&lt;&#x2F;span&gt;&lt;span&gt;name=Updates RPM Repository for Elastix
&lt;&#x2F;span&gt;&lt;span&gt;mirrorlist=http:&#x2F;&#x2F;mirror.elastix.org&#x2F;?release=2&amp;amp;arch=$basearch&amp;amp;repo=updates
&lt;&#x2F;span&gt;&lt;span&gt;#baseurl=http:&#x2F;&#x2F;repo.elastix.org&#x2F;elastix&#x2F;2&#x2F;updates&#x2F;$basearch&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;gpgcheck=1
&lt;&#x2F;span&gt;&lt;span&gt;enabled=1
&lt;&#x2F;span&gt;&lt;span&gt;gpgkey=http:&#x2F;&#x2F;repo.elastix.org&#x2F;elastix&#x2F;RPM-GPG-KEY-Elastix
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[elastix-beta]
&lt;&#x2F;span&gt;&lt;span&gt;name=Beta RPM Repository for Elastix
&lt;&#x2F;span&gt;&lt;span&gt;mirrorlist=http:&#x2F;&#x2F;mirror.elastix.org&#x2F;?release=2&amp;amp;arch=$basearch&amp;amp;repo=beta
&lt;&#x2F;span&gt;&lt;span&gt;#baseurl=http:&#x2F;&#x2F;repo.elastix.org&#x2F;elastix&#x2F;2&#x2F;beta&#x2F;$basearch&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;gpgcheck=1
&lt;&#x2F;span&gt;&lt;span&gt;enabled=0
&lt;&#x2F;span&gt;&lt;span&gt;gpgkey=http:&#x2F;&#x2F;repo.elastix.org&#x2F;elastix&#x2F;RPM-GPG-KEY-Elastix
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[elastix-extras]
&lt;&#x2F;span&gt;&lt;span&gt;name=Extras RPM Repository for Elastix
&lt;&#x2F;span&gt;&lt;span&gt;mirrorlist=http:&#x2F;&#x2F;mirror.elastix.org&#x2F;?release=2&amp;amp;arch=$basearch&amp;amp;repo=extras
&lt;&#x2F;span&gt;&lt;span&gt;#baseurl=http:&#x2F;&#x2F;repo.elastix.org&#x2F;elastix&#x2F;2&#x2F;extras&#x2F;$basearch&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;gpgcheck=1
&lt;&#x2F;span&gt;&lt;span&gt;enabled=1
&lt;&#x2F;span&gt;&lt;span&gt;gpgkey=http:&#x2F;&#x2F;repo.elastix.org&#x2F;elastix&#x2F;RPM-GPG-KEY-Elastix
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;import the required keys:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;rpm --import http:&#x2F;&#x2F;repo.elastix.org&#x2F;elastix&#x2F;RPM-GPG-KEY-Elastix
&lt;&#x2F;span&gt;&lt;span&gt;rpm --import http:&#x2F;&#x2F;fedoraproject.org&#x2F;static&#x2F;217521F6.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now comes the tricky part. The mISDN modules from elastix require an older kernel than the current from centos. This might change in the future but for me, right now, this is the case.&lt;&#x2F;p&gt;
&lt;p&gt;Find oud the most recent mISDN version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;yum deplist mISDN | grep &amp;quot;package:&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will give you a list of mISDN versions currently known to yum. Write don’t the most recent one.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;package: mISDN-modules.i686 1.1.9.1-2
&lt;&#x2F;span&gt;&lt;span&gt;package: mISDN-modules.i686 1.1.9.1-1.2.6.18_164.6.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;package: mISDN-modules.i686 1.1.9.1-1.2.6.18_194.el5
&lt;&#x2F;span&gt;&lt;span&gt;package: mISDN-modules.i686 1.1.9.1-1.2.6.18_164.el5
&lt;&#x2F;span&gt;&lt;span&gt;package: mISDN-modules.i686 1.1.9.1-1.2.6.18_164.11.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;package: mISDN-modules.i686 1.1.9.1-1.2.6.18_238.12.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;package: mISDN-modules.i686 1.1.9.1-1.2.6.18_194.3.1.el5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case &lt;code&gt;mISDN-modules.i686 1.1.9.1-2&lt;&#x2F;code&gt;.&lt;br &#x2F;&gt;
So check for the kernel of this version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;yum deplist mISDN-modules-1.1.9.1-2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the different syntax on the version! You need to specify &lt;code&gt;mISDN-$VERSION&lt;&#x2F;code&gt; and without the &lt;code&gt;i686&lt;&#x2F;code&gt; identifier!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;package: mISDN-modules.i686 1.1.9.1-2
&lt;&#x2F;span&gt;&lt;span&gt;  dependency: kernel = 2.6.18-238.12.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel-PAE.i686 2.6.18-348.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel-debug.i686 2.6.18-348.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel-xen.i686 2.6.18-348.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel.i686 2.6.18-348.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel-xen.i686 2.6.18-194.3.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel.i686 2.6.18-164.11.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel.i686 2.6.18-194.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel-xen.i686 2.6.18-164.6.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel.i686 2.6.18-238.12.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel.i686 2.6.18-194.3.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel-xen.i686 2.6.18-194.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel-xen.i686 2.6.18-238.12.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel-xen.i686 2.6.18-164.11.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;   provider: kernel.i686 2.6.18-164.6.1.el5
&lt;&#x2F;span&gt;&lt;span&gt;  dependency: mISDN &amp;gt;= 1.1.9.1
&lt;&#x2F;span&gt;&lt;span&gt;   provider: mISDN.i686 1.1.9.1-0
&lt;&#x2F;span&gt;&lt;span&gt;   provider: mISDN.i686 1.1.9.1-2
&lt;&#x2F;span&gt;&lt;span&gt;  dependency: module-init-tools
&lt;&#x2F;span&gt;&lt;span&gt;   provider: module-init-tools.i386 3.3-0.pre3.1.60.el5_5.1
&lt;&#x2F;span&gt;&lt;span&gt;  dependency: &#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span&gt;   provider: bash.i386 3.2-32.el5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The required kernel is &lt;code&gt;2.6.18-238.12.1.el5&lt;&#x2F;code&gt;. So we need to install it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;yum&lt;&#x2F;span&gt;&lt;span&gt; install kernel-2.6.18-238.12.1.el5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Depending on your setup you need to use “yum downgrade kernel 2.6.18-238.12.1.el5” instead.&lt;&#x2F;p&gt;
&lt;p&gt;Check if the kernel is installed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;yum&lt;&#x2F;span&gt;&lt;span&gt; list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;*kernel*&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In my case:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;Installed Packages
&lt;&#x2F;span&gt;&lt;span&gt;kernel.i686                    2.6.18-238.12.1.el5                     installed      
&lt;&#x2F;span&gt;&lt;span&gt;kernel-PAE.i686                2.6.18-348.el5                          installed      
&lt;&#x2F;span&gt;&lt;span&gt;Available Packages
&lt;&#x2F;span&gt;&lt;span&gt;kernel.i686                    2.6.18-348.el5                          base           
&lt;&#x2F;span&gt;&lt;span&gt;kernel-PAE-devel.i686          2.6.18-348.el5                          base           
&lt;&#x2F;span&gt;&lt;span&gt;kernel-debug.i686              2.6.18-348.el5                          base           
&lt;&#x2F;span&gt;&lt;span&gt;…
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So I got one that I don’t want (kernel-PAE.i686 2.6.18-348.el5) and one possible upgrade which must not be installed!&lt;&#x2F;p&gt;
&lt;p&gt;Removing the kernel is easy. But be careful not to uninstall the wrong one!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;rpm -e kernel-PAE-2.6.18-348.el5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Checking the file &lt;code&gt;&#x2F;boot&#x2F;grub&#x2F;menu.lst&lt;&#x2F;code&gt; shows only one kernel now, the correct one!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can install mISDN and asterisk.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;yum&lt;&#x2F;span&gt;&lt;span&gt; install libxslt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;yum&lt;&#x2F;span&gt;&lt;span&gt; install asterisk-mISDN mISDN
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One possible way out of this update mess is to disable the original centos repositories and rely only on the elastix sources.&lt;&#x2F;p&gt;
&lt;p&gt;Now reboot&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;reboot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;misdn-setup&quot;&gt;mISDN setup&lt;&#x2F;h2&gt;
&lt;p&gt;Scan for your mISDN card:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;&#x2F;etc&#x2F;init.d&#x2F;mISDN&lt;&#x2F;span&gt;&lt;span&gt; scan
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should get something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; mISDN compatible device(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;found:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; avmfritz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now store that configuration:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;etc&#x2F;init.d&#x2F;mISDN config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not check the config file &lt;q&gt;&#x2F;etc&#x2F;mISDN.conf&lt;&#x2F;q&gt; if this is really your configuration. Depends on what setup you have. Maybe you need to change it.&lt;&#x2F;p&gt;
&lt;p&gt;This should give you something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;-- Loading mISDN modules --
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;sbin&#x2F;modprobe --ignore-install capi
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;sbin&#x2F;modprobe --ignore-install mISDN_core debug=0
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;sbin&#x2F;modprobe --ignore-install mISDN_l1 debug=0
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;sbin&#x2F;modprobe --ignore-install mISDN_l2 debug=0
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;sbin&#x2F;modprobe --ignore-install l3udss1 debug=0
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;sbin&#x2F;modprobe --ignore-install mISDN_capi
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;sbin&#x2F;modprobe --ignore-install avmfritz protocol=0x2 layermask=0xf
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &#x2F;sbin&#x2F;modprobe --ignore-install mISDN_dsp debug=0 options=0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And activate on boot:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;chkconfig&lt;&#x2F;span&gt;&lt;span&gt; mISDN on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;chkconfig --list&lt;&#x2F;span&gt;&lt;span&gt; mISDN
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you should be able to see the card in action:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;misdnportinfo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For me:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;Port  1: TE-mode BRI S&#x2F;T interface line (for phone lines)
&lt;&#x2F;span&gt;&lt;span&gt; -&amp;gt; Interface is Poin-To-Point.
&lt;&#x2F;span&gt;&lt;span&gt; -&amp;gt; Protocol: DSS1 (Euro ISDN)
&lt;&#x2F;span&gt;&lt;span&gt; -&amp;gt; childcnt: 2
&lt;&#x2F;span&gt;&lt;span&gt;--------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mISDN_close: fid(3) isize(131072) inbuf(0x8cec060) irp(0x8cec060) iend(0x8cec060)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we need to re-create the configuration in a different format *sigh*&lt;&#x2F;p&gt;
&lt;p&gt;[code]&#x2F;usr&#x2F;sbin&#x2F;misdn-init config[&#x2F;code]&lt;&#x2F;p&gt;
&lt;p&gt;And edit the file &lt;q&gt;&#x2F;etc&#x2F;misdn-init.conf&lt;&#x2F;q&gt; to match the content of &lt;q&gt;&#x2F;etc&#x2F;mISDN.conf&lt;&#x2F;q&gt;. For example in my case I had to change from PTMP mode to PTP in both files. Asterisk will read the latter file and use it for its configuration.&lt;&#x2F;p&gt;
&lt;p&gt;Finally edit asterisks own misdn configuration file: &#x2F;etc&#x2F;asterisk&#x2F;misdn.conf&lt;&#x2F;p&gt;
&lt;p&gt;Check the section “[intern]” near the end of the file and remove&#x2F;rename the section to something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[fpstn]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;; define your ports, e.g. 1,2 (depends on mISDN-driver loading order)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;; context where to go to when incoming Call on one of the above ports
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;pstn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;msns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again this depends heavly on your setup. Important is that the section is named [fpstn] and “context=from-pstn” since we need that later.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;asterisk-setup&quot;&gt;asterisk setup&lt;&#x2F;h2&gt;
&lt;p&gt;After some hours of googling and trial&amp;amp;error I finally came up with some useful resources on the net:&lt;&#x2F;p&gt;
&lt;p&gt;At https:&#x2F;&#x2F;confluence.terena.org&#x2F;pages&#x2F;viewpage.action?pageId=131104 there is quite a good explanation of how to set up an asterisk VOIP gateway (SIP trunk). Still with some issues but it was a pretty good base. Also it did not use mISDN.&lt;&#x2F;p&gt;
&lt;p&gt;Asterisk had to be configured to provide a SIP user (the trunk). So replace the file “&#x2F;etc&#x2F;asterisk&#x2F;sip.conf” with the following content:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[general]
&lt;&#x2F;span&gt;&lt;span&gt;context=guest                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;; Default context for incoming calls (non authenticated)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;disallow=all                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;; First disallow all codecs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;;allow=g729
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;gsm
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;alaw
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;ulaw
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;language=en                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;; Default language setting for all users&#x2F;peers
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;localnet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;192.168.0.0&#x2F;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; All RFC &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1918&lt;&#x2F;span&gt;&lt;span&gt; addresses are local networks
&lt;&#x2F;span&gt;&lt;span&gt;localnet=10.0.0.0&#x2F;255.0.0.0     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;; Also RFC1918
&lt;&#x2F;span&gt;&lt;span&gt;localnet=172.20.0.0&#x2F;255.255.0.0          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;; Another RFC1918 with CIDR notation
&lt;&#x2F;span&gt;&lt;span&gt;localnet=169.254.0.0&#x2F;255.255.0.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;;Zero conf local network
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jbenable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jbforce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;jbimpl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; fixed
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[600]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;600
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;somesecret600
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;friend
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;dynamic
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;sip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;insecure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;invite
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a quite short configuration, but we only need one account for starface to hook up to the asterisk server. You should change the secret of course. The “insecure=port,invite” was necessary since asterisk otherwise rejected the starface pbx when making calls, although the initial registration using the username and password was successful. In pre-1.8 versions of asterisk this was “insecure=very”, but this is not working anymore.&lt;&#x2F;p&gt;
&lt;p&gt;So now we have two parts in the asterisk box, an mISDN trunk and a SIP account which will act as a trunk. Now we need to pass calls between them. Therefore we configure some dialplans in the “&#x2F;etc&#x2F;asterisk&#x2F;extensions.conf”:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ini&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-ini &quot;&gt;&lt;code class=&quot;language-ini&quot; data-lang=&quot;ini&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[general]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;writeprotect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;yes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[from-pstn]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;exten &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;_1234&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;.,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;Dial&lt;&#x2F;span&gt;&lt;span&gt;(SIP&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;600&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&#x2F;${EXTEN}&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[sip]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;exten &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;.,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;Dial&lt;&#x2F;span&gt;&lt;span&gt;(misdn&#x2F;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;fpstn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&#x2F;${EXTEN}&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So everthing that comes in using ISDN (from-pstn) will be directed to the SIP account 600 passing on the original number so that starface can use it. The rule “_1234.” must be adapted to match your telephone number.&lt;&#x2F;p&gt;
&lt;p&gt;Also everything that comes from the SIP account (starface) and starts with a zero will be sent to ISDN.&lt;&#x2F;p&gt;
&lt;p&gt;Tweaking the rules will be a task, then everybody needs something different here I guess.&lt;&#x2F;p&gt;
&lt;p&gt;Finally re-start asterisk:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;&#x2F;etc&#x2F;init.d&#x2F;asterisk&lt;&#x2F;span&gt;&lt;span&gt; restart
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;starface&quot;&gt;starface&lt;&#x2F;h2&gt;
&lt;p&gt;Setting up Starface was the real easy part. Get the ISO image, install into the KVM server (Ubuntu 12.04 using KVM as virtualization). Starface officially supports only vmware, but is still based on Linux. I had to use “pcnet” as network interface and “sata” for the disk since the “virtio” module won’t work with Starface. Room for improvement ;-)&lt;&#x2F;p&gt;
&lt;p&gt;Installing Starface was simply booting from the ISO image and installing to the disk. The SIP trunk could now easly be added using the following settings:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new line&lt;&#x2F;li&gt;
&lt;li&gt;Select “new” as provider&lt;&#x2F;li&gt;
&lt;li&gt;Use the following provider settings (leave other settings to default): 
&lt;ul&gt;
&lt;li&gt;host=&amp;lt;your-sip-trunk-ip&amp;gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Enter the username and password from above (600, somesecret600)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;setting-up-starface&quot;&gt;setting up starface&lt;&#x2F;h3&gt;
&lt;p&gt;This is pretty straight forward now. Provision your phone. Setup a number. And make a call!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;some-checks&quot;&gt;Some checks&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;sip-peers&quot;&gt;SIP peers&lt;&#x2F;h3&gt;
&lt;p&gt;Check if starface registeres with your sip trunk using the asterisk command line on the gateway:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;asterisk -r
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;sip&lt;&#x2F;span&gt;&lt;span&gt; show peers
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;sip-debugging&quot;&gt;SIP Debugging&lt;&#x2F;h3&gt;
&lt;p&gt;SIP Debugging can be enabled using the asterisk command &lt;code&gt;sip set debug on&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;turn-on-the-full-log&quot;&gt;Turn on the full log&lt;&#x2F;h3&gt;
&lt;p&gt;Edit &lt;code&gt;&#x2F;etc&#x2F;asterisk&#x2F;logger.conf&lt;&#x2F;code&gt; and comment in the &lt;code&gt;full&lt;&#x2F;code&gt; line&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse Draw2D Border Magic</title>
        <published>2012-11-13T12:47:03+01:00</published>
        <updated>2012-11-13T12:47:03+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2012/11/13/eclipse-draw2d-border-magic/" type="text/html"/>
        <id>dentrassi.de/blog/2012/11/13/eclipse-draw2d-border-magic/</id>
        <content type="html">&lt;p&gt;While using Eclipse Draw2D I stumbled over some quite interesting behaviour on win32 using rectangles and scaling.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;We have a scalable layer and added a rectangle. When the layer was actually scaling (so not 1.0) strange artifacts appeared on win32 platforms. Finally it turned out that it was a negative line size with the outline flag set to true. Which renders on Linux as if outline would be set to false. Yet interesting was that setting the lineSize to 0.0 (zero) while keeping the outline flag true causes a hairline to be drawn. So a line which is 1 pixel, independent of the scale factor.&lt;&#x2F;p&gt;
&lt;table class=&quot;table&quot;&gt;
&lt;tr&gt;&lt;th&gt;Settings&lt;&#x2F;th&gt;&lt;th&gt;Screenshot&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;
&lt;!--  row 1 --&gt;
&lt;tr&gt;&lt;td&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setOutline &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;td&gt;&lt;td&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;line1s.png&quot; alt=&quot;&quot; title=&quot;line1s&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;!--  row 2 --&gt;
&lt;tr&gt;&lt;td&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setOutline &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which is the same as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setOutline &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setLineWidthFloat &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;td&gt;&lt;td&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;line2s.png&quot; alt=&quot;&quot; title=&quot;line2s&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;!--  row 3 --&gt;
&lt;tr&gt;&lt;td&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setOutline &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setLineWidthFloat &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the actual hairline variant.&lt;&#x2F;p&gt;
&lt;&#x2F;td&gt;&lt;td&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;line3s.png&quot; alt=&quot;&quot; title=&quot;line3s&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;!--  row 4 --&gt;
&lt;tr&gt;&lt;td&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setOutline &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setLineWidthFloat &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;td&gt;&lt;td&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;line4s.png&quot; alt=&quot;&quot; title=&quot;line4s&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;!--  row 5 --&gt;
&lt;tr&gt;&lt;td&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setOutline &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setLineWidthFloat &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the small artefacts at on the sides. These are invisible if run under Linux.&lt;&#x2F;p&gt;
&lt;&#x2F;td&gt;&lt;td&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;line5s.png&quot; alt=&quot;&quot; title=&quot;line5s&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;p&gt;The full code to create the canvas was:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ScalableLayeredPane&lt;&#x2F;span&gt;&lt;span&gt; pane &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ScalableLayeredPane&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Layer&lt;&#x2F;span&gt;&lt;span&gt; layer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Layer&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;layer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setLayoutManager&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;StackLayout&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pane.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;add &lt;&#x2F;span&gt;&lt;span&gt;( layer );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Figure&lt;&#x2F;span&gt;&lt;span&gt; figure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Figure &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setLayoutManager&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;XYLayout&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setBackgroundColor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Display&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getDefault&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getSystemColor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SWT&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;COLOR_DARK_GRAY&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setOpaque&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RectangleFigure&lt;&#x2F;span&gt;&lt;span&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RectangleFigure&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;r.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setBackgroundColor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Display&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getDefault&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getSystemColor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SWT&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;COLOR_YELLOW&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;figure.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(r, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Rectangle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;layer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;add &lt;&#x2F;span&gt;&lt;span&gt;( figure );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pane.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setScale&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;4.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;r.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setLineWidthFloat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;r.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setOutline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Setting the page size and orientation with ODFDOM for tables aka spreadsheets</title>
        <published>2012-08-27T17:36:27+02:00</published>
        <updated>2012-08-27T17:36:27+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2012/08/27/setting-the-page-size-and-orientation-with-odfdom-for-tables-aka-spreadsheets/" type="text/html"/>
        <id>dentrassi.de/blog/2012/08/27/setting-the-page-size-and-orientation-with-odfdom-for-tables-aka-spreadsheets/</id>
        <content type="html">&lt;p&gt;Most tasks that seem to be quite easy tend to turn out as a desaster. Setting the page size and orientation with ODFDOM was such a thing. While styling with ODFDOM is powerfull and a horror at the same time. You actually never know where the attribute have to be placed or which attributes to use.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;After I finished an export to “ods” (aka spreadsheet) it simply wanted to set the format to “A4 landscape”. Here is how to do that:&lt;&#x2F;p&gt;
&lt;p&gt;First create your spreadsheet and sheet ( you might already have done that):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfSpreadsheetDocument&lt;&#x2F;span&gt;&lt;span&gt; output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfSpreadsheetDocument&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newSpreadsheetDocument &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTable&lt;&#x2F;span&gt;&lt;span&gt; sheet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTable&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newTable &lt;&#x2F;span&gt;&lt;span&gt;( output );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now change the styles to “A4 landscape”:&lt;&#x2F;p&gt;
&lt;p&gt;First we need to get the “master page” named “Default”:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;StyleMasterPageElement&lt;&#x2F;span&gt;&lt;span&gt; defaultPage &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; output.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getOfficeMasterStyles &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getMasterPage &lt;&#x2F;span&gt;&lt;span&gt;( “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span&gt;” );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The master page tells us the name of the page style:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; pageLayoutName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; defaultPage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getStylePageLayoutNameAttribute &lt;&#x2F;span&gt;&lt;span&gt;();  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which gives us the page layout object:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfStylePageLayout&lt;&#x2F;span&gt;&lt;span&gt; pageLayout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; defaultPage.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getAutomaticStyles &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getPageLayout &lt;&#x2F;span&gt;&lt;span&gt;( pageLayoutName );  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we can set “A4 landscape”:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;pageLayout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setProperty &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfPageLayoutProperties&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PrintOrientation&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;landscape&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;);  
&lt;&#x2F;span&gt;&lt;span&gt;pageLayout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setProperty &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfPageLayoutProperties&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PageHeight&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;210.01mm&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;);  
&lt;&#x2F;span&gt;&lt;span&gt;pageLayout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setProperty &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfPageLayoutProperties&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;PageWidth&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;297mm&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;);  
&lt;&#x2F;span&gt;&lt;span&gt;pageLayout.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setProperty &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfPageLayoutProperties&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NumFormat&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;);  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All four properties seem to be required. Also, the width and height have to be rotated according to “landscape”.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Extending OpenWRT</title>
        <published>2012-07-26T15:35:32+02:00</published>
        <updated>2012-07-26T15:35:32+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2012/07/26/extending-openwrt/" type="text/html"/>
        <id>dentrassi.de/blog/2012/07/26/extending-openwrt/</id>
        <content type="html">&lt;p&gt;We recently switched from IPfire to OpenWRT in our office. Not only because we let OpenWRT run on an ALIX board (which also IPfire could do), but mostly due to the fact that if you want to extend the system you really can do it. Development of IPfire seems to be quite difficutly, not only technically.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;On the other hand OpenWRT quickly provides help if you want to contribute. Also too the “noob” questions you will post in the beginning ;-)&lt;&#x2F;p&gt;
&lt;p&gt;My initial idea was to create a small plugin for OpenWRT which allows one to configure “pptpd” and VPN users using the web interface LUCI. While OpenWRTs configuration system (called UCI) handles the configuraton model in the background, LuCI brings this models to a Lua driven web user interface. UCI and LuCI play well together, you only need to know how it works together.&lt;&#x2F;p&gt;
&lt;p&gt;At first you will need to set up your build environment (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;wiki.openwrt.org&#x2F;doc&#x2F;howto&#x2F;buildroot.exigence&quot;&gt;http:&#x2F;&#x2F;wiki.openwrt.org&#x2F;doc&#x2F;howto&#x2F;buildroot.exigence&lt;&#x2F;a&gt;) and compile at least the basics (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;wiki.openwrt.org&#x2F;doc&#x2F;howto&#x2F;build&quot;&gt;http:&#x2F;&#x2F;wiki.openwrt.org&#x2F;doc&#x2F;howto&#x2F;build&lt;&#x2F;a&gt;). This was ok for me since I planned on creating script and lua based stuff only. So there was no big issue with “cross-compile” issues.&lt;&#x2F;p&gt;
&lt;p&gt;Creating new module, you should set up a new “feed” (see &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;wiki.openwrt.org&#x2F;doc&#x2F;devel&#x2F;feeds&quot;&gt;http:&#x2F;&#x2F;wiki.openwrt.org&#x2F;doc&#x2F;devel&#x2F;feeds&lt;&#x2F;a&gt;). I created a new &lt;code&gt;feeds.conf&lt;&#x2F;code&gt; file and added my local git repository. Updating using &lt;code&gt;.&#x2F;scripts&#x2F;feeds update myfeed&lt;&#x2F;code&gt; to pull the updated feed and installing the module from your feed to your build environment using &lt;code&gt;.&#x2F;scripts&#x2F;feeds install custompackage&lt;&#x2F;code&gt;. After that &lt;code&gt;make menuconfig&lt;&#x2F;code&gt; and add the newly added module to your build setup. Build your module only using &lt;code&gt;make package&#x2F;custompackage&#x2F;compile V=99&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I started with a new configuration file for UCI in “&#x2F;etc&#x2F;config&#x2F;users”. The question was after updating in the LuCI interface (or the command line) how does the change get applied? Editing the configuration using UCI and commiting does nothing at first. You will need a service (&#x2F;etc&#x2F;init.d script) which will convert the UCI data you are intereseted in and create a configuration or (or whatever your service needs) and start your service then. Using LuCI there is another configuration (&#x2F;etc&#x2F;config&#x2F;ucitrack) which has a mapping between UCI configurations and services. Once LuCI changes the UCI configuration it also restarts the coresponding service. Since I only wanted to convert my users to a &#x2F;etc&#x2F;ppp&#x2F;chap-secrets file, my “service” was only a start section in an init.d script which simply converted the users and did not start any service at all.&lt;&#x2F;p&gt;
&lt;p&gt;For deployment the OpenWRT build system created “ipkg” files which can be transferred to the system easily an applied. In the install and remove script you will need to use UCI’s command line tool in order to add and remove your service from the “ucitrack” configuration.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to see the source of all this check out &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;ctron&#x2F;th4wrt&quot;&gt;https:&#x2F;&#x2F;bitbucket.org&#x2F;ctron&#x2F;th4wrt&lt;&#x2F;a&gt; which contains the background “service” and the LuCI interface.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Working with ODFDOM</title>
        <published>2012-01-26T15:46:24+01:00</published>
        <updated>2012-01-26T15:46:24+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2012/01/26/working-with-odfdom/" type="text/html"/>
        <id>dentrassi.de/blog/2012/01/26/working-with-odfdom/</id>
        <content type="html">&lt;p&gt;While working a little bit with ODFDOM to automatically generate some documentation I found some tasks rather difficult to accomplish due to the fact that they were hardly documented. There is a lot of ODF documentation, but how to use it with ODFDOM is another story.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;So first a list of documentation I found:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;odfdom.odftoolkit.org&#x2F;0.8.7&#x2F;odfdom&#x2F;apidocs&#x2F;&quot;&gt;offical javadoc of ODFDOM&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;odfdom.odftoolkit.org&#x2F;0.8.7&#x2F;odfdom&#x2F;apidocs&#x2F;doc-files&#x2F;OpenDocument-v1.2-cd05-part1.html&quot;&gt;ODF Documentation hosted by ODFDOM&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.langintro.com&#x2F;odfdom_tutorials&#x2F;&quot;&gt;ODFDOM samples&lt;&#x2F;a&gt; (slightly out of date)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;adding-a-new-paragraph-with-a-pre-defined-style&quot;&gt;Adding a new paragraph with a pre-defined style&lt;&#x2F;h2&gt;
&lt;p&gt;To create a new paragraph with a style I used the following static function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTextParagraph &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newStyledParagraph &lt;&#x2F;span&gt;&lt;span&gt;( final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTextDocument&lt;&#x2F;span&gt;&lt;span&gt; odt, final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; style, final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; content ) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTextParagraph&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( content &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; odt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newParagraph &lt;&#x2F;span&gt;&lt;span&gt;( content );
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; odt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newParagraph &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setStyleName &lt;&#x2F;span&gt;&lt;span&gt;( style );
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;adding-fields-like-title-and-subtitle&quot;&gt;Adding fields (like title and subtitle)&lt;&#x2F;h2&gt;
&lt;p&gt;The following snippet will create a new paragraph&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTextParagraph&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfHelper&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newStyledParagraph &lt;&#x2F;span&gt;&lt;span&gt;( odt, “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Title&lt;&#x2F;span&gt;&lt;span&gt;”, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newTextTitleElement &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfHelper&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newStyledParagraph &lt;&#x2F;span&gt;&lt;span&gt;( odt, “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Subtitle&lt;&#x2F;span&gt;&lt;span&gt;”, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newTextSubjectElement &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;creating-a-new-paragraph-style&quot;&gt;Creating a new paragraph style&lt;&#x2F;h2&gt;
&lt;p&gt;The next snippet creates a new a new style called “Source Text” dereived from “Text Boby”. The &lt;code&gt;setFontFamily&lt;&#x2F;code&gt; method is a helper to set all font properties at once.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setFontFamily &lt;&#x2F;span&gt;&lt;span&gt;( final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfStyleBase&lt;&#x2F;span&gt;&lt;span&gt; style, final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; value ) {
&lt;&#x2F;span&gt;&lt;span&gt;  style.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setProperty &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTextProperties&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;FontFamily&lt;&#x2F;span&gt;&lt;span&gt;, value );
&lt;&#x2F;span&gt;&lt;span&gt;  style.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setProperty &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTextProperties&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;FontFamilyAsian&lt;&#x2F;span&gt;&lt;span&gt;, value );
&lt;&#x2F;span&gt;&lt;span&gt;  style.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setProperty &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTextProperties&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;FontFamilyComplex&lt;&#x2F;span&gt;&lt;span&gt;, value );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;createStyles &lt;&#x2F;span&gt;&lt;span&gt;( final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTextDocument&lt;&#x2F;span&gt;&lt;span&gt; odt ) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfOfficeStyles&lt;&#x2F;span&gt;&lt;span&gt; styles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; odt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getOrCreateDocumentStyles &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfStyle&lt;&#x2F;span&gt;&lt;span&gt; style &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; styles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;newStyle &lt;&#x2F;span&gt;&lt;span&gt;( “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Source Text&lt;&#x2F;span&gt;&lt;span&gt;”, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfStyleFamily&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Paragraph &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  style.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setStyleParentStyleNameAttribute &lt;&#x2F;span&gt;&lt;span&gt;( “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Text Body&lt;&#x2F;span&gt;&lt;span&gt;” );
&lt;&#x2F;span&gt;&lt;span&gt;  style.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setProperty &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfParagraphProperties&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Margin&lt;&#x2F;span&gt;&lt;span&gt;, “1cm” );
&lt;&#x2F;span&gt;&lt;span&gt;  style.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setProperty &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfParagraphProperties&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;BackgroundColor&lt;&#x2F;span&gt;&lt;span&gt;, “#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DDDDDD&lt;&#x2F;span&gt;&lt;span&gt;” );
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setFontFamily &lt;&#x2F;span&gt;&lt;span&gt;( style, “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Courier New&lt;&#x2F;span&gt;&lt;span&gt;” );
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;copy-content-from-one-to-another-odf-file&quot;&gt;Copy content from one to another ODF File&lt;&#x2F;h2&gt;
&lt;p&gt;While most of the document I made was created some static part a the beginning was needed. Instead of creating it manually I created a new ODT File in LibreOffice and imported the content to the generated document.&lt;&#x2F;p&gt;
&lt;p&gt;The following snipped does that:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;createStaticContent &lt;&#x2F;span&gt;&lt;span&gt;( final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTextDocument&lt;&#x2F;span&gt;&lt;span&gt; odt, final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt; file ) throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; check if file is readable and is a file
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;canRead &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;|| !&lt;&#x2F;span&gt;&lt;span&gt;file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;isFile &lt;&#x2F;span&gt;&lt;span&gt;() ) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Load the document to import
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTextDocument&lt;&#x2F;span&gt;&lt;span&gt; staticOdt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OdfTextDocument&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;loadDocument &lt;&#x2F;span&gt;&lt;span&gt;( file );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; Create a new text section which will receive the content. This is optional.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; You could also load the content directly on the root of the document
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TextSectionElement&lt;&#x2F;span&gt;&lt;span&gt; section &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;TextSectionElement &lt;&#x2F;span&gt;&lt;span&gt;( odt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getContentDom &lt;&#x2F;span&gt;&lt;span&gt;() );
&lt;&#x2F;span&gt;&lt;span&gt;  odt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getContentRoot &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;appendChild &lt;&#x2F;span&gt;&lt;span&gt;( section );
&lt;&#x2F;span&gt;&lt;span&gt;  section.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setTextProtectedAttribute &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;  section.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setTextNameAttribute &lt;&#x2F;span&gt;&lt;span&gt;( “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Static Content&lt;&#x2F;span&gt;&lt;span&gt;” ); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F;$NON-NLS-1$
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; iterate over all nodes
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;NodeList&lt;&#x2F;span&gt;&lt;span&gt; childNodes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; staticOdt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getContentRoot &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getChildNodes &lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; childNodes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getLength &lt;&#x2F;span&gt;&lt;span&gt;(); i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;++ &lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; clone node from source
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt; newNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; childNodes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span&gt;( i ).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;cloneNode &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; import to target DOM
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt; adoptedNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; odt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getContentDom &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;adoptNode &lt;&#x2F;span&gt;&lt;span&gt;( newNode );
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; append to section
&lt;&#x2F;span&gt;&lt;span&gt;    section.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;appendChild &lt;&#x2F;span&gt;&lt;span&gt;( adoptedNode );
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since only content is imported the styles of the target document will be used for the content that was imported.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Bye bye Lotus Notes</title>
        <published>2011-12-12T10:19:53+01:00</published>
        <updated>2011-12-12T10:19:53+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/12/12/bye-bye-lotus-notes/" type="text/html"/>
        <id>dentrassi.de/blog/2011/12/12/bye-bye-lotus-notes/</id>
        <content type="html">&lt;p&gt;We used it for some time. It was nice. But now our ways seem to …&lt;&#x2F;p&gt;
&lt;p&gt;well, let me just say: PNG, 64bit Linux, Windows 7, …&lt;&#x2F;p&gt;
&lt;p&gt;I was migrating E-Mails from Notes to Courier IMAP using “&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;freecode.com&#x2F;projects&#x2F;imapsync&quot;&gt;imapsync&lt;&#x2F;a&gt;” when I stumbled over two strange problems…&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;missing-sent-folder&quot;&gt;Missing “sent” folder&lt;&#x2F;h1&gt;
&lt;p&gt;I was not able to synchronize the “Sent” folder. Since the “Sent” folder does not seem to exists in the IMAP namespace and also Notes seems to have two sent folders (one for Notes one for IMAP). In the recent 8.5.2 release a new “IMAP Folder Sync” option was added (see &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.dominopower.com&#x2F;issues&#x2F;issue201103&#x2F;00002621001.html&quot;&gt;http:&#x2F;&#x2F;www.dominopower.com&#x2F;issues&#x2F;issue201103&#x2F;00002621001.html&lt;&#x2F;a&gt;) that should fix this issue. Since we had 8.5.2 installed I tried and failed. This feature instantly caused a deadlock in the Domino server when the mail file was accessed with a write operation. In addition the “Sent” folder was absent. Event running “convert” in the mail file locked the server up and resolved nothing. The only “solution” was to create a “SentXX” folder (or any other name) and copy the messages in Notes to that folder, synchronizing the folder and move the messages back to the “Sent” folder in Courier IMAP.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;imap-idle-lookup-protocol-error&quot;&gt;IMAP Idle&#x2F;Lookup&#x2F;Protocol error&lt;&#x2F;h1&gt;
&lt;p&gt;Converting e-mails takes some time and for some users the process just stopped with a timeout message like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;Could not fetch message #123 from MyFolder timeout waiting 600s for data from server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Re-running the task continued with the messages that were not converted up to now (thanks to imapsync) but immediately stopped at the first message with the same timeout. Looking on the domino server side I noticed that the “imap” process was idling at 0% CPU load, which is strange since it normally takes up to 200% when converting messages.&lt;&#x2F;p&gt;
&lt;p&gt;Running &lt;code&gt;imapsync&lt;&#x2F;code&gt; the flags –debug and –debugimap showed a strange response in the protocol stream at the end of attachments:&lt;&#x2F;p&gt;
&lt;p&gt;While the normal response seem to be something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;10 OK FETCH completed
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;in these cases the response was:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;10 O   K FETCH completed&lt;&#x2F;code&gt; (or something similar).&lt;&#x2F;p&gt;
&lt;p&gt;Which was not interpreted by &lt;code&gt;imapsync&lt;&#x2F;code&gt; as response and kept it waiting until it timed out.&lt;&#x2F;p&gt;
&lt;p&gt;Scrolling up in the log file a little bit showed the message that caused the problem and fiddling around with the message a little bit provided a workaround that helped.&lt;&#x2F;p&gt;
&lt;p&gt;Locate the message in the mail file. Open it. Edit the message (e.g. by double clicking the content). Make no changes! (You could but you should not since you don’t want to edit received mail). And “Save and close” the message. Et voilá, it worked. Re-running “imapsync” did convert this message and successfully all following until it runs in the next timeout.&lt;&#x2F;p&gt;
&lt;p&gt;I hope this helps anybody running into the same issues.&lt;&#x2F;p&gt;
&lt;p&gt;Bye bye Notes!&lt;&#x2F;p&gt;
&lt;p&gt;PS: I used the following parameters with imapsync:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;imapsync --host1&lt;&#x2F;span&gt;&lt;span&gt; domino.mydomain.com \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  --user1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Ford Prefect&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --passfile1&lt;&#x2F;span&gt;&lt;span&gt; passfile1 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  --ssl1 --authmech1&lt;&#x2F;span&gt;&lt;span&gt; PLAIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --host2&lt;&#x2F;span&gt;&lt;span&gt; localhost \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  --user2&lt;&#x2F;span&gt;&lt;span&gt; ford.prefect@mydomain.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --passfile2&lt;&#x2F;span&gt;&lt;span&gt; passfile2 \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  --ssl2 --authmech2&lt;&#x2F;span&gt;&lt;span&gt; PLAIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --skipsize  &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  --nofoldersizes  --regextrans2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;s&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;.&#x2F;g&amp;quot;  &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  --useheader&lt;&#x2F;span&gt;&lt;span&gt; Subject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --useheader&lt;&#x2F;span&gt;&lt;span&gt; Date  \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  --allowsizemismatch --skipsize  &lt;&#x2F;span&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;  --regextrans2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;s&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#0997b3;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&#x2F;&#x2F;_&#x2F;g&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt; --include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;^Folder Prefix&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;--useheader Date --useheader Subject&lt;&#x2F;code&gt; : was necessary since Notes seemed to change the message IDs, which caused duplicate messages each time imapsync was run. These two arguments limited the equality of messages to Subject and Date, which was OK for me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;--nofoldersizes&lt;&#x2F;code&gt; : stopped imapsync from calculating the size of the folder before it runs. This caused a huge speedup since this seems to be a major task for notes to provide this operation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;--skipsize --allowsizemismatch&lt;&#x2F;code&gt; : also was required to prevent imapsync from canceling messages that had another amount of payload data than the header suggested. Notes sometimes reported wrong message sizes which could be the same issue as the protocol error above.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;--regextrans2 &amp;quot;s&#x2F;\\\\&#x2F;\\.&#x2F;g&amp;quot;&lt;&#x2F;code&gt; : was necessary since imapsync sometimes did not apply the IMAP namespace and prefix correctly when using regular expressions for the folder names.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;--regextrans2 &amp;quot;s&#x2F;\\&#x2F;&#x2F;_&#x2F;g&amp;quot;&lt;&#x2F;code&gt; : was necessary since Lotus Notes allows “&#x2F;” in the folder name, which Courier IMAP does not. So all “&#x2F;” where converted to “_” for the moment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;--include &amp;quot;^Folder Prefix&amp;quot;&lt;&#x2F;code&gt; : was quite useful to limit the imapsync run to a specific folder name if you need to close in on some issues or want more control on the current migration. Leaving out this parameter simply converts all folders.&lt;&#x2F;p&gt;
&lt;p&gt;PPS: Running “imapsync” seemed to be extremely slow before enabling specific IMAP features in the Notes mail files. I had to run “convert” for each file file in order to enable IMAP folder references and generate IMAP specific attributes. This could be due to the fact that we never used IMAP in Notes and therefore had IMAP features not enabled. Which prevents Notes from creating these information during normal runtime. This information is the generated “on demand” but not stored.&lt;&#x2F;p&gt;
&lt;p&gt;Enable IMAP for mailfile: &lt;code&gt;load convert -e mail&#x2F;mailfile.nsf&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
Enable IMAP folder references: &lt;code&gt;load convert -m mail&#x2F;mailfile.nsf&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
Generate IMAP attributes: &lt;code&gt;load convert -h mail&#x2F;mailfile.nsf&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>HoHoHo!</title>
        <published>2011-12-07T13:00:42+01:00</published>
        <updated>2011-12-07T13:00:42+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/hohoho/" type="text/html"/>
        <id>dentrassi.de/pages/attic/hohoho/</id>
        <content type="html">&lt;p&gt;Together with &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eeeveee.de&quot;&gt;eeevee&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;niekerke-medien.de&quot;&gt;Tino&lt;&#x2F;a&gt; and cptmauli I made my first Android game.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Please be kind ;-)&lt;&#x2F;p&gt;
&lt;p&gt;Merry Christmas!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;device-2011-12-06-172004.png&quot; alt=&quot;&quot; title=&quot;Title Screen&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;device-2011-12-06-171436.png&quot; alt=&quot;&quot; title=&quot;Game Screen&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>JPA, EJB and Spring</title>
        <published>2011-10-11T18:20:36+02:00</published>
        <updated>2011-10-11T18:20:36+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/10/11/jpa-ejb-and-spring/" type="text/html"/>
        <id>dentrassi.de/blog/2011/10/11/jpa-ejb-and-spring/</id>
        <content type="html">&lt;p&gt;Today I stumbled over a rather interesting issue in combination with JBoss, Hibernate, Spring, JPA and EJB.&lt;&#x2F;p&gt;
&lt;p&gt;First of all, we have mixed environment of EJB3 and Spring 3 using JPA2. All in JBoss 6 AS, with default Hibernate 3.6 as JPA provider. Now for a long time everything works fine until we re-organize the dependencies of our modules. Starting with that we got some strange JPA behavior like “class is not an entity” and some rather weird getter issues.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Altogether it looked like some classloader issue. But it took some time to find that one.&lt;&#x2F;p&gt;
&lt;p&gt;In the beginning there was a JPA persistence unit called “someModel”. The problem with spring was, that it needs to be imported using the &lt;code&gt;jee:jndi-lookup&lt;&#x2F;code&gt; tag, which requires a JNDI name. That one was provided by JBoss itself using the “jboss.entity.manager.factory.jndi.name” property in the “persistence.xml” file. This triggers JBoss&#x2F;Hibernate to bind the persistence unit with that specified name. Of course the name was “persistence&#x2F;someModel”.&lt;&#x2F;p&gt;
&lt;p&gt;Now everything grew, EJB was added in order to gain modularity. And now that the dependencies and the start order was changed, the same persistence unit was used multiple times in multiple EJBs beside the spring application. While EJB seems not to have any problems finding its persistence unit, spring needs a bit more information and requires the already discusses &lt;code&gt;jee:jndi-lookup&lt;&#x2F;code&gt; tag in order to find its persistence unit.&lt;&#x2F;p&gt;
&lt;p&gt;As it turned out, the multiple persistence units all registered with the same name, leaving spring with the first (or last) registration, but not necessarily the correct registration. So spring accesses “some” persistence unit with that name and possible used the wrong classloader.&lt;&#x2F;p&gt;
&lt;p&gt;The solution was quite and and lot cleaner than using the &lt;code&gt;jboss.entity.manager.factory.jndi.name&lt;&#x2F;code&gt; property. But, less intuitive I have to say.&lt;&#x2F;p&gt;
&lt;p&gt;In the “web.xml” of the servlet that starts the application context a reference has to be added to the persistence unit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;persistence-unit-ref&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;persistence-unit-ref-name&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;persistence&#x2F;someModel&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;persistence-unit-ref-name&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;persistence-unit-name&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;someModel&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;persistence-unit-name&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;persistence-unit-ref&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will register the local (in the EAR file hosting the WAR) persistence unit “someModel” in the local JNDI space as &lt;code&gt;persistence&#x2F;someModel&lt;&#x2F;code&gt; and you are done. Spring will can still import it as &lt;code&gt;persistence&#x2F;someModel&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Struggling with Acceleo 3.0 after Eclipse 3.7 upgrade</title>
        <published>2011-08-11T09:46:04+02:00</published>
        <updated>2011-08-11T09:46:04+02:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/08/11/struggling-with-acceleo-3-0-after-eclipse-3-7-upgrade/" type="text/html"/>
        <id>dentrassi.de/blog/2011/08/11/struggling-with-acceleo-3-0-after-eclipse-3-7-upgrade/</id>
        <content type="html">&lt;p&gt;While the upgrade from Eclipse 3.6.2 to 3.7 went without nearly any trouble the upgrade of the Acceleo plugins to the versions provided with Eclipse Indigo was “a little bit more” problematic.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Starting the generator after the upgrade simply brought up:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;Exception in thread &amp;quot;Main Thread&amp;quot; org.eclipse.acceleo.engine.AcceleoEvaluationException: The type of the first parameter of the main template named &amp;#39;myTemplate&amp;#39; is a proxy.
&lt;&#x2F;span&gt;&lt;span&gt;    at org.eclipse.acceleo.engine.service.AcceleoService.doGenerate(AcceleoService.java:507)
&lt;&#x2F;span&gt;&lt;span&gt;    at org.eclipse.acceleo.engine.service.AbstractAcceleoGenerator.generate(AbstractAcceleoGenerator.java:175)
&lt;&#x2F;span&gt;&lt;span&gt;    at org.eclipse.acceleo.engine.service.AbstractAcceleoGenerator.doGenerate(AbstractAcceleoGenerator.java:154)
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main template did not accept the model anymore. Although everything was registered and working with the previous version.&lt;&#x2F;p&gt;
&lt;p&gt;Googling a bit I found out that Acceleo provides a different serialization model which stores models in binary form instead of XMI. Since all my models I flipped the switch in the project settings:&lt;&#x2F;p&gt;
&lt;figure aria-describedby=&quot;caption-attachment-112&quot; class=&quot;wp-caption alignnone&quot; id=&quot;attachment_112&quot; style=&quot;width: 625px&quot;&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;acceleo.png&quot; alt=&quot;&quot; title=&quot;Acceleo Project Settings&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;figcaption&gt;Acceleo Project Settings&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Which worked at first until I stumbled over the next problem a few hours later:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;org.eclipse.acceleo.engine.AcceleoEvaluationException: Invalid loop iteration at line 18 in Module myModule for block for (myObject.null). Last recorded value of self was com.thfour.config.model.model.impl.MyObjectImpl@81b69bf (....).
&lt;&#x2F;span&gt;&lt;span&gt;    at subModule.subModule(null)(subModule.mtl:18)
&lt;&#x2F;span&gt;&lt;span&gt;    at subModule.subModule(null)(subModule.mtl:6)
&lt;&#x2F;span&gt;&lt;span&gt;    at subModule.subModule(null)(subModule.mtl:4)
&lt;&#x2F;span&gt;&lt;span&gt;    at module.module(MyObject)(module.mtl:0)
&lt;&#x2F;span&gt;&lt;span&gt;    at module.module(MyObject)(module.mtl:7)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After some debugging it seemed as if the main module could not pass a model object to a template that is located in another bundle. We have structured our model generator to have a common part and a project specific bundle. At first, it looked like as it this stopped working by an unknown reason.&lt;&#x2F;p&gt;
&lt;p&gt;After some testing, flipping switches, debugging, restructuring I found out that the solution was rather simple. The same switch (Binary, XMI) has to be set to the common generator module as well. All modules must agree to a model format (either binary or XMI).&lt;&#x2F;p&gt;
&lt;p&gt;While I can understand this for the generator that is launched, I cannot understand this for submodules that provide common generating templates and should not even care about the serialization form. But it is as it is ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>openscada.org update</title>
        <published>2011-03-10T09:45:25+01:00</published>
        <updated>2011-03-10T09:45:25+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/03/10/openscada-org-update/" type="text/html"/>
        <id>dentrassi.de/blog/2011/03/10/openscada-org-update/</id>
        <content type="html">&lt;p&gt;Finally we made it! &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;openscada.org&quot;&gt;openscada.org&lt;&#x2F;a&gt; has been updated to look good and contain new information. Finally :)&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>Fancy tooltips in Eclipse</title>
        <published>2011-02-21T12:34:39+01:00</published>
        <updated>2011-02-21T12:34:39+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/02/21/fancy-tooltips-in-eclipse/" type="text/html"/>
        <id>dentrassi.de/blog/2011/02/21/fancy-tooltips-in-eclipse/</id>
        <content type="html">&lt;p&gt;Tooltips are quick way to add information to a widget that received the users attention. While one can argue about the pros and cons of tooltips this post focuses on the style of tooltips once you decided to use them.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;A default use case is to add a description to e.g. an icon based button:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;tooltip_native_short.png&quot; alt=&quot;&quot; title=&quot;tooltip_native_short&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now and then you might find yourself in the need to add some more information than just a short text. While I think the upper example is a good example for using a tooltip the following is now really:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;tooltip_native_long.png&quot; alt=&quot;&quot; title=&quot;tooltip_native_long&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The problem is not necessarily the amount of information but the way it is presented. So why is it used? Because it is quite easy to use with SWT. The following line of code sets the tooltip text:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Button&lt;&#x2F;span&gt;&lt;span&gt; button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; …
&lt;&#x2F;span&gt;&lt;span&gt;button.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setToolTipText &lt;&#x2F;span&gt;&lt;span&gt;( “&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Read&lt;&#x2F;span&gt;&lt;span&gt; descriptor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; “ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; readDescriptor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; “\nWrite descriptor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; “ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; writeDescriptor );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This call is using the widget toolkit’s own way to activate and render the tooltip. On the pro side you have the native look and feel and the quick way to add it, on the con side it only looks good when you have short and compact tooltips. Also you might run into problems with different behaviors on different platforms.&lt;&#x2F;p&gt;
&lt;p&gt;But Eclipse would not be Eclipse if there wasn’t a second way to add tooltips to you user interface. In JFace you will find a &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;ToolTip&quot; href=&quot;http:&#x2F;&#x2F;help.eclipse.org&#x2F;helios&#x2F;topic&#x2F;org.eclipse.platform.doc.isv&#x2F;reference&#x2F;api&#x2F;org&#x2F;eclipse&#x2F;jface&#x2F;window&#x2F;ToolTip.html&quot;&gt;ToolTip&lt;&#x2F;a&gt; class which is the base for custom made tooltips. Using &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;help.eclipse.org&#x2F;helios&#x2F;topic&#x2F;org.eclipse.platform.doc.isv&#x2F;reference&#x2F;api&#x2F;org&#x2F;eclipse&#x2F;jface&#x2F;window&#x2F;DefaultToolTip.html&quot;&gt;DefaultToolTip&lt;&#x2F;a&gt; you have a working base that provides a plain implementation quite similar in the rendering as the native tooltip:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;tooltip_jface_default.png&quot; alt=&quot;&quot; title=&quot;tooltip_jface_default&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Adding this a bit more complex but also provides some more options:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DefaultToolTip&lt;&#x2F;span&gt;&lt;span&gt; toolTip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;DefaultToolTip &lt;&#x2F;span&gt;&lt;span&gt;( widget );  
&lt;&#x2F;span&gt;&lt;span&gt;toolTip.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setShift &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Point &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span&gt;) );  
&lt;&#x2F;span&gt;&lt;span&gt;toolTip.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setText &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Hello World&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;);  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Browsing through the setters of the class you will find a lot to customize. On the con side, as you can see in the screenshot, it look like the native tooltip, but not exactly.&lt;&#x2F;p&gt;
&lt;p&gt;Now if this is still not enough customizing you can also dereive directly from &lt;tt&gt;org.eclipse.jface.window.ToolTip&lt;&#x2F;tt&gt; and implement &lt;tt&gt;createToolTipContentArea&lt;&#x2F;tt&gt; yourself:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Composite &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;createToolTipContentArea &lt;&#x2F;span&gt;&lt;span&gt;( final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Event&lt;&#x2F;span&gt;&lt;span&gt; event, final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Composite&lt;&#x2F;span&gt;&lt;span&gt; parent )  
&lt;&#x2F;span&gt;&lt;span&gt;{  
&lt;&#x2F;span&gt;&lt;span&gt; …  
&lt;&#x2F;span&gt;&lt;span&gt;}  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In our case we created a tooltip containing a header, an icon and a styled text:&lt;br &#x2F;&gt;
&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;tooltip_jface_custom.png&quot; alt=&quot;&quot; title=&quot;tooltip_jface_custom&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The pros and cons should be obvious.&lt;&#x2F;p&gt;
&lt;p&gt;But … there is one more thing. Eclipse would not be Eclipse if there would not be another way to do it (I know I repeat myself here). SWT also provides another &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;help.eclipse.org&#x2F;helios&#x2F;topic&#x2F;org.eclipse.platform.doc.isv&#x2F;reference&#x2F;api&#x2F;org&#x2F;eclipse&#x2F;swt&#x2F;widgets&#x2F;ToolTip.html&quot;&gt;ToolTip&lt;&#x2F;a&gt; class. This class provides tooltips and “balloons”:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;tooltip_swt_balloon.png&quot; alt=&quot;&quot; title=&quot;tooltip_swt_balloon&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The problem with these tooltips is, that they seem to be made for the Tray that can pop up balloons (see &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;dev.eclipse.org&#x2F;viewcvs&#x2F;viewvc.cgi&#x2F;org.eclipse.swt.snippets&#x2F;src&#x2F;org&#x2F;eclipse&#x2F;swt&#x2F;snippets&#x2F;Snippet225.java?view=co&quot;&gt;Snippet&lt;&#x2F;a&gt;). You still can position the tooltip manually and align it to you control, but I would guess that using JFace is a much cleaner approach.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Some thoughts on software testing</title>
        <published>2011-02-17T12:17:35+01:00</published>
        <updated>2011-02-17T12:17:35+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/02/17/some-thoughts-on-software-testing/" type="text/html"/>
        <id>dentrassi.de/blog/2011/02/17/some-thoughts-on-software-testing/</id>
        <content type="html">&lt;p&gt;If you are working as a software developer in a project based development environment you will, hopefully, encounter the day the customer wants to see the result that was promised to him. The worst thing that can happen is that after months of development you finally end up in a scenario of &lt;q&gt;it is not working&lt;&#x2F;q&gt; or &lt;q&gt;it is not what we need&lt;&#x2F;q&gt;. Sure there are numerous reasons of why this happened and what types development process you could have used. But often quality management and software development definitions are written once and never lived as described. developers consider it a burden that is unnecessary and is blocking them in their daily task of creating new functionality.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;While one can argue about the pros and cons of formal quality management and rules of software development processes it ends up in the psychology of the team if and how good the testing has been performed. Some simply tricks ease the whole process and improve the result without adding lots of rules and frustration:&lt;&#x2F;p&gt;
&lt;h1 id=&quot;reduce-deployment-times&quot;&gt;Reduce deployment times&lt;&#x2F;h1&gt;
&lt;p&gt;If it takes 30 minutes from one change in the source code to the living result on the test system it will take ages to find and solve issues. Of course a coordinated build system is an important part of development. But quickly patching an issue is as well. If you need three steps to solve the issue and need half an hour to create a new version you have wasted 1½ hours instead of maybe five minutes if your development environment is quick enough. Not all issues can be resolved on the local development machine, so deployment has to be quick on the path up to the integration and testing system.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;early-set-up-of-a-test-system&quot;&gt;Early set up of a test system&lt;&#x2F;h1&gt;
&lt;p&gt;Two days to the test. Everybody is confident that testing will go well. Everything was tested… on machines of developers. Installing the system on the testing machines turns out to be a huge problem and the day your customer arrives you have a badly set up system, developers worked over night and weekend to find the remaining hard coded path of &lt;q&gt;&#x2F;home&#x2F;user&#x2F;local&#x2F;development&lt;&#x2F;q&gt; which are not working in the test system.&lt;&#x2F;p&gt;
&lt;p&gt;Adding different operating systems of developers, additionally installed software packaged and more system resources the development system is always different to the test system. In addition you normally don’t deploy your software in the development system but simply start it from the IDE.&lt;&#x2F;p&gt;
&lt;p&gt;So as soon as you have your first few functions, set up a test system and deploy you software as it would be done during the real testing. You will be surprised how many bug&#x2F;issues you will find in advance.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;test-with-the-customer&quot;&gt;Test with the customer&lt;&#x2F;h1&gt;
&lt;p&gt;If you have your test system that early you can also invite your customer to test with you. While not all customers are interested in that, some are and you should take the chance to do so. The first thing you will think is something like &lt;q&gt;this costs us more time than it is worth&lt;&#x2F;q&gt;. But in the end you have tested most functionally long before your final test and end up with a test system that is already known by your customer before the tests start. Unexpected but correct reactions of your system are already common knowledge and need no explanation. And of course you will get feedback much earlier and can integrate that into your development process ending up with a product that is much closer to your customer than introducing him to a brand new system on day 1 of the test.&lt;&#x2F;p&gt;
&lt;p&gt;Also let your developers test with the customer. Hiding developers in the basement and letting management perform the testing is not always a good choice of job assignment. There may be good reasons to let management do the final and formal testing. But during the beginning direct contact with the technical counterparts of your customer and your developers will give your own people a much better understanding of what the customer needs and you will loose much less information in the process. Many developers will also see this as benefit of seeing where their solution will later be put to use. Of course some prefer the basement ;-)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;add-obstacles-between-test-and-development-systems&quot;&gt;Add obstacles between test and development systems&lt;&#x2F;h1&gt;
&lt;p&gt;While a short path between development and test system is important it might turn out to be good idea to add some temporary obstacles to that path. Otherwise you might end up with two development systems instead of one development system and one test system.&lt;&#x2F;p&gt;
&lt;p&gt;Cutting of the network access or relocating the machines to a different part of the building are some ways to do that. This will pull people together in one room for testing and bind their focus in the subject. And it will also show that when the system is productive in the future the way to reach it might be a lot more problematic than just connecting to a local server. New ideas and ways of how to test and debug will automatically turn up and can later be used in the productive system.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;who-is-testing&quot;&gt;Who is testing&lt;&#x2F;h1&gt;
&lt;p&gt;At least one person &lt;q&gt;non developer&lt;&#x2F;q&gt; should be responsible for testing. This does not mean that no developer should test but people tend to test the same way all over again. Just using the system another way might turn up lots of interesting issues. You will encounter situations you only can get out of using a developer, which will not be possible in the productive system. So the earlier you let people test that do not know the source code and can influence system internals the earlier you will get a system that can be managed by administrators of your customer alone (if this is what you wish). In the end the customer will click in a different way and will find issues with his approach on the system.&lt;&#x2F;p&gt;
&lt;p&gt;Also, if you focus on special &amp;lt;q&amp;gt;test users&amp;lt;&#x2F;q&amp;gt; reduce the problem of having all developers think &amp;lt;q&amp;gt;the other one&amp;lt;&#x2F;q&amp;gt; tested that cool new feature which went out untested.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;test-cases&quot;&gt;Test cases&lt;&#x2F;h1&gt;
&lt;p&gt;I am a little biased about automated test cases. In the end you will have a manual test. Most systems I know cannot be completely tested using an automated test system. Developing a specialized solution in one project is totally different to a product that developed once and sold many times. Writing test cases can be quite difficult and time-consuming. if you have to re-write them for every new project it might turn out easier to just perform then &lt;q&gt;manually&lt;&#x2F;q&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand automated test cases definitely will improve quality. But, the are no guarantee for successful test with your customer. You will never reach a point where you have your system covered 100% by your automated tests. See it reaching light speed. You never can and getting closer will cost you more and more energy. Also automated test cases are just source code that might contain bugs ore may simply be wrong.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;finally&quot;&gt;Finally&lt;&#x2F;h1&gt;
&lt;p&gt;There is lots more to say about testing. Important is to test early, often, quick and separated and as realistic as you can.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Access to WMI in Java using Eclipse SWT OLE integration</title>
        <published>2011-02-04T17:58:44+01:00</published>
        <updated>2011-02-04T17:58:44+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/02/04/access-to-wmi-in-java-using-eclipse-swt-ole-integration/" type="text/html"/>
        <id>dentrassi.de/blog/2011/02/04/access-to-wmi-in-java-using-eclipse-swt-ole-integration/</id>
        <content type="html">&lt;p&gt;Today I ran into a problem which could easily solved using a short WMI query. The problem was that the query must be executed within a Java UI application. Googling for a solution I came only up with either quite some ugly workarounds (like generating a VBScript fragment, forking off the VBScript runtime and parsing the result) or some full blown COM&#x2F;DCOM interfaces (like J-Integra or J-Interop). Although I really like J-Interop (we are using it for DCOM when accessing OPC server in OpenSCADA Utgard) it has some drawbacks. For J-Interop every access (even local access) is a network based access. Since J-Interop only supports DCOM it is free of any platform specific code but required the machine to be accessible using “remoting” functionality (DCOM). Since I wanted to query the WMI from a UI application and I am sure that the WMI query will stay on the Win32 version of the application I was not keen on adding “remoting” as a requirement to the UI application.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;After some digging I remembered that SWT brings an OLE interface which provides direct COM access. So I started poking around and finally come up with a solution that works quite well.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;wmisample.png&quot; alt=&quot;&quot; title=&quot;wmisample&quot; &#x2F;&gt; For the impatient: The full source code is available from github &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;wmisample&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;wmisample&lt;&#x2F;a&gt; and the screenshot is here.&lt;&#x2F;p&gt;
&lt;p&gt;The solution requires: win32 or win64, SWT and some classes from the SWT internal namespace. The latter is a catch that does not hurt too much.&lt;&#x2F;p&gt;
&lt;p&gt;First one needs a SWbemServices object which is obtained by asking the SWbemLocator to create one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OleAutomation&lt;&#x2F;span&gt;&lt;span&gt; automation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OleAutomation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;WbemScripting.SWbemLocator&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt; service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; automation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Helper&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getId&lt;&#x2F;span&gt;&lt;span&gt;(automation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ConnectServer&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The variant will hold a &lt;code&gt;VT_DISPATCH&lt;&#x2F;code&gt; value which references the SWbemServices instance. Instead of calling the &lt;q&gt;ConnectServer&lt;&#x2F;q&gt; method with any parameters one can also call with full remote server support (see &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;aa393720%28v=VS.85%29.aspx&quot;&gt;MSDN&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;The next, and rather easy, step is to execute the query:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OleAutomation&lt;&#x2F;span&gt;&lt;span&gt; serviceAutomation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; service.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getAutomation&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt; resultList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; serviceAutomation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Helper&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getId&lt;&#x2F;span&gt;&lt;span&gt;(serviceAutomation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ExecQuery&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;[] {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;(query),
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;WQL&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;) });
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The Helper.getId method fetches the dispatch id (function number) from the name of the function. So instead of calling a function by name you call it by id and look up the id by the name first:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public static int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getId&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OleAutomation&lt;&#x2F;span&gt;&lt;span&gt; auto, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; name) {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; result[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; auto.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getIDsOfNames&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;[] { name });
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; result.length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Object does not support &amp;#39;%s&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, name));
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The result of the &lt;q&gt;ExecQuery&lt;&#x2F;q&gt; call is an object of the type &lt;tt&gt;SWbemObjectSet&lt;&#x2F;tt&gt;. The strange thing with this object is, that &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;aa393762%28v=VS.85%29.aspx&quot;&gt;by documentation&lt;&#x2F;a&gt; it only has an &lt;q&gt;Item&lt;&#x2F;q&gt; method which requires that you actually don’t want to know and provide. While all examples you find which that the result is directly used in VB &lt;q&gt;for each&lt;&#x2F;q&gt; constructs. But the object also provides an undocumented (still valid) &lt;q&gt;_NewEnum&lt;&#x2F;q&gt; method which is used by e.g. VB by default for &lt;q&gt;for each&lt;&#x2F;q&gt; loops. So one can call this method explicitly and iterate over the result.&lt;&#x2F;p&gt;
&lt;p&gt;The problem here is, that the result to the &lt;q&gt;_NewEnum&lt;&#x2F;q&gt; call is a VT_UNKNOWN variant since the result is a COM object without support for IDispatch. So one has to play plain COM games and QueryInterface for IEnumVARIANT and iterate using &lt;q&gt;Next&lt;&#x2F;q&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;And here comes the part were one needs to use SWT internal methods, since this requires allocating memory and performing pointer stuff. So be warned, from here on your are actually calling operating system memory allocating functions that may: a) crash your application when used improperly (like it does when you use C or C++) and b) produce memory leaks that are not covered by the Java VM but by direct calls to &lt;q&gt;alloc&lt;&#x2F;q&gt; calls in the OS.&lt;&#x2F;p&gt;
&lt;p&gt;In order to separate this stuff from the rest of the classes it all went into the Helper class, providing an &lt;q&gt;forEachVariant&lt;&#x2F;q&gt; method using a visitor interface:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public static interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;VariantVisitor &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;visit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;variant&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The method first gets the &lt;q&gt;enum&lt;&#x2F;q&gt; using the property (not method) &lt;q&gt;_NewEnum&lt;&#x2F;q&gt; which returns a variant of type VT_UNKNOWN:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt; enumObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; enumerableAuto.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getProperty&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Helper&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getId&lt;&#x2F;span&gt;&lt;span&gt;(enumerableAuto, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;_NewEnum&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now one needs to QueryInterface to get the IEnumVARIANT interface for the unknown:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;* int *&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; ppvObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;* int *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; rc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; enumObject.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getUnknown&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;QueryInterface&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;COM&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IIDIEnumVARIANT&lt;&#x2F;span&gt;&lt;span&gt;, ppvObject);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(rc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;S_OK&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; rc; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;&#x2F; in case of error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looks actually like call in C. The result will be a pointer to a IEnumVARIANT in ppvObject. You should also be aware of the fact that QueryInterface also performs as an AddRef, so you have to perform one Release call when you are done in order to decrease the usage count on the instance.&lt;&#x2F;p&gt;
&lt;p&gt;Next one can pass the pointer to the instance to an instance of IEnumVARIANT (which is also from SWT internal) and already provides mapping to the function calls Reset, Next, Release.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IEnumVARIANT&lt;&#x2F;span&gt;&lt;span&gt; enumVariant &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IEnumVARIANT&lt;&#x2F;span&gt;&lt;span&gt;(ppvObject[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;enumVariant.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Reset&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And now comes the &lt;q&gt;fun&lt;&#x2F;q&gt; part of the whole thing. Allocating memory and iterating over the enumeration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;int[]&lt;&#x2F;span&gt;&lt;span&gt; pceltFetched &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new int&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; rgelt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GlobalAlloc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GMEM_FIXED &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GMEM_ZEROINIT&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;.sizeof);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(enumVariant.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, rgelt, pceltFetched) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OLE&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;S_OK
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; pceltFetched[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;win32_new&lt;&#x2F;span&gt;&lt;span&gt;(rgelt);
&lt;&#x2F;span&gt;&lt;span&gt;      variantVisitor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;visit&lt;&#x2F;span&gt;&lt;span&gt;(v);
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;finally &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GlobalFree&lt;&#x2F;span&gt;&lt;span&gt;(rgelt);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First a new Variant structure is allocated (again, this is OS memory allocation, not JVM!). Next the while loop iterates over the enumeration using Next calls and passes the variants to the visitor interface. The try-finally block ensures that when something goes wrong, at least the memory is freed in order to prevent memory leaks.&lt;&#x2F;p&gt;
&lt;p&gt;Actually is was asking myself why this IEnumVARIANT implementation does not perform the full magic and provides a way to access enums without using internal stuff. But I guess the SWT team has not too much interest in working on OLE&#x2F;COM stuff and likes to keep things as minimalistic as possible.&lt;&#x2F;p&gt;
&lt;p&gt;As last step the while executeQuery method iterates over the &lt;q&gt;SWbemObjectSet&lt;&#x2F;q&gt; enumeration which returns Variants (&lt;code&gt;VT_DISPATCH&lt;&#x2F;code&gt;) pointing to instances of &lt;q&gt;SWbemObject&lt;&#x2F;q&gt;. They again have a property &lt;q&gt;Properties_&lt;&#x2F;q&gt; that, which again is an enumeration of &lt;q&gt;Name&lt;&#x2F;q&gt; and &lt;q&gt;Value&lt;&#x2F;q&gt; pairs. The one needs to iterate again in order to request all properties.&lt;&#x2F;p&gt;
&lt;p&gt;it was quite interesting to see what is possible with Eclipse SWT and quite annoying to dig through incomplete COM documentation. But in the end it worked :)&lt;&#x2F;p&gt;
&lt;p&gt;Don’t forget to check the full source code at github: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;wmisample&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;wmisample&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Just clone (aka check out) the source:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone git:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;wmisample.git wmisample.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you don’t like to use git, you can also use the “Downloads” button on github and download a ZIP instead.&lt;&#x2F;p&gt;
&lt;p&gt;The full forEach method is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public static int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;forEachVariant&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt; enumerable, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;VariantVisitor&lt;&#x2F;span&gt;&lt;span&gt; variantVisitor) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OleAutomation&lt;&#x2F;span&gt;&lt;span&gt; enumerableAuto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; enumerable.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getAutomation&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt; enumObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; enumerableAuto.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getProperty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Helper&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getId&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;           enumerableAuto, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;_NewEnum&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;* int *&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; ppvObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;* int *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; rc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; enumObject.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getUnknown&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;QueryInterface&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;COM&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IIDIEnumVARIANT&lt;&#x2F;span&gt;&lt;span&gt;, ppvObject);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(rc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;S_OK&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; rc;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IEnumVARIANT&lt;&#x2F;span&gt;&lt;span&gt; enumVariant &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IEnumVARIANT&lt;&#x2F;span&gt;&lt;span&gt;(ppvObject[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            enumVariant.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Reset&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;int[]&lt;&#x2F;span&gt;&lt;span&gt; pceltFetched &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new int&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; rgelt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GlobalAlloc&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GMEM_FIXED &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;GMEM_ZEROINIT&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;.sizeof);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(enumVariant.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, rgelt, pceltFetched) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OLE&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;S_OK
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; pceltFetched[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;win32_new&lt;&#x2F;span&gt;&lt;span&gt;(rgelt);
&lt;&#x2F;span&gt;&lt;span&gt;                    variantVisitor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;visit&lt;&#x2F;span&gt;&lt;span&gt;(v);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;finally &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;GlobalFree&lt;&#x2F;span&gt;&lt;span&gt;(rgelt);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;finally &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            enumVariant.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Release&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OLE&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;S_OK&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;finally &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        enumerableAuto.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dispose&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the full query logic method is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WMIObjectInformation&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;executeQuery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; query) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;OleAutomation&lt;&#x2F;span&gt;&lt;span&gt; serviceAutomation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; service.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getAutomation&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WMIObjectInformation&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;LinkedList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WMIObjectInformation&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt; resultList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; serviceAutomation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Helper&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getId&lt;&#x2F;span&gt;&lt;span&gt;(serviceAutomation, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;ExecQuery&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;[] { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;(query), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;WQL&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Variant&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;) });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(resultList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span&gt;(serviceAutomation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getLastError&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Helper&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;forEachVariant&lt;&#x2F;span&gt;&lt;span&gt;(resultList, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;VariantVisitor&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;visit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(Variant &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;variant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Map&amp;lt;String, Object&amp;gt; params &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;HashMap&amp;lt;String, Object&amp;gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                Variant properties &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Helper.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getParameter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(variant,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Properties_&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                Helper.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;forEachVariant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(properties, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;VariantVisitor() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;visit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(Variant &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;variant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        Variant name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Helper.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getParameter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(variant, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Name&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        Variant value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Helper.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getParameter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(variant,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Value&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        Object objectValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Helper.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;convertVariant&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(value);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        params.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(), objectValue);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WMIObjectInformation(Helper.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getParameter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        Helper.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getParameter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(variant, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Path_&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;Path&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;                        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(), params));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;finally &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        serviceAutomation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;dispose&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Eclipse Install Issue</title>
        <published>2011-02-04T16:25:56+01:00</published>
        <updated>2011-02-04T16:25:56+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/02/04/eclipse-install-issue/" type="text/html"/>
        <id>dentrassi.de/blog/2011/02/04/eclipse-install-issue/</id>
        <content type="html">&lt;p&gt;I just stumbled over a strange issue when installing an additional plugin into a fresh Eclipse installation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;color:#383a42;&quot;&gt;&lt;code&gt;&lt;span&gt;An error occurred while collecting items to be installed&amp;lt;br&amp;gt;&amp;lt;&#x2F;br&amp;gt;session context was:(profile=SDKProfile, phase=org.eclipse.equinox.internal.p2.engine.phases.Collect, operand=, action=).
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;No repository found containing: osgi.bundle,org.eclipse.team.cvs.ssh,3.2.100.I20090508-2000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I was unable to add any new plugin and searching Google for help was not successful. There was an issue somewhere in the Eclipse Bugzilla that the plugin &lt;tt&gt;org.eclipse.team.cvs.ssh&lt;&#x2F;tt&gt; was optional and no longer installed or required. Seems that P2 thinks the somewhat required for the installation process.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;But I found one hint that deactivating the option “Contact all update sites during install to find required software” helps. And it did.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;wp-content&#x2F;uploads&#x2F;other_repos.png&quot; alt=&quot;Screenshot of Eclipse Dialog&quot; title=&quot;other_repos&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Workaround for LoadTimeWeaver issue with JBoss 6 and Spring 3</title>
        <published>2011-02-01T11:21:12+01:00</published>
        <updated>2011-02-01T11:21:12+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/02/01/workaround-for-loadtimeweaver-issue-with-jboss-6-and-spring-3/" type="text/html"/>
        <id>dentrassi.de/blog/2011/02/01/workaround-for-loadtimeweaver-issue-with-jboss-6-and-spring-3/</id>
        <content type="html">&lt;p&gt;A possible workaround for the LTW issue that appeared in JBoss 6 using Spring 3 (&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;SPR-7887&quot; href=&quot;https:&#x2F;&#x2F;jira.springsource.org&#x2F;browse&#x2F;SPR-7887&quot;&gt;SPR-7887&lt;&#x2F;a&gt;) is to add an empty &lt;tt&gt;jboss-scanning.xml&lt;&#x2F;tt&gt; file to EAR &lt;em&gt;and&lt;&#x2F;em&gt; WAR files.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The reason to this issue as explained by &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jira.springsource.org&#x2F;browse&#x2F;SPR-7887?focusedCommentId=62866&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_62866&quot;&gt;one comment&lt;&#x2F;a&gt; that JBoss pre-loads classes when scanning for annotations. Which triggers the class loader before Spring has a chance to add the AspectJ transformer to the class loader. The LTW support of Spring loads fine but &lt;em&gt;after&lt;&#x2F;em&gt; all classes are loaded.&lt;&#x2F;p&gt;
&lt;p&gt;Adding the empty &lt;tt&gt;jboss-scanning.xml&lt;&#x2F;tt&gt; to EAR and WAR files will skip the scanning for the modules and trigger the transformer later.&lt;&#x2F;p&gt;
&lt;p&gt;Example for &lt;tt&gt;jboss-scanning.xml&lt;&#x2F;tt&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;1.0&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scanning &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;urn:jboss:scanning:1.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;  
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;scanning&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thanks to Marius Bogoevici and Costin Leau for looking into this issue.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Name that pattern</title>
        <published>2011-01-28T10:50:27+01:00</published>
        <updated>2011-01-28T10:50:27+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/01/28/name-that-pattern/" type="text/html"/>
        <id>dentrassi.de/blog/2011/01/28/name-that-pattern/</id>
        <content type="html">&lt;p&gt;In my day to day work I encounter several interesting programming pattern that I don’t have a name for. Maybe you have?! So name the following pattern:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;trans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWeights &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;isEmpty &lt;&#x2F;span&gt;&lt;span&gt;() ) {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Collection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;gt; weightList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; trans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWeights &lt;&#x2F;span&gt;&lt;span&gt;();  
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WeightVo&lt;&#x2F;span&gt;&lt;span&gt; weightVo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;  
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Weight&lt;&#x2F;span&gt;&lt;span&gt; weight &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; weightList )  
&lt;&#x2F;span&gt;&lt;span&gt; {  
&lt;&#x2F;span&gt;&lt;span&gt; weightVo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWeightDao &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;toWeightVo &lt;&#x2F;span&gt;&lt;span&gt;( weight );  
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;  
&lt;&#x2F;span&gt;&lt;span&gt; }  
&lt;&#x2F;span&gt;&lt;span&gt; truckVo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setWeightVo &lt;&#x2F;span&gt;&lt;span&gt;( weightVo );  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While one can argue if this one-liner is more readable and understandable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;truckVo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setWeightVo &lt;&#x2F;span&gt;&lt;span&gt;( trans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWeights&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;isEmpty&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWeightDao &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;toWeightVo &lt;&#x2F;span&gt;&lt;span&gt;( trans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWeights&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;) ) );  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The following definitely is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;trans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWeights &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;isEmpty &lt;&#x2F;span&gt;&lt;span&gt;() ) {
&lt;&#x2F;span&gt;&lt;span&gt; truckVo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setWeightVo &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWeightDao &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;toWeightVo &lt;&#x2F;span&gt;&lt;span&gt;( trans.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getWeights&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;) ) );  
&lt;&#x2F;span&gt;&lt;span&gt;}  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Impressum &#x2F; Impress</title>
        <published>2011-01-26T19:05:20+01:00</published>
        <updated>2011-01-26T19:05:20+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/legal/impress/" type="text/html"/>
        <id>dentrassi.de/legal/impress/</id>
        <content type="html">&lt;h2 id=&quot;angaben-gemass-ss-5-tmg&quot;&gt;Angaben gemäß § 5 TMG:&lt;&#x2F;h2&gt;
&lt;p&gt;Jens Reimann&lt;br &#x2F;&gt;
Egilostraße 2&lt;br &#x2F;&gt;
85614 Eglharting &#x2F; Kirchseeon&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kontakt&quot;&gt;Kontakt:&lt;&#x2F;h2&gt;
&lt;p&gt;Telefon: +49 &#x2F; 171 &#x2F; 3648411&lt;br &#x2F;&gt;
E-Mail: ctron@dentrassi.de&lt;&#x2F;p&gt;
&lt;h2 id=&quot;verantwortlich-fur-den-inhalt-nach-ss-55-abs-2-rstv&quot;&gt;Verantwortlich für den Inhalt nach § 55 Abs. 2 RStV:&lt;&#x2F;h2&gt;
&lt;p&gt;Jens Reimann&lt;br &#x2F;&gt;
Egilostraße 2&lt;br &#x2F;&gt;
85614 Eglharting&#x2F;Kirchseeon&lt;&#x2F;p&gt;
&lt;h3 id=&quot;haftung-fur-inhalte&quot;&gt;Haftung für Inhalte&lt;&#x2F;h3&gt;
&lt;p&gt;Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen.&lt;&#x2F;p&gt;
&lt;p&gt;Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;haftung-fur-links&quot;&gt;Haftung für Links&lt;&#x2F;h3&gt;
&lt;p&gt;Unser Angebot enthält Links zu externen Websites Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar.&lt;&#x2F;p&gt;
&lt;p&gt;Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;urheberrecht&quot;&gt;Urheberrecht&lt;&#x2F;h3&gt;
&lt;p&gt;Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur für den privaten, nicht kommerziellen Gebrauch gestattet.&lt;&#x2F;p&gt;
&lt;p&gt;Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;site-notice&quot;&gt;Site Notice&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;information-provided-according-to-sec-5-german-telemedia-act-tmg&quot;&gt;Information provided according to Sec. 5 German Telemedia Act (TMG):&lt;&#x2F;h2&gt;
&lt;p&gt;Jens Reimann&lt;br &#x2F;&gt;
Egilostraße 2&lt;br &#x2F;&gt;
85614 Eglharting &#x2F; Kirchseeon&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contact&quot;&gt;Contact:&lt;&#x2F;h2&gt;
&lt;p&gt;Telephone: +49 &#x2F; 171 &#x2F; 3648411&lt;br &#x2F;&gt;
Email: ctron@dentrassi.de&lt;&#x2F;p&gt;
&lt;h2 id=&quot;responsible-for-contents-acc-to-sec-55-para-2-german-federal-broadcasting-agreement-rstv&quot;&gt;Responsible for contents acc. to Sec. 55, para. 2 German Federal Broadcasting Agreement (RstV):&lt;&#x2F;h2&gt;
&lt;p&gt;Jens Reimann&lt;br &#x2F;&gt;
Egilostraße 2&lt;br &#x2F;&gt;
85614 Eglharting&#x2F;Kirchseeon&lt;&#x2F;p&gt;
&lt;h3 id=&quot;liability-for-contents&quot;&gt;Liability for Contents&lt;&#x2F;h3&gt;
&lt;p&gt;As service providers, we are liable for own contents of these websites according to Sec. 7, paragraph 1 German Telemedia Act (TMG). However, according to Sec. 8 to 10 German Telemedia Act (TMG), service providers are not obligated to permanently monitor submitted or stored information or to search for evidences that indicate illegal activities.&lt;&#x2F;p&gt;
&lt;p&gt;Legal obligations to removing information or to blocking the use of information remain unchallenged. In this case, liability is only possible at the time of knowledge about a specific violation of law. Illegal contents will be removed immediately at the time we get knowledge of them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;liability-for-links&quot;&gt;Liability for Links&lt;&#x2F;h3&gt;
&lt;p&gt;Our offer includes links to external third party websites. We have no influence on the contents of those websites, therefore we cannot guarantee for those contents. Providers or administrators of linked websites are always responsible for their own contents.&lt;&#x2F;p&gt;
&lt;p&gt;The linked websites had been checked for possible violations of law at the time of the establishment of the link. Illegal contents were not detected at the time of the linking. A permanent monitoring of the contents of linked websites cannot be imposed without reasonable indications that there has been a violation of law. Illegal links will be removed immediately at the time we get knowledge of them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;copyright&quot;&gt;Copyright&lt;&#x2F;h3&gt;
&lt;p&gt;Contents and compilations published on these websites by the providers are subject to German copyright laws. Reproduction, editing, distribution as well as the use of any kind outside the scope of the copyright law require a written permission of the author or originator. Downloads and copies of these websites are permitted for private use only.&lt;br &#x2F;&gt;
The commercial use of our contents without permission of the originator is prohibited.&lt;&#x2F;p&gt;
&lt;p&gt;Copyright laws of third parties are respected as long as the contents on these websites do not originate from the provider. Contributions of third parties on this site are indicated as such. However, if you notice any violations of copyright law, please inform us. Such contents will be removed immediately.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Combo viewer requirements</title>
        <published>2011-01-26T18:47:17+01:00</published>
        <updated>2011-01-26T18:47:17+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/01/26/combo-viewer-requirements/" type="text/html"/>
        <id>dentrassi.de/blog/2011/01/26/combo-viewer-requirements/</id>
        <content type="html">&lt;p&gt;Today I tried to create a combo viewer in Eclipse with a different approach than the it seems the widgets was designed. I have an object which has to main properties an ID and a descriptive name. While this is nothing unusual following requirements seems to be:&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;The list of the combo box should show the label while the text input field of the combo box should show the id of the object. Using Eclipse Databinding this seems to be an impossible task (if you know a way please post it at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;4802622&#x2F;222044&quot;&gt;stackoverflow&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;I managed to work around this issue intercepting the selection event triggered by the list, converting the value myself and setting the text property of the combo box manually. This will then trigger the databinding stuff and everything after that hack works as usual.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;widget.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;addSelectionListener &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SelectionAdapter &lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;Override  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0184bc;&quot;&gt;widgetSelected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;SelectionEvent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;)  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; {  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ISelection selection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;AbstractComboSelector.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;.viewer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getSelection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;();  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;selection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;isEmpty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; selection &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;instanceof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IStructuredSelection ) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IStructuredSelection sel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;(IStructuredSelection)selection;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;     widget.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setText &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;convert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;( sel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getFirstElement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;() ) );  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;   } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;     widget.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;setText &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#50a14f;&quot;&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;);  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;   }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt; }  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.dbc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;bindValue &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;WidgetProperties&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;observe &lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.viewer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;getControl &lt;&#x2F;span&gt;&lt;span&gt;() ), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e45649;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.value );  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only issue that is left is the fact that the up and down keys won’t work since there is no real selected object anymore. The selection will always the “null” but the text property of the widget is set.&lt;&#x2F;p&gt;
&lt;p&gt;Works for me ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Hello world!</title>
        <published>2011-01-26T11:54:05+01:00</published>
        <updated>2011-01-26T11:54:05+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2011/01/26/hello-world/" type="text/html"/>
        <id>dentrassi.de/blog/2011/01/26/hello-world/</id>
        <content type="html">&lt;p&gt;After upgrading my server and cleanup up stuff I thought it would be nice to work a little bit on the homepage again.
Since iWeb seems to be stuck and I am working mostly on Linux now I thought it would be interesting to give WordPress
a try.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s see what happens …&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;</content>
    </entry>
    <entry xml:lang="en">
        <title>Old projects</title>
        <published>2011-01-26T10:57:45+01:00</published>
        <updated>2011-01-26T10:57:45+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/unsorted/old-projects/" type="text/html"/>
        <id>dentrassi.de/pages/unsorted/old-projects/</id>
        <content type="html">&lt;h2 id=&quot;buchprojekt&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;http:&#x2F;&#x2F;www.amazon.de&#x2F;MES-Anforderungen-Architektur-Design-Spring&#x2F;dp&#x2F;3868020020&quot; href=&quot;http:&#x2F;&#x2F;www.amazon.de&#x2F;MES-Anforderungen-Architektur-Design-Spring&#x2F;dp&#x2F;3868020020&quot;&gt;Buchprojekt&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;MES: Anforderungen, Architektur und Design mit Java, Spring &amp;amp; Co&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gregexp&quot;&gt;&lt;a href=&quot;..&#x2F;..&#x2F;download&#x2F;gregexp&#x2F;&quot; title=&quot;http:&#x2F;&#x2F;dentrassi.de&#x2F;download&#x2F;gregexp&#x2F;&quot;&gt;GRegExp&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A graphical regular expression explorer for GTK+&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3964-r-line-discipline&quot;&gt;&lt;a href=&quot;..&#x2F;..&#x2F;3964&#x2F;&quot; title=&quot;http:&#x2F;&#x2F;dentrassi.de&#x2F;3964&#x2F;&quot;&gt;3964(R) line discipline&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Extension applied on the original 3964 driver in the linux kernel and a dæmon application providing 3964(R) connectivity for the Cyclades TS-100 console server.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rpms&quot;&gt;&lt;a href=&quot;..&#x2F;..&#x2F;download&quot; title=&quot;http:&#x2F;&#x2F;dentrassi.de&#x2F;download&quot;&gt;RPMs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;RPMs build for RH9 or FC1&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lcl&quot;&gt;&lt;a href=&quot;..&#x2F;..&#x2F;main&#x2F;LCL.html&quot; title=&quot;LCL.html&quot;&gt;LCL&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Linux Class Library&lt;&#x2F;p&gt;
&lt;p&gt;A C++ library containing tools for most common stuff in application programming&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>LCL</title>
        <published>2011-01-26T10:49:13+01:00</published>
        <updated>2011-01-26T10:49:13+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/lcl/" type="text/html"/>
        <id>dentrassi.de/pages/attic/lcl/</id>
        <content type="html">&lt;p&gt;The “Linux Class Library”.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;what-was&quot;&gt;What was…&lt;&#x2F;h2&gt;
&lt;p&gt;The LCL was started in 1998 as a set of tools you need in your “every day C++ programmer day”. Using templates, exceptions but keeping it “all simple” it contains lots of stuff that make your life easier. During the following years the LCL was extended and ported from various Unix flavours even to native Windows. Considering different compilers back then (egcs, DEC C++, MSVC 5) it was quite a job to keep it all working on different platforms. The STL was quite unportable and still misses several features LCL has.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;and-what-is&quot;&gt;… and what is!&lt;&#x2F;h2&gt;
&lt;p&gt;Up to 2004 it served my quite well although much better libraries (Boost for example) came up and with Microsoft fixing its “C++” compiler and all the Unix flavours vanishing I have no need for selfmade C++ library. Beside that, I’m currently working a lot more with Java than with C++.&lt;&#x2F;p&gt;
&lt;p&gt;So don’t expect any more updates for LCL go and some of the fine libraries that now are out there ;-) or trade in your Emacs and GCC for Eclipse :-P&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;lcl&quot; title=&quot;http:&#x2F;&#x2F;dentrassi.de&#x2F;lcl&quot;&gt;The old homepage is still here!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>My Projects</title>
        <published>2011-01-26T10:47:36+01:00</published>
        <updated>2011-01-26T10:47:36+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/unsorted/my-projects/" type="text/html"/>
        <id>dentrassi.de/pages/unsorted/my-projects/</id>
        <content type="html">&lt;h2 id=&quot;package-drone&quot;&gt;Package Drone&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;packagedrone.org&quot;&gt;http:&#x2F;&#x2F;packagedrone.org&lt;&#x2F;a&gt; or the live demo system at &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;thedrone.packagedrone.org&quot;&gt;https:&#x2F;&#x2F;thedrone.packagedrone.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An open source, OSGi first software artifact repository.&lt;&#x2F;p&gt;
&lt;p&gt;Actually it is repository for all kinds of software artifacts (like JAR files, Debian and RPM packages, …) which can extract metadata, transform artifacts and render out different repository formats (like Eclipse P2, OSGi R5, Maven, APT, YUM, …).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;eclipse-scada-openscada&quot;&gt;Eclipse SCADA &amp;amp; openSCADA&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;eclipse.org&#x2F;eclipsescada&quot;&gt;http:&#x2F;&#x2F;eclipse.org&#x2F;eclipsescada&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;openscada.org&quot;&gt;http:&#x2F;&#x2F;openscada.org&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;An open Source SCADA System. Most of the openSCADA project has been migrated to Eclipse SCADA but there are some modules which do not fit into the EPL based license platform which the Eclipse Foundation follow. So openSCADA now is like an “add-on” to Eclipse SCADA.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;emf-genmodel-annotations&quot;&gt;EMF GenModel Annotations&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;my-projects&#x2F;emf-genmodel-annotations&#x2F;&quot;&gt;EMF GenModel Annotations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A small page documenting the different EMF Annotations which are used in the GenModel process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;apt-repository&quot;&gt;APT repository&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dentrassi.de&#x2F;my-projects&#x2F;apt-repo&#x2F;&quot;&gt;APT repository&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A Maven plugin which can render an APT repository out of a set of &lt;code&gt;.deb&lt;&#x2F;code&gt; files during a maven build.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;maven-rpm-builder&quot;&gt;Maven RPM builder&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctron.github.io&#x2F;rpm-builder&quot;&gt;Maven RPM builder&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A Maven plugin which can create RPM packages in plain Java. No &lt;code&gt;rpmbuild&lt;&#x2F;code&gt; command line tool required.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;log4j2-mock-for-elasticsearch-5-x&quot;&gt;Log4J2 mock for Elasticsearch 5.x&lt;&#x2F;h2&gt;
&lt;p&gt;See &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.elasticsearch.log4j2-mock&#x2F;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;ctron&#x2F;de.dentrassi.elasticsearch.log4j2-mock&#x2F;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Disclaimer</title>
        <published>2011-01-26T10:45:22+01:00</published>
        <updated>2011-01-26T10:45:22+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/legal/disclaimer/" type="text/html"/>
        <id>dentrassi.de/legal/disclaimer/</id>
        <content type="html">&lt;h2 id=&quot;deutsch&quot;&gt;Deutsch&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;haftung-fur-inhalte&quot;&gt;Haftung für Inhalte&lt;&#x2F;h3&gt;
&lt;p&gt;Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen.&lt;&#x2F;p&gt;
&lt;p&gt;Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;haftung-fur-links&quot;&gt;Haftung für Links&lt;&#x2F;h3&gt;
&lt;p&gt;Unser Angebot enthält Links zu externen Websites Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar.&lt;&#x2F;p&gt;
&lt;p&gt;Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;urheberrecht&quot;&gt;Urheberrecht&lt;&#x2F;h3&gt;
&lt;p&gt;Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur für den privaten, nicht kommerziellen Gebrauch gestattet.&lt;&#x2F;p&gt;
&lt;p&gt;Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;english&quot;&gt;English&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;liability-for-contents&quot;&gt;Liability for Contents&lt;&#x2F;h3&gt;
&lt;p&gt;As service providers, we are liable for own contents of these websites according to Sec. 7, paragraph 1 German Telemedia Act (TMG). However, according to Sec. 8 to 10 German Telemedia Act (TMG), service providers are not obligated to permanently monitor submitted or stored information or to search for evidences that indicate illegal activities.&lt;&#x2F;p&gt;
&lt;p&gt;Legal obligations to removing information or to blocking the use of information remain unchallenged. In this case, liability is only possible at the time of knowledge about a specific violation of law. Illegal contents will be removed immediately at the time we get knowledge of them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;liability-for-links&quot;&gt;Liability for Links&lt;&#x2F;h3&gt;
&lt;p&gt;Our offer includes links to external third party websites. We have no influence on the contents of those websites, therefore we cannot guarantee for those contents. Providers or administrators of linked websites are always responsible for their own contents.&lt;&#x2F;p&gt;
&lt;p&gt;The linked websites had been checked for possible violations of law at the time of the establishment of the link. Illegal contents were not detected at the time of the linking. A permanent monitoring of the contents of linked websites cannot be imposed without reasonable indications that there has been a violation of law. Illegal links will be removed immediately at the time we get knowledge of them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;copyright&quot;&gt;Copyright&lt;&#x2F;h3&gt;
&lt;p&gt;Contents and compilations published on these websites by the providers are subject to German copyright laws. Reproduction, editing, distribution as well as the use of any kind outside the scope of the copyright law require a written permission of the author or originator. Downloads and copies of these websites are permitted for private use only.&lt;br &#x2F;&gt;
The commercial use of our contents without permission of the originator is prohibited.&lt;&#x2F;p&gt;
&lt;p&gt;Copyright laws of third parties are respected as long as the contents on these websites do not originate from the provider. Contributions of third parties on this site are indicated as such. However, if you notice any violations of copyright law, please inform us. Such contents will be removed immediately.&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>About</title>
        <published>2011-01-26T10:11:06+01:00</published>
        <updated>2011-01-26T10:11:06+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/about/" type="text/html"/>
        <id>dentrassi.de/pages/about/</id>
        <content type="html">&lt;p&gt;This is a personal blog about technical stuff, life, the universe and everything. Sometimes I write down ideas so that others might find them, implement them and send me a copy ;-) Some posts are “note to self”, stuff that I would like to rediscover once I forgot it. And of course a blog is great toy to play around with :-)&lt;&#x2F;p&gt;
&lt;blockquote&gt;
Sometimes found employed on Vogon Constructor Fleets, the Dentrassis are The best cooks and The best drink mixers, and they don’t give a wet slap about anything else. They’ll usually help Hitchhikers aboard, partly because they like the company, but mostly because it annoys the Vogons.
&lt;p&gt;&lt;cite&gt; &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;http:&#x2F;&#x2F;hhgproject.org&#x2F;&quot; href=&quot;http:&#x2F;&#x2F;hhgproject.org&#x2F;&quot;&gt;The Hitchhiker’s Guide To The Galaxy&lt;&#x2F;a&gt; &lt;&#x2F;cite&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;script type=&quot;application&#x2F;ld+json&quot;&gt;
{
  &quot;@context&quot; : &quot;http:&#x2F;&#x2F;schema.org&quot;,
  &quot;@type&quot; : &quot;Person&quot;,
  &quot;name&quot; : &quot;Jens Reimann&quot;,
  &quot;url&quot; : &quot;https:&#x2F;&#x2F;dentrassi.de&quot;,
  &quot;email&quot; : &quot;ctron@dentrassi.de&quot;,
  &quot;jobTitle&quot; : &quot;Principal Software Engineer&quot;,
  &quot;sameAs&quot; : [
    &quot;https:&#x2F;&#x2F;twitter.com&#x2F;ctron&quot;,
    &quot;https:&#x2F;&#x2F;www.facebook.com&#x2F;jens.reimann&quot;,
    &quot;https:&#x2F;&#x2F;de.linkedin.com&#x2F;in&#x2F;ctron&quot;,
    &quot;https:&#x2F;&#x2F;plus.google.com&#x2F;+JensReimann&quot;,
    &quot;https:&#x2F;&#x2F;mastodon.dentrassi.de&#x2F;@ctron&quot;
]
}
&lt;&#x2F;script&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Reading Object Streams in OSGi</title>
        <published>2010-03-02T18:56:26+01:00</published>
        <updated>2010-03-02T18:56:26+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2010/03/02/reading-object-streams-in-osgi/" type="text/html"/>
        <id>dentrassi.de/blog/2010/03/02/reading-object-streams-in-osgi/</id>
        <content type="html">&lt;p&gt;Reading an object from an ObjectInputStream is easy. But using OSGi it can be a little bit more difficult. Due to the class loader system of OSGi the ObjectInputStream might not know the class that was stored. Assume you have a Bundle A, B and C. B provides the storing capabilities that stores objects somewhere and C provides the data object itself. Now if A tells B to store some object from C this will not be a problem, since the object class is attached to the object instance. But reading back the object will result in a ClassNotFoundException since B has no reference to C and therefore does not know any classes of C.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;One solution of course would be to add a dependency from B to C. But that is probably not what you want. Another way would be using Eclipses “Buddy” policies workaround for problems like this. In this case the bundle B would declare itself capable of working with the buddy system and C would declare itself a “buddy of B”. This turns around the reference. While this is a possible way if you cannot change the logic in B (like existing third party libraries that have to be used) it also has some drawbacks. First of all you commit to using Eclipse&#x2F;Equinox since this is not covered by OSGi. Also you still have to declare those dependencies from C to B.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand you can sub-class the ObjectInputStream and override “resolveClass” to let the bundle resolve the class instead of the “current” classloader. Passing the bundle A to that input stream you would have all the classes you need.&lt;&#x2F;p&gt;
&lt;p&gt;Check out the following sample implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#fafafa;color:#383a42;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;IOException&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;InputStream&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ObjectInputStream&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.io.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;ObjectStreamClass&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.osgi.framework.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c18401;&quot;&gt;Bundle&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt; * An object input stream which loads its classes from the provided bundle.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a626a4;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt; Jens Reimann
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt; *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;public class BundleObjectInputStream extends ObjectInputStream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    private final Bundle bundle;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    public BundleObjectInputStream ( final InputStream in, final Bundle bundle ) throws IOException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;        super ( in );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;        this.bundle = bundle;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    @Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    protected Class&amp;lt;?&amp;gt; resolveClass ( final ObjectStreamClass desc ) throws IOException, ClassNotFoundException
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;        return this.bundle.loadClass ( desc.getName () );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a0a1a7;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>Equinox Remote Terminal Console</title>
        <published>2010-02-25T18:54:26+01:00</published>
        <updated>2010-02-25T18:54:26+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/blog/2010/02/25/equinox-remote-terminal-console/" type="text/html"/>
        <id>dentrassi.de/blog/2010/02/25/equinox-remote-terminal-console/</id>
        <content type="html">&lt;p&gt;Although Equinox offers some sort of remote TCP console it is not what you actually want to have. Being limited to one session, having not authentication and allowing the user to execute any command and shut down the OSGi container is not an option for a productive system.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;In OpenSCADA we faced the same problem so we simply developed an OSGi Remote Console based on Apache Mina.&lt;&#x2F;p&gt;
&lt;p&gt;Our equinox console works around the limits of the original OSGi TCP console and can simply be dropped in as a replacement.&lt;&#x2F;p&gt;
&lt;p&gt;SVN Link to the project: &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;pubsvn.inavare.net&#x2F;openscada&#x2F;modules&#x2F;aurora&#x2F;trunk&#x2F;org.openscada.osgi.equinox.console&#x2F;&quot;&gt;http:&#x2F;&#x2F;pubsvn.inavare.net&#x2F;openscada&#x2F;modules&#x2F;aurora&#x2F;trunk&#x2F;org.openscada.osgi.equinox.console&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Also, we played a little bit with an IRC bot that exposes the OSGi console of Equinox to an IRC server. This is not really tested and just a proof of concept. But it works. If you like check out &lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;pubsvn.inavare.net&#x2F;openscada&#x2F;modules&#x2F;aurora&#x2F;trunk&#x2F;org.openscada.osgi.equinox.ircbot&#x2F;&quot;&gt;http:&#x2F;&#x2F;pubsvn.inavare.net&#x2F;openscada&#x2F;modules&#x2F;aurora&#x2F;trunk&#x2F;org.openscada.osgi.equinox.ircbot&#x2F;&lt;&#x2F;a&gt; and play with it ;-)&lt;&#x2F;p&gt;
</content>
    </entry>
    <entry xml:lang="en">
        <title>And more</title>
        <published>2010-01-01T09:31:10+01:00</published>
        <updated>2010-01-01T09:31:10+01:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="dentrassi.de/pages/attic/and-more/" type="text/html"/>
        <id>dentrassi.de/pages/attic/and-more/</id>
        <content type="html">&lt;p&gt;But wait, there is more …&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;buchprojekt&quot;&gt;&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; title=&quot;http:&#x2F;&#x2F;www.amazon.de&#x2F;MES-Anforderungen-Architektur-Design-Spring&#x2F;dp&#x2F;3868020020&quot; href=&quot;http:&#x2F;&#x2F;www.amazon.de&#x2F;MES-Anforderungen-Architektur-Design-Spring&#x2F;dp&#x2F;3868020020&quot;&gt;Buchprojekt&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;MES: Anforderungen, Architektur und Design mit Java, Spring &amp;amp; Co&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gregexp&quot;&gt;&lt;a href=&quot;..&#x2F;..&#x2F;download&#x2F;gregexp&#x2F;&quot; title=&quot;http:&#x2F;&#x2F;dentrassi.de&#x2F;download&#x2F;gregexp&#x2F;&quot;&gt;GRegExp&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A graphical regular expression explorer for GTK+&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3964-r-line-discipline&quot;&gt;&lt;a href=&quot;..&#x2F;..&#x2F;3964&#x2F;&quot; title=&quot;http:&#x2F;&#x2F;dentrassi.de&#x2F;3964&#x2F;&quot;&gt;3964(R) line discipline&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Extension applied on the original 3964 driver in the linux kernel and a dæmon application providing 3964(R) connectivity for the Cyclades TS-100 console server.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rpms&quot;&gt;&lt;a href=&quot;..&#x2F;..&#x2F;download&quot; title=&quot;http:&#x2F;&#x2F;dentrassi.de&#x2F;download&quot;&gt;RPMs&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;RPMs build for RH9 or FC1&lt;&#x2F;p&gt;
</content>
    </entry>
</feed>
